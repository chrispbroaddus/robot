// Code generated by protoc-gen-go. DO NOT EDIT.
// source: packages/teleop/proto/webrtc.proto

package teleop

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// SDPStatus describes where the webrtc connection is at
type SDPStatus int32

const (
	SDPStatus_Offered  SDPStatus = 0
	SDPStatus_Answered SDPStatus = 1
)

var SDPStatus_name = map[int32]string{
	0: "Offered",
	1: "Answered",
}
var SDPStatus_value = map[string]int32{
	"Offered":  0,
	"Answered": 1,
}

func (x SDPStatus) String() string {
	return proto.EnumName(SDPStatus_name, int32(x))
}
func (SDPStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

// RTCStatus describes the connection status of the peers via webrtc
type RTCStatus int32

const (
	RTCStatus_Connected    RTCStatus = 0
	RTCStatus_Disconnected RTCStatus = 1
)

var RTCStatus_name = map[int32]string{
	0: "Connected",
	1: "Disconnected",
}
var RTCStatus_value = map[string]int32{
	"Connected":    0,
	"Disconnected": 1,
}

func (x RTCStatus) String() string {
	return proto.EnumName(RTCStatus_name, int32(x))
}
func (RTCStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

// VideoRequest asks a vehicle to generate and return an SDP offer for a video
// stream from a specific camera.
type VideoRequest struct {
	// ID of the camera
	Camera string `protobuf:"bytes,1,opt,name=camera" json:"camera,omitempty"`
	// ID of the webrtc connection
	ConnectionId string `protobuf:"bytes,2,opt,name=connection_id,json=connectionId" json:"connection_id,omitempty"`
	// / Width of video
	Width int32 `protobuf:"varint,3,opt,name=width" json:"width,omitempty"`
	// / Height of video
	Height int32 `protobuf:"varint,4,opt,name=height" json:"height,omitempty"`
}

func (m *VideoRequest) Reset()                    { *m = VideoRequest{} }
func (m *VideoRequest) String() string            { return proto.CompactTextString(m) }
func (*VideoRequest) ProtoMessage()               {}
func (*VideoRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *VideoRequest) GetCamera() string {
	if m != nil {
		return m.Camera
	}
	return ""
}

func (m *VideoRequest) GetConnectionId() string {
	if m != nil {
		return m.ConnectionId
	}
	return ""
}

func (m *VideoRequest) GetWidth() int32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *VideoRequest) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

// SDPRequest contains all of the information needed for an SDP offer or answer.
// This is used in setting up a webrtc connection
type SDPRequest struct {
	// Status of the request should be either offered or answered
	Status SDPStatus `protobuf:"varint,3,opt,name=status,enum=teleop.SDPStatus" json:"status,omitempty"`
	// SDP offer body in string form
	Sdp string `protobuf:"bytes,4,opt,name=sdp" json:"sdp,omitempty"`
	// ID of the webrtc connection
	ConnectionId string `protobuf:"bytes,5,opt,name=connection_id,json=connectionId" json:"connection_id,omitempty"`
}

func (m *SDPRequest) Reset()                    { *m = SDPRequest{} }
func (m *SDPRequest) String() string            { return proto.CompactTextString(m) }
func (*SDPRequest) ProtoMessage()               {}
func (*SDPRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

func (m *SDPRequest) GetStatus() SDPStatus {
	if m != nil {
		return m.Status
	}
	return SDPStatus_Offered
}

func (m *SDPRequest) GetSdp() string {
	if m != nil {
		return m.Sdp
	}
	return ""
}

func (m *SDPRequest) GetConnectionId() string {
	if m != nil {
		return m.ConnectionId
	}
	return ""
}

// SDPConfirmation lets us know if this round of offer/answer worked
type SDPConfirmation struct {
	// Letting us know if this round of offer/answer got the agents connected
	Connected bool `protobuf:"varint,1,opt,name=connected" json:"connected,omitempty"`
	// ID of the webrtc connection
	ConnectionId string `protobuf:"bytes,2,opt,name=connection_id,json=connectionId" json:"connection_id,omitempty"`
}

func (m *SDPConfirmation) Reset()                    { *m = SDPConfirmation{} }
func (m *SDPConfirmation) String() string            { return proto.CompactTextString(m) }
func (*SDPConfirmation) ProtoMessage()               {}
func (*SDPConfirmation) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{2} }

func (m *SDPConfirmation) GetConnected() bool {
	if m != nil {
		return m.Connected
	}
	return false
}

func (m *SDPConfirmation) GetConnectionId() string {
	if m != nil {
		return m.ConnectionId
	}
	return ""
}

// ICECandidate allows for new candidates to be discovered and shared after an offer is made
type ICECandidate struct {
	// Connection information for the new candidate
	Candidate string `protobuf:"bytes,1,opt,name=candidate" json:"candidate,omitempty"`
	// Type of media offered i.e. audio/video
	SdpMid string `protobuf:"bytes,2,opt,name=sdp_mid,json=sdpMid" json:"sdp_mid,omitempty"`
	// Index of media offered
	SdpMlineIndex int32 `protobuf:"varint,3,opt,name=sdp_mline_index,json=sdpMlineIndex" json:"sdp_mline_index,omitempty"`
	// ID of the webrtc connection
	ConnectionId string `protobuf:"bytes,4,opt,name=connection_id,json=connectionId" json:"connection_id,omitempty"`
}

func (m *ICECandidate) Reset()                    { *m = ICECandidate{} }
func (m *ICECandidate) String() string            { return proto.CompactTextString(m) }
func (*ICECandidate) ProtoMessage()               {}
func (*ICECandidate) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{3} }

func (m *ICECandidate) GetCandidate() string {
	if m != nil {
		return m.Candidate
	}
	return ""
}

func (m *ICECandidate) GetSdpMid() string {
	if m != nil {
		return m.SdpMid
	}
	return ""
}

func (m *ICECandidate) GetSdpMlineIndex() int32 {
	if m != nil {
		return m.SdpMlineIndex
	}
	return 0
}

func (m *ICECandidate) GetConnectionId() string {
	if m != nil {
		return m.ConnectionId
	}
	return ""
}

func init() {
	proto.RegisterType((*VideoRequest)(nil), "teleop.VideoRequest")
	proto.RegisterType((*SDPRequest)(nil), "teleop.SDPRequest")
	proto.RegisterType((*SDPConfirmation)(nil), "teleop.SDPConfirmation")
	proto.RegisterType((*ICECandidate)(nil), "teleop.ICECandidate")
	proto.RegisterEnum("teleop.SDPStatus", SDPStatus_name, SDPStatus_value)
	proto.RegisterEnum("teleop.RTCStatus", RTCStatus_name, RTCStatus_value)
}

func init() { proto.RegisterFile("packages/teleop/proto/webrtc.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 353 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0xcd, 0x4e, 0xf2, 0x40,
	0x14, 0xa5, 0x1f, 0x50, 0xe8, 0xfd, 0x8a, 0xd4, 0x89, 0xd1, 0x2e, 0x5c, 0x90, 0x9a, 0x10, 0x24,
	0x06, 0x12, 0x7d, 0x02, 0xd3, 0xba, 0x60, 0x61, 0x24, 0x2d, 0x71, 0x4b, 0x86, 0xce, 0x05, 0x26,
	0xc2, 0xb4, 0x76, 0x86, 0xa0, 0xaf, 0xe1, 0x13, 0x9b, 0x0e, 0x03, 0x2c, 0xba, 0x71, 0xd7, 0xf3,
	0xd3, 0xd3, 0x73, 0x4f, 0x0a, 0x41, 0x4e, 0xd3, 0x0f, 0xba, 0x42, 0x39, 0x56, 0xb8, 0xc1, 0x2c,
	0x1f, 0xe7, 0x45, 0xa6, 0xb2, 0xf1, 0x1e, 0x17, 0x85, 0x4a, 0x47, 0x1a, 0x10, 0xfb, 0x20, 0x05,
	0xdf, 0xe0, 0xbe, 0x73, 0x86, 0x59, 0x8c, 0x9f, 0x3b, 0x94, 0x8a, 0x5c, 0x83, 0x9d, 0xd2, 0x2d,
	0x16, 0xd4, 0xb7, 0x7a, 0xd6, 0xc0, 0x89, 0x0d, 0x22, 0x77, 0xd0, 0x49, 0x33, 0x21, 0x30, 0x55,
	0x3c, 0x13, 0x73, 0xce, 0xfc, 0x7f, 0x5a, 0x76, 0xcf, 0xe4, 0x84, 0x91, 0x2b, 0x68, 0xee, 0x39,
	0x53, 0x6b, 0xbf, 0xde, 0xb3, 0x06, 0xcd, 0xf8, 0x00, 0xca, 0xc8, 0x35, 0xf2, 0xd5, 0x5a, 0xf9,
	0x0d, 0x4d, 0x1b, 0x14, 0x08, 0x80, 0x24, 0x9a, 0x1e, 0x3f, 0x7c, 0x0f, 0xb6, 0x54, 0x54, 0xed,
	0xa4, 0x7e, 0xf9, 0xe2, 0xf1, 0x72, 0x74, 0x68, 0x38, 0x4a, 0xa2, 0x69, 0xa2, 0x85, 0xd8, 0x18,
	0x88, 0x07, 0x75, 0xc9, 0x72, 0x9d, 0xe6, 0xc4, 0xe5, 0x63, 0xb5, 0x5d, 0xb3, 0xda, 0x2e, 0x98,
	0x41, 0x37, 0x89, 0xa6, 0x61, 0x26, 0x96, 0xbc, 0xd8, 0xd2, 0x92, 0x24, 0xb7, 0xe0, 0x18, 0x0b,
	0x32, 0x7d, 0x70, 0x3b, 0x3e, 0x13, 0x7f, 0xba, 0x39, 0xf8, 0xb1, 0xc0, 0x9d, 0x84, 0x2f, 0x21,
	0x15, 0x8c, 0x33, 0xaa, 0x50, 0x67, 0x1e, 0x81, 0x19, 0xf1, 0x4c, 0x90, 0x1b, 0x68, 0x49, 0x96,
	0xcf, 0xb7, 0xa7, 0x34, 0x5b, 0xb2, 0xfc, 0x95, 0x33, 0xd2, 0x87, 0xae, 0x16, 0x36, 0x5c, 0xe0,
	0x9c, 0x0b, 0x86, 0x5f, 0x66, 0xc5, 0x4e, 0x69, 0x28, 0xd9, 0x49, 0x49, 0x56, 0x4b, 0x35, 0xaa,
	0xa5, 0x86, 0x7d, 0x70, 0x4e, 0xb3, 0x91, 0xff, 0xd0, 0x7a, 0x5b, 0x2e, 0xb1, 0x40, 0xe6, 0xd5,
	0x88, 0x0b, 0xed, 0x67, 0x21, 0xf7, 0x1a, 0x59, 0xc3, 0x07, 0x70, 0xe2, 0x59, 0x68, 0x7c, 0x1d,
	0x70, 0xc2, 0xe3, 0xed, 0x5e, 0x8d, 0x78, 0xe0, 0x46, 0x5c, 0x9e, 0xd6, 0xf0, 0xac, 0x85, 0xad,
	0x7f, 0x9d, 0xa7, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xfd, 0x88, 0x13, 0x90, 0x60, 0x02, 0x00,
	0x00,
}
