// Code generated by protoc-gen-go. DO NOT EDIT.
// source: packages/teleop/proto/connection_options.proto

package teleop

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import streamer "github.com/zippyai/zippy/packages/streamer/proto"
import streamer1 "github.com/zippyai/zippy/packages/streamer/proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// / VideoSource represents a camera (device, image size, etc) together with a
// / source from which to pull that information (ZMQ address, topic, etc)
type VideoSource struct {
	// / Information about the camera from which this video source draws frames
	Camera *Camera `protobuf:"bytes,1,opt,name=camera" json:"camera,omitempty"`
	// / Information about how to connect to this video source over ZMQ
	Source *streamer1.Stream `protobuf:"bytes,2,opt,name=source" json:"source,omitempty"`
	// / The ZMQ server address for modifying camera settings
	SettingsServerAddress string `protobuf:"bytes,3,opt,name=settings_server_address,json=settingsServerAddress" json:"settings_server_address,omitempty"`
}

func (m *VideoSource) Reset()                    { *m = VideoSource{} }
func (m *VideoSource) String() string            { return proto.CompactTextString(m) }
func (*VideoSource) ProtoMessage()               {}
func (*VideoSource) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *VideoSource) GetCamera() *Camera {
	if m != nil {
		return m.Camera
	}
	return nil
}

func (m *VideoSource) GetSource() *streamer1.Stream {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *VideoSource) GetSettingsServerAddress() string {
	if m != nil {
		return m.SettingsServerAddress
	}
	return ""
}

// / ConnectionOptions contains configuration for teleoperation.
type ConnectionOptions struct {
	// / address of backend, e.g. "ws:///mission-control.zippy.ai"
	BackendAddress string `protobuf:"bytes,1,opt,name=backend_address,json=backendAddress" json:"backend_address,omitempty"`
	// / ID of this vehicle for connection to backend
	VehicleId string `protobuf:"bytes,2,opt,name=vehicle_id,json=vehicleId" json:"vehicle_id,omitempty"`
	// / The token with which to authenticate
	AuthToken string `protobuf:"bytes,3,opt,name=auth_token,json=authToken" json:"auth_token,omitempty"`
	// / JPEG compression level for thumbnails uploaded to backend
	JpegQuality int32 `protobuf:"varint,4,opt,name=jpeg_quality,json=jpegQuality" json:"jpeg_quality,omitempty"`
	// / List of sources from which video streams can be pulled
	VideoSources []*VideoSource `protobuf:"bytes,5,rep,name=video_sources,json=videoSources" json:"video_sources,omitempty"`
	// / Options for the webrtc signaler
	Webrtc *streamer.SignalerOptions `protobuf:"bytes,100,opt,name=webrtc" json:"webrtc,omitempty"`
}

func (m *ConnectionOptions) Reset()                    { *m = ConnectionOptions{} }
func (m *ConnectionOptions) String() string            { return proto.CompactTextString(m) }
func (*ConnectionOptions) ProtoMessage()               {}
func (*ConnectionOptions) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *ConnectionOptions) GetBackendAddress() string {
	if m != nil {
		return m.BackendAddress
	}
	return ""
}

func (m *ConnectionOptions) GetVehicleId() string {
	if m != nil {
		return m.VehicleId
	}
	return ""
}

func (m *ConnectionOptions) GetAuthToken() string {
	if m != nil {
		return m.AuthToken
	}
	return ""
}

func (m *ConnectionOptions) GetJpegQuality() int32 {
	if m != nil {
		return m.JpegQuality
	}
	return 0
}

func (m *ConnectionOptions) GetVideoSources() []*VideoSource {
	if m != nil {
		return m.VideoSources
	}
	return nil
}

func (m *ConnectionOptions) GetWebrtc() *streamer.SignalerOptions {
	if m != nil {
		return m.Webrtc
	}
	return nil
}

func init() {
	proto.RegisterType((*VideoSource)(nil), "teleop.VideoSource")
	proto.RegisterType((*ConnectionOptions)(nil), "teleop.ConnectionOptions")
}

func init() { proto.RegisterFile("packages/teleop/proto/connection_options.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 355 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0x5d, 0x4b, 0xfb, 0x30,
	0x18, 0xc5, 0xe9, 0xf6, 0x5f, 0xa1, 0xe9, 0xfe, 0x53, 0x23, 0x62, 0x1d, 0x08, 0x75, 0x88, 0xf6,
	0xaa, 0xc3, 0x09, 0xe2, 0xad, 0xec, 0xca, 0x2b, 0xb1, 0x13, 0x6f, 0x4b, 0xd6, 0x3e, 0x74, 0x71,
	0x35, 0xa9, 0x49, 0x56, 0xf1, 0x2b, 0xf8, 0x05, 0xfc, 0xba, 0x92, 0x97, 0xbd, 0x78, 0xb1, 0xab,
	0x36, 0xe7, 0x77, 0x4e, 0x78, 0x9e, 0x13, 0x94, 0x36, 0xa4, 0x58, 0x92, 0x0a, 0xe4, 0x58, 0x41,
	0x0d, 0xbc, 0x19, 0x37, 0x82, 0x2b, 0x3e, 0x2e, 0x38, 0x63, 0x50, 0x28, 0xca, 0x59, 0xce, 0x1b,
	0xfd, 0x91, 0xa9, 0x01, 0xd8, 0xb7, 0xb6, 0xe1, 0x36, 0x27, 0x95, 0x00, 0xf2, 0x0e, 0xc2, 0x25,
	0x25, 0xad, 0x18, 0xa9, 0x41, 0xfc, 0xcd, 0x0d, 0x2f, 0xf7, 0xfa, 0xcd, 0xd1, 0xb9, 0x46, 0x7b,
	0xa6, 0xd1, 0x7e, 0x62, 0x3d, 0xa3, 0x1f, 0x0f, 0x85, 0xaf, 0xb4, 0x04, 0x3e, 0xe3, 0x2b, 0x51,
	0x00, 0xbe, 0x42, 0xbe, 0xe5, 0x91, 0x17, 0x7b, 0x49, 0x38, 0x19, 0xa4, 0x36, 0x9b, 0x4e, 0x8d,
	0x9a, 0x39, 0x8a, 0x13, 0xe4, 0x4b, 0x93, 0x88, 0x3a, 0xc6, 0x77, 0x98, 0xae, 0x27, 0x49, 0x67,
	0xe6, 0x27, 0x73, 0x1c, 0xdf, 0xa1, 0x53, 0x09, 0x4a, 0x51, 0x56, 0xc9, 0x5c, 0x82, 0x68, 0x41,
	0xe4, 0xa4, 0x2c, 0x05, 0x48, 0x19, 0x75, 0x63, 0x2f, 0x09, 0xb2, 0x93, 0x35, 0x9e, 0x19, 0xfa,
	0x60, 0xe1, 0xe8, 0xbb, 0x83, 0x8e, 0xa6, 0x9b, 0xe2, 0x9e, 0xec, 0xfe, 0xf8, 0x1a, 0x1d, 0xcc,
	0x49, 0xb1, 0x04, 0x56, 0x6e, 0x6e, 0xf1, 0xcc, 0x2d, 0x03, 0x27, 0xbb, 0x38, 0x3e, 0x47, 0xa8,
	0x85, 0x05, 0x2d, 0x6a, 0xc8, 0x69, 0x69, 0x86, 0x0c, 0xb2, 0xc0, 0x29, 0x8f, 0xa5, 0xc6, 0x64,
	0xa5, 0x16, 0xb9, 0xe2, 0x4b, 0x60, 0x6e, 0x90, 0x40, 0x2b, 0x2f, 0x5a, 0xc0, 0x17, 0xa8, 0xff,
	0xd6, 0x40, 0x95, 0x7f, 0xac, 0x48, 0x4d, 0xd5, 0x57, 0xf4, 0x2f, 0xf6, 0x92, 0x5e, 0x16, 0x6a,
	0xed, 0xd9, 0x4a, 0xf8, 0x1e, 0xfd, 0x6f, 0x75, 0x71, 0xb9, 0xdd, 0x53, 0x46, 0xbd, 0xb8, 0x9b,
	0x84, 0x93, 0xe3, 0x75, 0x61, 0x3b, 0xad, 0x66, 0xfd, 0x76, 0x7b, 0x90, 0xf8, 0x06, 0xf9, 0x9f,
	0x30, 0x17, 0xaa, 0x88, 0x4a, 0xd3, 0xdd, 0xd9, 0x4e, 0x77, 0xee, 0xbd, 0xdd, 0xba, 0x99, 0x33,
	0xce, 0x7d, 0xf3, 0x5a, 0xb7, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x09, 0x4e, 0x77, 0x93, 0x61,
	0x02, 0x00, 0x00,
}
