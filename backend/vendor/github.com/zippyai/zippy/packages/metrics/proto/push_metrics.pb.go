// Code generated by protoc-gen-go. DO NOT EDIT.
// source: packages/metrics/proto/push_metrics.proto

/*
Package metrics is a generated protocol buffer package.

It is generated from these files:
	packages/metrics/proto/push_metrics.proto

It has these top-level messages:
	LabelPair
	Gauge
	Counter
	Quantile
	Summary
	Untyped
	Histogram
	Bucket
	Metric
	MetricFamily
*/
package metrics

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MetricType int32

const (
	MetricType_COUNTER   MetricType = 0
	MetricType_GAUGE     MetricType = 1
	MetricType_SUMMARY   MetricType = 2
	MetricType_UNTYPED   MetricType = 3
	MetricType_HISTOGRAM MetricType = 4
)

var MetricType_name = map[int32]string{
	0: "COUNTER",
	1: "GAUGE",
	2: "SUMMARY",
	3: "UNTYPED",
	4: "HISTOGRAM",
}
var MetricType_value = map[string]int32{
	"COUNTER":   0,
	"GAUGE":     1,
	"SUMMARY":   2,
	"UNTYPED":   3,
	"HISTOGRAM": 4,
}

func (x MetricType) String() string {
	return proto.EnumName(MetricType_name, int32(x))
}
func (MetricType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type LabelPair struct {
	Name  string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *LabelPair) Reset()                    { *m = LabelPair{} }
func (m *LabelPair) String() string            { return proto.CompactTextString(m) }
func (*LabelPair) ProtoMessage()               {}
func (*LabelPair) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *LabelPair) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *LabelPair) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type Gauge struct {
	Value float64 `protobuf:"fixed64,1,opt,name=value" json:"value,omitempty"`
}

func (m *Gauge) Reset()                    { *m = Gauge{} }
func (m *Gauge) String() string            { return proto.CompactTextString(m) }
func (*Gauge) ProtoMessage()               {}
func (*Gauge) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Gauge) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type Counter struct {
	Value float64 `protobuf:"fixed64,1,opt,name=value" json:"value,omitempty"`
}

func (m *Counter) Reset()                    { *m = Counter{} }
func (m *Counter) String() string            { return proto.CompactTextString(m) }
func (*Counter) ProtoMessage()               {}
func (*Counter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Counter) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type Quantile struct {
	Quantile float64 `protobuf:"fixed64,1,opt,name=quantile" json:"quantile,omitempty"`
	Value    float64 `protobuf:"fixed64,2,opt,name=value" json:"value,omitempty"`
}

func (m *Quantile) Reset()                    { *m = Quantile{} }
func (m *Quantile) String() string            { return proto.CompactTextString(m) }
func (*Quantile) ProtoMessage()               {}
func (*Quantile) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Quantile) GetQuantile() float64 {
	if m != nil {
		return m.Quantile
	}
	return 0
}

func (m *Quantile) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type Summary struct {
	SampleCount uint64      `protobuf:"varint,1,opt,name=sample_count,json=sampleCount" json:"sample_count,omitempty"`
	SampleSum   float64     `protobuf:"fixed64,2,opt,name=sample_sum,json=sampleSum" json:"sample_sum,omitempty"`
	Quantile    []*Quantile `protobuf:"bytes,3,rep,name=quantile" json:"quantile,omitempty"`
}

func (m *Summary) Reset()                    { *m = Summary{} }
func (m *Summary) String() string            { return proto.CompactTextString(m) }
func (*Summary) ProtoMessage()               {}
func (*Summary) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Summary) GetSampleCount() uint64 {
	if m != nil {
		return m.SampleCount
	}
	return 0
}

func (m *Summary) GetSampleSum() float64 {
	if m != nil {
		return m.SampleSum
	}
	return 0
}

func (m *Summary) GetQuantile() []*Quantile {
	if m != nil {
		return m.Quantile
	}
	return nil
}

type Untyped struct {
	Value float64 `protobuf:"fixed64,1,opt,name=value" json:"value,omitempty"`
}

func (m *Untyped) Reset()                    { *m = Untyped{} }
func (m *Untyped) String() string            { return proto.CompactTextString(m) }
func (*Untyped) ProtoMessage()               {}
func (*Untyped) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Untyped) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type Histogram struct {
	SampleCount uint64    `protobuf:"varint,1,opt,name=sample_count,json=sampleCount" json:"sample_count,omitempty"`
	SampleSum   float64   `protobuf:"fixed64,2,opt,name=sample_sum,json=sampleSum" json:"sample_sum,omitempty"`
	Bucket      []*Bucket `protobuf:"bytes,3,rep,name=bucket" json:"bucket,omitempty"`
}

func (m *Histogram) Reset()                    { *m = Histogram{} }
func (m *Histogram) String() string            { return proto.CompactTextString(m) }
func (*Histogram) ProtoMessage()               {}
func (*Histogram) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Histogram) GetSampleCount() uint64 {
	if m != nil {
		return m.SampleCount
	}
	return 0
}

func (m *Histogram) GetSampleSum() float64 {
	if m != nil {
		return m.SampleSum
	}
	return 0
}

func (m *Histogram) GetBucket() []*Bucket {
	if m != nil {
		return m.Bucket
	}
	return nil
}

type Bucket struct {
	CumulativeCount uint64  `protobuf:"varint,1,opt,name=cumulative_count,json=cumulativeCount" json:"cumulative_count,omitempty"`
	UpperBound      float64 `protobuf:"fixed64,2,opt,name=upper_bound,json=upperBound" json:"upper_bound,omitempty"`
}

func (m *Bucket) Reset()                    { *m = Bucket{} }
func (m *Bucket) String() string            { return proto.CompactTextString(m) }
func (*Bucket) ProtoMessage()               {}
func (*Bucket) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Bucket) GetCumulativeCount() uint64 {
	if m != nil {
		return m.CumulativeCount
	}
	return 0
}

func (m *Bucket) GetUpperBound() float64 {
	if m != nil {
		return m.UpperBound
	}
	return 0
}

type Metric struct {
	Label       []*LabelPair `protobuf:"bytes,1,rep,name=label" json:"label,omitempty"`
	Gauge       *Gauge       `protobuf:"bytes,2,opt,name=gauge" json:"gauge,omitempty"`
	Counter     *Counter     `protobuf:"bytes,3,opt,name=counter" json:"counter,omitempty"`
	Summary     *Summary     `protobuf:"bytes,4,opt,name=summary" json:"summary,omitempty"`
	Untyped     *Untyped     `protobuf:"bytes,5,opt,name=untyped" json:"untyped,omitempty"`
	Histogram   *Histogram   `protobuf:"bytes,7,opt,name=histogram" json:"histogram,omitempty"`
	TimestampMs int64        `protobuf:"varint,6,opt,name=timestamp_ms,json=timestampMs" json:"timestamp_ms,omitempty"`
}

func (m *Metric) Reset()                    { *m = Metric{} }
func (m *Metric) String() string            { return proto.CompactTextString(m) }
func (*Metric) ProtoMessage()               {}
func (*Metric) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Metric) GetLabel() []*LabelPair {
	if m != nil {
		return m.Label
	}
	return nil
}

func (m *Metric) GetGauge() *Gauge {
	if m != nil {
		return m.Gauge
	}
	return nil
}

func (m *Metric) GetCounter() *Counter {
	if m != nil {
		return m.Counter
	}
	return nil
}

func (m *Metric) GetSummary() *Summary {
	if m != nil {
		return m.Summary
	}
	return nil
}

func (m *Metric) GetUntyped() *Untyped {
	if m != nil {
		return m.Untyped
	}
	return nil
}

func (m *Metric) GetHistogram() *Histogram {
	if m != nil {
		return m.Histogram
	}
	return nil
}

func (m *Metric) GetTimestampMs() int64 {
	if m != nil {
		return m.TimestampMs
	}
	return 0
}

type MetricFamily struct {
	Name   string     `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Help   string     `protobuf:"bytes,2,opt,name=help" json:"help,omitempty"`
	Type   MetricType `protobuf:"varint,3,opt,name=type,enum=metrics.MetricType" json:"type,omitempty"`
	Metric []*Metric  `protobuf:"bytes,4,rep,name=metric" json:"metric,omitempty"`
}

func (m *MetricFamily) Reset()                    { *m = MetricFamily{} }
func (m *MetricFamily) String() string            { return proto.CompactTextString(m) }
func (*MetricFamily) ProtoMessage()               {}
func (*MetricFamily) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *MetricFamily) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MetricFamily) GetHelp() string {
	if m != nil {
		return m.Help
	}
	return ""
}

func (m *MetricFamily) GetType() MetricType {
	if m != nil {
		return m.Type
	}
	return MetricType_COUNTER
}

func (m *MetricFamily) GetMetric() []*Metric {
	if m != nil {
		return m.Metric
	}
	return nil
}

func init() {
	proto.RegisterType((*LabelPair)(nil), "metrics.LabelPair")
	proto.RegisterType((*Gauge)(nil), "metrics.Gauge")
	proto.RegisterType((*Counter)(nil), "metrics.Counter")
	proto.RegisterType((*Quantile)(nil), "metrics.Quantile")
	proto.RegisterType((*Summary)(nil), "metrics.Summary")
	proto.RegisterType((*Untyped)(nil), "metrics.Untyped")
	proto.RegisterType((*Histogram)(nil), "metrics.Histogram")
	proto.RegisterType((*Bucket)(nil), "metrics.Bucket")
	proto.RegisterType((*Metric)(nil), "metrics.Metric")
	proto.RegisterType((*MetricFamily)(nil), "metrics.MetricFamily")
	proto.RegisterEnum("metrics.MetricType", MetricType_name, MetricType_value)
}

func init() { proto.RegisterFile("packages/metrics/proto/push_metrics.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 574 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0x5f, 0x4f, 0xdb, 0x3c,
	0x14, 0xc6, 0xdf, 0xd0, 0xa4, 0x21, 0x27, 0xbc, 0x90, 0x79, 0x68, 0x8a, 0x26, 0x21, 0x58, 0x35,
	0x89, 0x82, 0x34, 0x98, 0x98, 0x76, 0xb7, 0x9b, 0x96, 0x75, 0x65, 0xd2, 0x02, 0xcc, 0x6d, 0x2f,
	0xb8, 0xaa, 0xdc, 0x60, 0xb5, 0x11, 0x71, 0x92, 0x25, 0x76, 0xa5, 0xee, 0x13, 0xec, 0xeb, 0xec,
	0x1b, 0x4e, 0xfe, 0x93, 0x14, 0xaa, 0x71, 0xb7, 0x3b, 0xfb, 0x39, 0x3f, 0x9f, 0xf3, 0xd8, 0xe7,
	0x24, 0x70, 0x52, 0x90, 0xf8, 0x81, 0xcc, 0x69, 0x75, 0xce, 0x28, 0x2f, 0x93, 0xb8, 0x3a, 0x2f,
	0xca, 0x9c, 0xe7, 0xe7, 0x85, 0xa8, 0x16, 0x53, 0x23, 0x9d, 0x29, 0x09, 0xb9, 0x66, 0xdb, 0xf9,
	0x08, 0xde, 0x37, 0x32, 0xa3, 0xe9, 0x2d, 0x49, 0x4a, 0x84, 0xc0, 0xce, 0x08, 0xa3, 0xa1, 0x75,
	0x64, 0x75, 0x3d, 0xac, 0xd6, 0x68, 0x1f, 0x9c, 0x25, 0x49, 0x05, 0x0d, 0xb7, 0x94, 0xa8, 0x37,
	0x9d, 0x03, 0x70, 0x86, 0x44, 0xcc, 0x1f, 0x85, 0xe5, 0x19, 0xab, 0x0e, 0x1f, 0x82, 0x7b, 0x99,
	0x8b, 0x8c, 0xd3, 0xf2, 0x19, 0xe0, 0x13, 0x6c, 0x7f, 0x17, 0x24, 0xe3, 0x49, 0x4a, 0xd1, 0x6b,
	0xd8, 0xfe, 0x61, 0xd6, 0x06, 0x6a, 0xf6, 0x4f, 0xab, 0x37, 0xa7, 0x7f, 0x82, 0x3b, 0x12, 0x8c,
	0x91, 0x72, 0x85, 0xde, 0xc0, 0x4e, 0x45, 0x58, 0x91, 0xd2, 0x69, 0x2c, 0x0b, 0xaa, 0x04, 0x36,
	0xf6, 0xb5, 0xa6, 0x3c, 0xa0, 0x03, 0x00, 0x83, 0x54, 0x82, 0x99, 0x44, 0x9e, 0x56, 0x46, 0x82,
	0xa1, 0x77, 0x8f, 0xca, 0xb7, 0x8e, 0x5a, 0x5d, 0xff, 0xe2, 0xc5, 0x59, 0xfd, 0x58, 0xb5, 0xc7,
	0xb5, 0x23, 0x79, 0xb5, 0x49, 0xc6, 0x57, 0x05, 0xbd, 0x7f, 0xe6, 0x6a, 0x4b, 0xf0, 0xae, 0x92,
	0x8a, 0xe7, 0xf3, 0x92, 0xb0, 0x7f, 0x60, 0xef, 0x18, 0xda, 0x33, 0x11, 0x3f, 0x50, 0x6e, 0xcc,
	0xed, 0x35, 0xe6, 0xfa, 0x4a, 0xc6, 0x26, 0xdc, 0x19, 0x43, 0x5b, 0x2b, 0xe8, 0x04, 0x82, 0x58,
	0x30, 0x91, 0x12, 0x9e, 0x2c, 0x9f, 0x16, 0xde, 0x5b, 0xeb, 0xba, 0xf8, 0x21, 0xf8, 0xa2, 0x28,
	0x68, 0x39, 0x9d, 0xe5, 0x22, 0xbb, 0x37, 0xd5, 0x41, 0x49, 0x7d, 0xa9, 0x74, 0x7e, 0x6f, 0x41,
	0x3b, 0x52, 0x05, 0x51, 0x17, 0x9c, 0x54, 0x8e, 0x4a, 0x68, 0x29, 0x23, 0xa8, 0x31, 0xd2, 0x0c,
	0x10, 0xd6, 0x00, 0x7a, 0x0b, 0xce, 0x5c, 0x4e, 0x87, 0xca, 0xe7, 0x5f, 0xec, 0x36, 0xa4, 0x9a,
	0x19, 0xac, 0x83, 0xe8, 0x14, 0xdc, 0x58, 0x0f, 0x49, 0xd8, 0x52, 0x5c, 0xd0, 0x70, 0x66, 0x78,
	0x70, 0x0d, 0x48, 0xb6, 0xd2, 0x1d, 0x0f, 0xed, 0x0d, 0xd6, 0x4c, 0x02, 0xae, 0x01, 0xc9, 0x0a,
	0xdd, 0xa1, 0xd0, 0xd9, 0x60, 0x4d, 0xe7, 0x70, 0x0d, 0xa0, 0xf7, 0xe0, 0x2d, 0xea, 0x66, 0x85,
	0xae, 0xa2, 0xd7, 0xf7, 0x6a, 0xda, 0x88, 0xd7, 0x90, 0xec, 0x28, 0x4f, 0x18, 0xad, 0x38, 0x61,
	0xc5, 0x94, 0x55, 0x61, 0xfb, 0xc8, 0xea, 0xb6, 0xb0, 0xdf, 0x68, 0x51, 0xd5, 0xf9, 0x65, 0xc1,
	0x8e, 0x7e, 0xb3, 0x2f, 0x84, 0x25, 0xe9, 0xea, 0xaf, 0xdf, 0x15, 0x02, 0x7b, 0x41, 0xd3, 0xc2,
	0x7c, 0x56, 0x6a, 0x8d, 0x8e, 0xc1, 0x96, 0xb6, 0xd4, 0x73, 0xec, 0x5e, 0xbc, 0x6c, 0x8c, 0xe8,
	0x64, 0xe3, 0x55, 0x41, 0xb1, 0x02, 0xe4, 0x50, 0xe8, 0x58, 0x68, 0x6f, 0x0c, 0x85, 0x46, 0xb1,
	0x09, 0x9f, 0x46, 0x00, 0xeb, 0xc3, 0xc8, 0x07, 0xf7, 0xf2, 0x66, 0x72, 0x3d, 0x1e, 0xe0, 0xe0,
	0x3f, 0xe4, 0x81, 0x33, 0xec, 0x4d, 0x86, 0x83, 0xc0, 0x92, 0xfa, 0x68, 0x12, 0x45, 0x3d, 0x7c,
	0x17, 0x6c, 0xc9, 0xcd, 0xe4, 0x7a, 0x7c, 0x77, 0x3b, 0xf8, 0x1c, 0xb4, 0xd0, 0xff, 0xe0, 0x5d,
	0x7d, 0x1d, 0x8d, 0x6f, 0x86, 0xb8, 0x17, 0x05, 0x76, 0xff, 0x15, 0xec, 0x27, 0xb9, 0xfc, 0x85,
	0x30, 0xca, 0x17, 0x54, 0x54, 0x67, 0x71, 0x9a, 0xd0, 0x8c, 0xcf, 0xda, 0xea, 0xaf, 0xf2, 0xe1,
	0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x34, 0xb8, 0xb4, 0x25, 0x82, 0x04, 0x00, 0x00,
}
