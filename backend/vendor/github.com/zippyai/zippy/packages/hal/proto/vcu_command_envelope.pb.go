// Code generated by protoc-gen-go. DO NOT EDIT.
// source: packages/hal/proto/vcu_command_envelope.proto

package hal

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/zippyai/zippy/packages/core/proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// / Envelope for commands.
type VCUCommandEnvelope struct {
	// / Common header for all commands. Used to uniquely identify a particular command.
	// / Sequence 0 is always reserved for the VCU.
	// /
	// / Assumptions:
	// / - There is a single source of commands
	// / - The source of commands ensures monotonically increasing sequence numbers.
	// / .
	SequenceNumber uint64 `protobuf:"fixed64,1,opt,name=sequenceNumber" json:"sequenceNumber,omitempty"`
	// Types that are valid to be assigned to Command:
	//	*VCUCommandEnvelope_IdleCommand
	//	*VCUCommandEnvelope_EmergencyStopCommand
	//	*VCUCommandEnvelope_TrajectoryCommand
	//	*VCUCommandEnvelope_IkControlCommand
	Command isVCUCommandEnvelope_Command `protobuf_oneof:"command"`
}

func (m *VCUCommandEnvelope) Reset()                    { *m = VCUCommandEnvelope{} }
func (m *VCUCommandEnvelope) String() string            { return proto.CompactTextString(m) }
func (*VCUCommandEnvelope) ProtoMessage()               {}
func (*VCUCommandEnvelope) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{0} }

type isVCUCommandEnvelope_Command interface {
	isVCUCommandEnvelope_Command()
}

type VCUCommandEnvelope_IdleCommand struct {
	IdleCommand *VCUIdleCommand `protobuf:"bytes,2,opt,name=idleCommand,oneof"`
}
type VCUCommandEnvelope_EmergencyStopCommand struct {
	EmergencyStopCommand *VCUEmergencyStopCommand `protobuf:"bytes,3,opt,name=emergencyStopCommand,oneof"`
}
type VCUCommandEnvelope_TrajectoryCommand struct {
	TrajectoryCommand *VCUTrajectoryCommand `protobuf:"bytes,4,opt,name=trajectoryCommand,oneof"`
}
type VCUCommandEnvelope_IkControlCommand struct {
	IkControlCommand *VCUIKControlCommand `protobuf:"bytes,5,opt,name=ikControlCommand,oneof"`
}

func (*VCUCommandEnvelope_IdleCommand) isVCUCommandEnvelope_Command()          {}
func (*VCUCommandEnvelope_EmergencyStopCommand) isVCUCommandEnvelope_Command() {}
func (*VCUCommandEnvelope_TrajectoryCommand) isVCUCommandEnvelope_Command()    {}
func (*VCUCommandEnvelope_IkControlCommand) isVCUCommandEnvelope_Command()     {}

func (m *VCUCommandEnvelope) GetCommand() isVCUCommandEnvelope_Command {
	if m != nil {
		return m.Command
	}
	return nil
}

func (m *VCUCommandEnvelope) GetSequenceNumber() uint64 {
	if m != nil {
		return m.SequenceNumber
	}
	return 0
}

func (m *VCUCommandEnvelope) GetIdleCommand() *VCUIdleCommand {
	if x, ok := m.GetCommand().(*VCUCommandEnvelope_IdleCommand); ok {
		return x.IdleCommand
	}
	return nil
}

func (m *VCUCommandEnvelope) GetEmergencyStopCommand() *VCUEmergencyStopCommand {
	if x, ok := m.GetCommand().(*VCUCommandEnvelope_EmergencyStopCommand); ok {
		return x.EmergencyStopCommand
	}
	return nil
}

func (m *VCUCommandEnvelope) GetTrajectoryCommand() *VCUTrajectoryCommand {
	if x, ok := m.GetCommand().(*VCUCommandEnvelope_TrajectoryCommand); ok {
		return x.TrajectoryCommand
	}
	return nil
}

func (m *VCUCommandEnvelope) GetIkControlCommand() *VCUIKControlCommand {
	if x, ok := m.GetCommand().(*VCUCommandEnvelope_IkControlCommand); ok {
		return x.IkControlCommand
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*VCUCommandEnvelope) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _VCUCommandEnvelope_OneofMarshaler, _VCUCommandEnvelope_OneofUnmarshaler, _VCUCommandEnvelope_OneofSizer, []interface{}{
		(*VCUCommandEnvelope_IdleCommand)(nil),
		(*VCUCommandEnvelope_EmergencyStopCommand)(nil),
		(*VCUCommandEnvelope_TrajectoryCommand)(nil),
		(*VCUCommandEnvelope_IkControlCommand)(nil),
	}
}

func _VCUCommandEnvelope_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*VCUCommandEnvelope)
	// command
	switch x := m.Command.(type) {
	case *VCUCommandEnvelope_IdleCommand:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IdleCommand); err != nil {
			return err
		}
	case *VCUCommandEnvelope_EmergencyStopCommand:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EmergencyStopCommand); err != nil {
			return err
		}
	case *VCUCommandEnvelope_TrajectoryCommand:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TrajectoryCommand); err != nil {
			return err
		}
	case *VCUCommandEnvelope_IkControlCommand:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IkControlCommand); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("VCUCommandEnvelope.Command has unexpected type %T", x)
	}
	return nil
}

func _VCUCommandEnvelope_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*VCUCommandEnvelope)
	switch tag {
	case 2: // command.idleCommand
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(VCUIdleCommand)
		err := b.DecodeMessage(msg)
		m.Command = &VCUCommandEnvelope_IdleCommand{msg}
		return true, err
	case 3: // command.emergencyStopCommand
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(VCUEmergencyStopCommand)
		err := b.DecodeMessage(msg)
		m.Command = &VCUCommandEnvelope_EmergencyStopCommand{msg}
		return true, err
	case 4: // command.trajectoryCommand
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(VCUTrajectoryCommand)
		err := b.DecodeMessage(msg)
		m.Command = &VCUCommandEnvelope_TrajectoryCommand{msg}
		return true, err
	case 5: // command.ikControlCommand
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(VCUIKControlCommand)
		err := b.DecodeMessage(msg)
		m.Command = &VCUCommandEnvelope_IkControlCommand{msg}
		return true, err
	default:
		return false, nil
	}
}

func _VCUCommandEnvelope_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*VCUCommandEnvelope)
	// command
	switch x := m.Command.(type) {
	case *VCUCommandEnvelope_IdleCommand:
		s := proto.Size(x.IdleCommand)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *VCUCommandEnvelope_EmergencyStopCommand:
		s := proto.Size(x.EmergencyStopCommand)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *VCUCommandEnvelope_TrajectoryCommand:
		s := proto.Size(x.TrajectoryCommand)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *VCUCommandEnvelope_IkControlCommand:
		s := proto.Size(x.IkControlCommand)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*VCUCommandEnvelope)(nil), "hal.VCUCommandEnvelope")
}

func init() { proto.RegisterFile("packages/hal/proto/vcu_command_envelope.proto", fileDescriptor20) }

var fileDescriptor20 = []byte{
	// 304 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0x41, 0x4b, 0xc3, 0x30,
	0x18, 0x86, 0xbb, 0x4d, 0x27, 0x66, 0x20, 0x1a, 0x3d, 0xcc, 0xe1, 0x61, 0x28, 0xc8, 0x3c, 0xb8,
	0x82, 0x3b, 0x78, 0xb7, 0x4c, 0x3a, 0x04, 0x0f, 0xd1, 0xed, 0x5a, 0xb2, 0xec, 0x63, 0xab, 0x4d,
	0x9a, 0x98, 0xa6, 0x83, 0xfd, 0x62, 0xff, 0x86, 0xd8, 0x36, 0x9d, 0x76, 0x2b, 0x78, 0xcd, 0xfb,
	0x3e, 0x0f, 0xe4, 0xfd, 0xd0, 0xbd, 0xa2, 0x2c, 0xa2, 0x4b, 0x48, 0xdc, 0x15, 0xe5, 0xae, 0xd2,
	0xd2, 0x48, 0x77, 0xcd, 0xd2, 0x80, 0x49, 0x21, 0x68, 0xbc, 0x08, 0x20, 0x5e, 0x03, 0x97, 0x0a,
	0x86, 0x59, 0x84, 0x5b, 0x2b, 0xca, 0x7b, 0xa3, 0x1a, 0x06, 0x04, 0xe8, 0x25, 0xc4, 0x6c, 0x13,
	0x24, 0x46, 0x2a, 0xab, 0xc8, 0xc9, 0xde, 0x5d, 0x0d, 0x14, 0x2e, 0x38, 0x54, 0xaa, 0x6e, 0x5d,
	0x35, 0x0a, 0x98, 0x8c, 0x8d, 0x96, 0xfc, 0x9f, 0x80, 0xd1, 0xf4, 0x03, 0x98, 0x91, 0x7a, 0x53,
	0x01, 0x6e, 0x4a, 0x80, 0x49, 0x0d, 0x05, 0x61, 0x42, 0x01, 0x89, 0xa1, 0x42, 0xe5, 0xa5, 0xeb,
	0xaf, 0x26, 0xc2, 0x33, 0x6f, 0xea, 0xe5, 0xe4, 0xb8, 0x18, 0x02, 0xdf, 0xa2, 0x93, 0x04, 0x3e,
	0x53, 0x88, 0x19, 0xbc, 0xa6, 0x62, 0x0e, 0xba, 0xdb, 0xe8, 0x37, 0x06, 0x6d, 0x52, 0x79, 0xc5,
	0x8f, 0xa8, 0xf3, 0xf3, 0xb7, 0x02, 0xef, 0x36, 0xfb, 0x8d, 0x41, 0xe7, 0xe1, 0x7c, 0xb8, 0xa2,
	0x7c, 0x38, 0xf3, 0xa6, 0x93, 0x6d, 0xe4, 0x3b, 0xe4, 0x77, 0x13, 0x13, 0x74, 0x51, 0x2e, 0xf9,
	0x66, 0xa4, 0xb2, 0x86, 0x56, 0x66, 0xb8, 0xb2, 0x86, 0xf1, 0x9e, 0x8e, 0xef, 0x90, 0xbd, 0x2c,
	0x9e, 0xa0, 0xb3, 0xed, 0x18, 0x56, 0x78, 0x90, 0x09, 0x2f, 0xad, 0xf0, 0xbd, 0x5a, 0xf0, 0x1d,
	0xb2, 0x4b, 0xe1, 0x67, 0x74, 0x1a, 0x46, 0x5e, 0x7e, 0x07, 0x6b, 0x3a, 0xcc, 0x4c, 0xdd, 0xf2,
	0x73, 0x2f, 0x7f, 0x73, 0xdf, 0x21, 0x3b, 0xcc, 0xd3, 0x31, 0x3a, 0x2a, 0x8e, 0x32, 0x6f, 0x67,
	0x83, 0x8f, 0xbe, 0x03, 0x00, 0x00, 0xff, 0xff, 0xfc, 0x89, 0x88, 0xa3, 0x8d, 0x02, 0x00, 0x00,
}
