// Code generated by protoc-gen-go. DO NOT EDIT.
// source: packages/hal/proto/vcu_command_response.proto

package hal

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import core "github.com/zippyai/zippy/packages/core/proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// / Disposition of a VCU command request.
// / The semantics here are very important: the VCU needs to maintain the invariant that it is always
// / in a safe state. In order to do so, we define that the VCU is in a safe state at startup.
// / Thereafter, the VCU will only accept a new command if it is convinced that the transition from
// / the present state to a state where the new command is completed can be done in a safe way. Once
// / a command is accepted, it replaces the previous command and a VCUCommandResponse with
// / disposition = CommandAccepted is sent. If the command completes prior to a new command being issued,
// / the VCU will send a second VCUCommandResponse with disposition = CommandCompleted. If the command
// / completes, the VCU will assume it has been implicitly commanded to idle. This has several
// / important implications:
// /
// / - The VCU always starts with an implicit idle command.
// / - Idle commands never complete (they are, however, interruptable)
// / - When a command is rejected, we guarantee that in the absence of any other commands, the vehicle
// /   will eventually return to a known safe state by continuing to perform its current command.
// / - When a command is accepted, we guarantee that in the absence of any other commands, the vehicle
// /   eventually returns to a known safe state.
// / .
type VCUCommandDisposition int32

const (
	// / The command was rejected and the VCU is continuing to execute its previous command.
	VCUCommandDisposition_CommandRejected VCUCommandDisposition = 0
	// / The command was accepted. The VCU has now started executing this command.
	VCUCommandDisposition_CommandAccepted VCUCommandDisposition = 1
	// / The command has completed. This implies that the VCU is now executing an VCUIdleCommand.
	VCUCommandDisposition_CommandCompleted VCUCommandDisposition = 2
	// / The command has been sent but may or may not have been accepted by VCU. No acknowledgement received.
	VCUCommandDisposition_DispositionUnknown VCUCommandDisposition = 3
)

var VCUCommandDisposition_name = map[int32]string{
	0: "CommandRejected",
	1: "CommandAccepted",
	2: "CommandCompleted",
	3: "DispositionUnknown",
}
var VCUCommandDisposition_value = map[string]int32{
	"CommandRejected":    0,
	"CommandAccepted":    1,
	"CommandCompleted":   2,
	"DispositionUnknown": 3,
}

func (x VCUCommandDisposition) String() string {
	return proto.EnumName(VCUCommandDisposition_name, int32(x))
}
func (VCUCommandDisposition) EnumDescriptor() ([]byte, []int) { return fileDescriptor21, []int{0} }

// / VCU response to a command.
type VCUCommandResponse struct {
	// / The VCU's response
	Disposition VCUCommandDisposition `protobuf:"varint,1,opt,name=disposition,enum=hal.VCUCommandDisposition" json:"disposition,omitempty"`
	// / When the VCU's response was generated
	Timestamp *core.SystemTimestamp `protobuf:"bytes,2,opt,name=timestamp" json:"timestamp,omitempty"`
	// / What the VCU is responding to
	//
	// Types that are valid to be assigned to Source:
	//	*VCUCommandResponse_SequenceNumber
	//	*VCUCommandResponse_Command
	Source isVCUCommandResponse_Source `protobuf_oneof:"source"`
	// / What command is being replaced / retained
	//
	// Types that are valid to be assigned to Previous:
	//	*VCUCommandResponse_RetainedCommand
	//	*VCUCommandResponse_PreviousSequenceNumber
	//	*VCUCommandResponse_PreviousCommand
	Previous isVCUCommandResponse_Previous `protobuf_oneof:"previous"`
	// Temporary debug field, if we decide to keep this let's re-number it sequentially
	ErrorReason uint32 `protobuf:"fixed32,31,opt,name=error_reason,json=errorReason" json:"error_reason,omitempty"`
}

func (m *VCUCommandResponse) Reset()                    { *m = VCUCommandResponse{} }
func (m *VCUCommandResponse) String() string            { return proto.CompactTextString(m) }
func (*VCUCommandResponse) ProtoMessage()               {}
func (*VCUCommandResponse) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{0} }

type isVCUCommandResponse_Source interface {
	isVCUCommandResponse_Source()
}
type isVCUCommandResponse_Previous interface {
	isVCUCommandResponse_Previous()
}

type VCUCommandResponse_SequenceNumber struct {
	SequenceNumber uint64 `protobuf:"fixed64,3,opt,name=sequenceNumber,oneof"`
}
type VCUCommandResponse_Command struct {
	Command *VCUCommandEnvelope `protobuf:"bytes,4,opt,name=command,oneof"`
}
type VCUCommandResponse_RetainedCommand struct {
	RetainedCommand *VCUCommandEnvelope `protobuf:"bytes,5,opt,name=retainedCommand,oneof"`
}
type VCUCommandResponse_PreviousSequenceNumber struct {
	PreviousSequenceNumber uint64 `protobuf:"fixed64,6,opt,name=previousSequenceNumber,oneof"`
}
type VCUCommandResponse_PreviousCommand struct {
	PreviousCommand *VCUCommandEnvelope `protobuf:"bytes,7,opt,name=previousCommand,oneof"`
}

func (*VCUCommandResponse_SequenceNumber) isVCUCommandResponse_Source()           {}
func (*VCUCommandResponse_Command) isVCUCommandResponse_Source()                  {}
func (*VCUCommandResponse_RetainedCommand) isVCUCommandResponse_Previous()        {}
func (*VCUCommandResponse_PreviousSequenceNumber) isVCUCommandResponse_Previous() {}
func (*VCUCommandResponse_PreviousCommand) isVCUCommandResponse_Previous()        {}

func (m *VCUCommandResponse) GetSource() isVCUCommandResponse_Source {
	if m != nil {
		return m.Source
	}
	return nil
}
func (m *VCUCommandResponse) GetPrevious() isVCUCommandResponse_Previous {
	if m != nil {
		return m.Previous
	}
	return nil
}

func (m *VCUCommandResponse) GetDisposition() VCUCommandDisposition {
	if m != nil {
		return m.Disposition
	}
	return VCUCommandDisposition_CommandRejected
}

func (m *VCUCommandResponse) GetTimestamp() *core.SystemTimestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *VCUCommandResponse) GetSequenceNumber() uint64 {
	if x, ok := m.GetSource().(*VCUCommandResponse_SequenceNumber); ok {
		return x.SequenceNumber
	}
	return 0
}

func (m *VCUCommandResponse) GetCommand() *VCUCommandEnvelope {
	if x, ok := m.GetSource().(*VCUCommandResponse_Command); ok {
		return x.Command
	}
	return nil
}

func (m *VCUCommandResponse) GetRetainedCommand() *VCUCommandEnvelope {
	if x, ok := m.GetPrevious().(*VCUCommandResponse_RetainedCommand); ok {
		return x.RetainedCommand
	}
	return nil
}

func (m *VCUCommandResponse) GetPreviousSequenceNumber() uint64 {
	if x, ok := m.GetPrevious().(*VCUCommandResponse_PreviousSequenceNumber); ok {
		return x.PreviousSequenceNumber
	}
	return 0
}

func (m *VCUCommandResponse) GetPreviousCommand() *VCUCommandEnvelope {
	if x, ok := m.GetPrevious().(*VCUCommandResponse_PreviousCommand); ok {
		return x.PreviousCommand
	}
	return nil
}

func (m *VCUCommandResponse) GetErrorReason() uint32 {
	if m != nil {
		return m.ErrorReason
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*VCUCommandResponse) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _VCUCommandResponse_OneofMarshaler, _VCUCommandResponse_OneofUnmarshaler, _VCUCommandResponse_OneofSizer, []interface{}{
		(*VCUCommandResponse_SequenceNumber)(nil),
		(*VCUCommandResponse_Command)(nil),
		(*VCUCommandResponse_RetainedCommand)(nil),
		(*VCUCommandResponse_PreviousSequenceNumber)(nil),
		(*VCUCommandResponse_PreviousCommand)(nil),
	}
}

func _VCUCommandResponse_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*VCUCommandResponse)
	// source
	switch x := m.Source.(type) {
	case *VCUCommandResponse_SequenceNumber:
		b.EncodeVarint(3<<3 | proto.WireFixed64)
		b.EncodeFixed64(uint64(x.SequenceNumber))
	case *VCUCommandResponse_Command:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Command); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("VCUCommandResponse.Source has unexpected type %T", x)
	}
	// previous
	switch x := m.Previous.(type) {
	case *VCUCommandResponse_RetainedCommand:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RetainedCommand); err != nil {
			return err
		}
	case *VCUCommandResponse_PreviousSequenceNumber:
		b.EncodeVarint(6<<3 | proto.WireFixed64)
		b.EncodeFixed64(uint64(x.PreviousSequenceNumber))
	case *VCUCommandResponse_PreviousCommand:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PreviousCommand); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("VCUCommandResponse.Previous has unexpected type %T", x)
	}
	return nil
}

func _VCUCommandResponse_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*VCUCommandResponse)
	switch tag {
	case 3: // source.sequenceNumber
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.Source = &VCUCommandResponse_SequenceNumber{x}
		return true, err
	case 4: // source.command
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(VCUCommandEnvelope)
		err := b.DecodeMessage(msg)
		m.Source = &VCUCommandResponse_Command{msg}
		return true, err
	case 5: // previous.retainedCommand
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(VCUCommandEnvelope)
		err := b.DecodeMessage(msg)
		m.Previous = &VCUCommandResponse_RetainedCommand{msg}
		return true, err
	case 6: // previous.previousSequenceNumber
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.Previous = &VCUCommandResponse_PreviousSequenceNumber{x}
		return true, err
	case 7: // previous.previousCommand
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(VCUCommandEnvelope)
		err := b.DecodeMessage(msg)
		m.Previous = &VCUCommandResponse_PreviousCommand{msg}
		return true, err
	default:
		return false, nil
	}
}

func _VCUCommandResponse_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*VCUCommandResponse)
	// source
	switch x := m.Source.(type) {
	case *VCUCommandResponse_SequenceNumber:
		n += proto.SizeVarint(3<<3 | proto.WireFixed64)
		n += 8
	case *VCUCommandResponse_Command:
		s := proto.Size(x.Command)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// previous
	switch x := m.Previous.(type) {
	case *VCUCommandResponse_RetainedCommand:
		s := proto.Size(x.RetainedCommand)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *VCUCommandResponse_PreviousSequenceNumber:
		n += proto.SizeVarint(6<<3 | proto.WireFixed64)
		n += 8
	case *VCUCommandResponse_PreviousCommand:
		s := proto.Size(x.PreviousCommand)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*VCUCommandResponse)(nil), "hal.VCUCommandResponse")
	proto.RegisterEnum("hal.VCUCommandDisposition", VCUCommandDisposition_name, VCUCommandDisposition_value)
}

func init() { proto.RegisterFile("packages/hal/proto/vcu_command_response.proto", fileDescriptor21) }

var fileDescriptor21 = []byte{
	// 423 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xc1, 0x6f, 0xd3, 0x30,
	0x14, 0xc6, 0x9b, 0x15, 0xda, 0xf1, 0x8a, 0xb6, 0xca, 0xb0, 0x11, 0xf5, 0x42, 0x81, 0x4b, 0x40,
	0x22, 0x95, 0xd6, 0x0b, 0x07, 0x2e, 0xac, 0x20, 0xed, 0xc4, 0xc1, 0x63, 0x5c, 0x23, 0xcf, 0x79,
	0x5a, 0x43, 0x13, 0x3f, 0x63, 0x3b, 0x45, 0xfd, 0x7b, 0xf9, 0x47, 0x50, 0x32, 0xa7, 0x2d, 0x11,
	0xa1, 0xbb, 0x7e, 0xdf, 0xf7, 0xf3, 0x7b, 0xfe, 0x6c, 0x78, 0xaf, 0x85, 0x5c, 0x89, 0x3b, 0xb4,
	0xb3, 0xa5, 0xc8, 0x67, 0xda, 0x90, 0xa3, 0xd9, 0x5a, 0x96, 0x89, 0xa4, 0xa2, 0x10, 0x2a, 0x4d,
	0x0c, 0x5a, 0x4d, 0xca, 0x62, 0x5c, 0x5b, 0xac, 0xbf, 0x14, 0xf9, 0xe4, 0xcd, 0x96, 0x91, 0x64,
	0xd0, 0x43, 0x2e, 0x2b, 0xd0, 0x3a, 0x51, 0xe8, 0xfb, 0xe4, 0x64, 0xde, 0x71, 0x30, 0x16, 0x68,
	0xee, 0x50, 0xc9, 0x4d, 0x62, 0x1d, 0xe9, 0x66, 0x8e, 0x87, 0xde, 0x76, 0x40, 0x59, 0x9a, 0x63,
	0x2b, 0x3a, 0xeb, 0x8a, 0xae, 0x12, 0x49, 0xca, 0x19, 0xca, 0x1f, 0x08, 0x38, 0x23, 0x7e, 0xa0,
	0x74, 0x64, 0x36, 0x2d, 0xe0, 0x50, 0x35, 0xa8, 0xd6, 0x98, 0x93, 0xf6, 0xd5, 0xbc, 0xfe, 0xdd,
	0x07, 0xf6, 0x7d, 0x71, 0xb3, 0xb8, 0x77, 0xb9, 0xef, 0x8d, 0x7d, 0x84, 0x51, 0x9a, 0x59, 0x4d,
	0x36, 0x73, 0x19, 0xa9, 0x30, 0x98, 0x06, 0xd1, 0xc9, 0xc5, 0x24, 0x5e, 0x8a, 0x3c, 0xde, 0xa5,
	0x3f, 0xef, 0x12, 0x7c, 0x3f, 0xce, 0xe6, 0xf0, 0x64, 0x5b, 0x6c, 0x78, 0x34, 0x0d, 0xa2, 0xd1,
	0xc5, 0x59, 0x5c, 0xb5, 0x1e, 0x5f, 0x6f, 0xac, 0xc3, 0xe2, 0x5b, 0x63, 0xf2, 0x5d, 0x8e, 0x45,
	0x70, 0x62, 0xf1, 0x67, 0x89, 0x4a, 0xe2, 0xd7, 0xb2, 0xb8, 0x45, 0x13, 0xf6, 0xa7, 0x41, 0x34,
	0xb8, 0xea, 0xf1, 0x96, 0xce, 0xe6, 0x30, 0xf4, 0xb7, 0x09, 0x1f, 0xd5, 0x87, 0xbf, 0x68, 0x2d,
	0xf6, 0xc5, 0xdf, 0xf1, 0xaa, 0xc7, 0x9b, 0x24, 0x5b, 0xc0, 0xa9, 0x41, 0x27, 0x32, 0x85, 0xa9,
	0x4f, 0x85, 0x8f, 0xff, 0x0f, 0x07, 0xbc, 0x4d, 0xb0, 0x0f, 0x70, 0xae, 0x0d, 0xae, 0x33, 0x2a,
	0xed, 0xf5, 0xdf, 0xbb, 0x0e, 0xea, 0x5d, 0x03, 0xde, 0xe1, 0x57, 0xe3, 0x1b, 0xa7, 0x19, 0x3f,
	0x3c, 0x38, 0xbe, 0x45, 0xb0, 0x57, 0xf0, 0x14, 0x8d, 0x21, 0x93, 0x18, 0x14, 0x96, 0x54, 0xf8,
	0x72, 0x1a, 0x44, 0x43, 0x3e, 0xaa, 0x35, 0x5e, 0x4b, 0x97, 0xc7, 0x30, 0xb0, 0x54, 0x1a, 0x89,
	0x97, 0x00, 0xc7, 0x0d, 0xff, 0x8e, 0xe0, 0xec, 0x9f, 0xcf, 0xc6, 0x9e, 0xc1, 0xe9, 0xf6, 0xe9,
	0xab, 0xff, 0x84, 0xe9, 0xb8, 0xb7, 0x27, 0x7e, 0x92, 0x12, 0x75, 0x25, 0x06, 0xec, 0x39, 0x8c,
	0xbd, 0xb8, 0xa0, 0x42, 0xe7, 0x58, 0xa9, 0x47, 0xec, 0x1c, 0xd8, 0xde, 0x71, 0x37, 0x6a, 0xa5,
	0xe8, 0x97, 0x1a, 0xf7, 0x6f, 0x07, 0xf5, 0xef, 0x9a, 0xff, 0x09, 0x00, 0x00, 0xff, 0xff, 0x4b,
	0xc5, 0x35, 0x75, 0xa9, 0x03, 0x00, 0x00,
}
