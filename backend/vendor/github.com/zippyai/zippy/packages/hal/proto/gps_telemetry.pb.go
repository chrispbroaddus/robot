// Code generated by protoc-gen-go. DO NOT EDIT.
// source: packages/hal/proto/gps_telemetry.proto

package hal

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import core "github.com/zippyai/zippy/packages/core/proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// / Fix mode specifying the quality
type GPSTelemetry_FixMode int32

const (
	GPSTelemetry_FixNotSet GPSTelemetry_FixMode = 0
	GPSTelemetry_FixNone   GPSTelemetry_FixMode = 1
	GPSTelemetry_Fix2d     GPSTelemetry_FixMode = 2
	GPSTelemetry_Fix3d     GPSTelemetry_FixMode = 3
)

var GPSTelemetry_FixMode_name = map[int32]string{
	0: "FixNotSet",
	1: "FixNone",
	2: "Fix2d",
	3: "Fix3d",
}
var GPSTelemetry_FixMode_value = map[string]int32{
	"FixNotSet": 0,
	"FixNone":   1,
	"Fix2d":     2,
	"Fix3d":     3,
}

func (x GPSTelemetry_FixMode) String() string {
	return proto.EnumName(GPSTelemetry_FixMode_name, int32(x))
}
func (GPSTelemetry_FixMode) EnumDescriptor() ([]byte, []int) { return fileDescriptor5, []int{0, 0} }

// / GPS Telemetry IDL which attempts to capture the information that will be used by most applications.
// /
// / References:
// /     [1] https://www.nmea.org/content/nmea_standards/nmea_0183_v_410.asp (pay version)
// /     [2] http://www.tronico.fi/OH6NT/docs/NMEA0183.pdf
// /     [3] http://gauss.gge.unb.ca/papers.pdf/gpsworld.may99.pdf
type GPSTelemetry struct {
	// / The GPS fixation timstamp
	Timestamp *core.SystemTimestamp `protobuf:"bytes,1,opt,name=timestamp" json:"timestamp,omitempty"`
	// / Latitude in degrees, decimal format
	Latitude float64 `protobuf:"fixed64,2,opt,name=latitude" json:"latitude,omitempty"`
	// / Longitude in degrees, decimal format
	Longitude float64 `protobuf:"fixed64,3,opt,name=longitude" json:"longitude,omitempty"`
	// / Height above Mean Sea Level (MSL) in meters
	Altitude float64              `protobuf:"fixed64,4,opt,name=altitude" json:"altitude,omitempty"`
	FixMode  GPSTelemetry_FixMode `protobuf:"varint,5,opt,name=fix_mode,json=fixMode,enum=hal.GPSTelemetry_FixMode" json:"fix_mode,omitempty"`
	// / Number of satellites in view of the antenna
	NumOfSatellitesInView uint32 `protobuf:"varint,6,opt,name=num_of_satellites_in_view,json=numOfSatellitesInView" json:"num_of_satellites_in_view,omitempty"`
	// / Horizontal Dilution of Precision (HDOP) as described in [3]
	HorizontalDilutionOfPrecision float64 `protobuf:"fixed64,7,opt,name=horizontal_dilution_of_precision,json=horizontalDilutionOfPrecision" json:"horizontal_dilution_of_precision,omitempty"`
	// / Geoidal separation, the difference between the WGS-84 earth
	// / ellipsoid and mean-sea-level (geoid), "-" means mean-sea-level below ellipsoid
	GeoidSeparation float64 `protobuf:"fixed64,8,opt,name=geoid_separation,json=geoidSeparation" json:"geoid_separation,omitempty"`
	// / Age of differential GPS data, time in seconds since last SC104 type 1 or 9 update
	AgeOfDifferentialGps float32 `protobuf:"fixed32,9,opt,name=age_of_differential_gps,json=ageOfDifferentialGps" json:"age_of_differential_gps,omitempty"`
	// / Differential reference station ID, 0000-1023
	StationId uint32 `protobuf:"varint,10,opt,name=station_id,json=stationId" json:"station_id,omitempty"`
}

func (m *GPSTelemetry) Reset()                    { *m = GPSTelemetry{} }
func (m *GPSTelemetry) String() string            { return proto.CompactTextString(m) }
func (*GPSTelemetry) ProtoMessage()               {}
func (*GPSTelemetry) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *GPSTelemetry) GetTimestamp() *core.SystemTimestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *GPSTelemetry) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *GPSTelemetry) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *GPSTelemetry) GetAltitude() float64 {
	if m != nil {
		return m.Altitude
	}
	return 0
}

func (m *GPSTelemetry) GetFixMode() GPSTelemetry_FixMode {
	if m != nil {
		return m.FixMode
	}
	return GPSTelemetry_FixNotSet
}

func (m *GPSTelemetry) GetNumOfSatellitesInView() uint32 {
	if m != nil {
		return m.NumOfSatellitesInView
	}
	return 0
}

func (m *GPSTelemetry) GetHorizontalDilutionOfPrecision() float64 {
	if m != nil {
		return m.HorizontalDilutionOfPrecision
	}
	return 0
}

func (m *GPSTelemetry) GetGeoidSeparation() float64 {
	if m != nil {
		return m.GeoidSeparation
	}
	return 0
}

func (m *GPSTelemetry) GetAgeOfDifferentialGps() float32 {
	if m != nil {
		return m.AgeOfDifferentialGps
	}
	return 0
}

func (m *GPSTelemetry) GetStationId() uint32 {
	if m != nil {
		return m.StationId
	}
	return 0
}

func init() {
	proto.RegisterType((*GPSTelemetry)(nil), "hal.GPSTelemetry")
	proto.RegisterEnum("hal.GPSTelemetry_FixMode", GPSTelemetry_FixMode_name, GPSTelemetry_FixMode_value)
}

func init() { proto.RegisterFile("packages/hal/proto/gps_telemetry.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 414 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x92, 0x51, 0x6b, 0xdb, 0x30,
	0x14, 0x85, 0xe7, 0xa4, 0x6d, 0x62, 0x75, 0xdd, 0x8c, 0x58, 0x99, 0x5b, 0x56, 0x30, 0x1d, 0x0c,
	0xef, 0xc5, 0x81, 0x64, 0x83, 0xc1, 0x5e, 0x4b, 0x42, 0x1f, 0xd6, 0x14, 0xbb, 0xec, 0x55, 0x68,
	0xd1, 0xb5, 0x73, 0x99, 0x2c, 0x09, 0x4b, 0x59, 0xd3, 0xfd, 0x8a, 0xfd, 0xe4, 0x61, 0xc5, 0x71,
	0xf2, 0x76, 0xef, 0x39, 0xdf, 0x39, 0xbe, 0x36, 0x26, 0x9f, 0x0c, 0x5f, 0xfd, 0xe6, 0x15, 0xd8,
	0xc9, 0x9a, 0xcb, 0x89, 0x69, 0xb4, 0xd3, 0x93, 0xca, 0x58, 0xe6, 0x40, 0x42, 0x0d, 0xae, 0x79,
	0xc9, 0xbc, 0x46, 0x87, 0x6b, 0x2e, 0xaf, 0x3f, 0xf6, 0xf0, 0x4a, 0x37, 0xd0, 0xd1, 0x0e, 0x6b,
	0xb0, 0x8e, 0xd7, 0x66, 0x47, 0xde, 0xfe, 0x3b, 0x21, 0xaf, 0x17, 0x8f, 0xc5, 0xd3, 0xbe, 0x80,
	0xce, 0x48, 0xd8, 0x33, 0x71, 0x90, 0x04, 0xe9, 0xf9, 0xf4, 0x32, 0x6b, 0x0b, 0xb2, 0xe2, 0xc5,
	0x3a, 0xa8, 0x9f, 0xf6, 0x66, 0x7e, 0xe0, 0xe8, 0x35, 0x19, 0x4b, 0xee, 0xd0, 0x6d, 0x04, 0xc4,
	0x83, 0x24, 0x48, 0x83, 0xbc, 0xdf, 0xe9, 0x07, 0x12, 0x4a, 0xad, 0xaa, 0x9d, 0x39, 0xf4, 0xe6,
	0x41, 0x68, 0x93, 0x5c, 0x76, 0xc9, 0x93, 0x5d, 0x72, 0xbf, 0xd3, 0x2f, 0x64, 0x5c, 0xe2, 0x96,
	0xd5, 0x5a, 0x40, 0x7c, 0x9a, 0x04, 0xe9, 0x9b, 0xe9, 0x55, 0xb6, 0xe6, 0x32, 0x3b, 0xbe, 0x37,
	0x9b, 0xe3, 0xf6, 0x87, 0x16, 0x90, 0x8f, 0xca, 0xdd, 0x40, 0xbf, 0x91, 0x2b, 0xb5, 0xa9, 0x99,
	0x2e, 0x99, 0xe5, 0x0e, 0xa4, 0x44, 0x07, 0x96, 0xa1, 0x62, 0x7f, 0x10, 0x9e, 0xe3, 0xb3, 0x24,
	0x48, 0x2f, 0xf2, 0x4b, 0xb5, 0xa9, 0x97, 0x65, 0xd1, 0xdb, 0xf7, 0xea, 0x27, 0xc2, 0x33, 0x5d,
	0x90, 0x64, 0xad, 0x1b, 0xfc, 0xab, 0x95, 0xe3, 0x92, 0x09, 0x94, 0x1b, 0x87, 0x5a, 0xb5, 0x4d,
	0xa6, 0x81, 0x15, 0x5a, 0xd4, 0x2a, 0x1e, 0xf9, 0x1b, 0x6f, 0x0e, 0xdc, 0x5d, 0x87, 0x2d, 0xcb,
	0xc7, 0x3d, 0x44, 0x3f, 0x93, 0xa8, 0x02, 0x8d, 0x82, 0x59, 0x30, 0xbc, 0xe1, 0xad, 0x1d, 0x8f,
	0x7d, 0xf0, 0xad, 0xd7, 0x8b, 0x5e, 0xa6, 0x5f, 0xc9, 0x7b, 0x5e, 0x41, 0xfb, 0x0c, 0x81, 0x65,
	0x09, 0x0d, 0x28, 0x87, 0x5c, 0xb2, 0xca, 0xd8, 0x38, 0x4c, 0x82, 0x74, 0x90, 0xbf, 0xe3, 0x15,
	0x2c, 0xcb, 0xbb, 0x23, 0x73, 0x61, 0x2c, 0xbd, 0x21, 0xc4, 0x3a, 0xdf, 0xc0, 0x50, 0xc4, 0xc4,
	0xbf, 0x55, 0xd8, 0x29, 0xf7, 0xe2, 0xf6, 0x3b, 0x19, 0x75, 0xdf, 0x85, 0x5e, 0x90, 0x70, 0x8e,
	0xdb, 0x07, 0xed, 0x0a, 0x70, 0xd1, 0x2b, 0x7a, 0xee, 0x9d, 0x07, 0xad, 0x20, 0x0a, 0x68, 0x48,
	0x4e, 0xe7, 0xb8, 0x9d, 0x8a, 0x68, 0xd0, 0x8d, 0x33, 0x11, 0x0d, 0x7f, 0x9d, 0xf9, 0x3f, 0x63,
	0xf6, 0x3f, 0x00, 0x00, 0xff, 0xff, 0x32, 0xfd, 0x98, 0x44, 0x6d, 0x02, 0x00, 0x00,
}
