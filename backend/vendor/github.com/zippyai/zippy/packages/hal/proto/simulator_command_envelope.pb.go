// Code generated by protoc-gen-go. DO NOT EDIT.
// source: packages/hal/proto/simulator_command_envelope.proto

package hal

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// / Envelope for commands.
type SimulatorCommandEnvelope struct {
	// Types that are valid to be assigned to Command:
	//	*SimulatorCommandEnvelope_CameraCommand
	//	*SimulatorCommandEnvelope_ResetCommand
	//	*SimulatorCommandEnvelope_StatsCommand
	Command isSimulatorCommandEnvelope_Command `protobuf_oneof:"command"`
}

func (m *SimulatorCommandEnvelope) Reset()                    { *m = SimulatorCommandEnvelope{} }
func (m *SimulatorCommandEnvelope) String() string            { return proto.CompactTextString(m) }
func (*SimulatorCommandEnvelope) ProtoMessage()               {}
func (*SimulatorCommandEnvelope) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{0} }

type isSimulatorCommandEnvelope_Command interface {
	isSimulatorCommandEnvelope_Command()
}

type SimulatorCommandEnvelope_CameraCommand struct {
	CameraCommand *SimulatorCameraCommand `protobuf:"bytes,1,opt,name=cameraCommand,oneof"`
}
type SimulatorCommandEnvelope_ResetCommand struct {
	ResetCommand *SimulatorResetCommand `protobuf:"bytes,2,opt,name=resetCommand,oneof"`
}
type SimulatorCommandEnvelope_StatsCommand struct {
	StatsCommand *SimulatorStatsCommand `protobuf:"bytes,3,opt,name=statsCommand,oneof"`
}

func (*SimulatorCommandEnvelope_CameraCommand) isSimulatorCommandEnvelope_Command() {}
func (*SimulatorCommandEnvelope_ResetCommand) isSimulatorCommandEnvelope_Command()  {}
func (*SimulatorCommandEnvelope_StatsCommand) isSimulatorCommandEnvelope_Command()  {}

func (m *SimulatorCommandEnvelope) GetCommand() isSimulatorCommandEnvelope_Command {
	if m != nil {
		return m.Command
	}
	return nil
}

func (m *SimulatorCommandEnvelope) GetCameraCommand() *SimulatorCameraCommand {
	if x, ok := m.GetCommand().(*SimulatorCommandEnvelope_CameraCommand); ok {
		return x.CameraCommand
	}
	return nil
}

func (m *SimulatorCommandEnvelope) GetResetCommand() *SimulatorResetCommand {
	if x, ok := m.GetCommand().(*SimulatorCommandEnvelope_ResetCommand); ok {
		return x.ResetCommand
	}
	return nil
}

func (m *SimulatorCommandEnvelope) GetStatsCommand() *SimulatorStatsCommand {
	if x, ok := m.GetCommand().(*SimulatorCommandEnvelope_StatsCommand); ok {
		return x.StatsCommand
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SimulatorCommandEnvelope) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SimulatorCommandEnvelope_OneofMarshaler, _SimulatorCommandEnvelope_OneofUnmarshaler, _SimulatorCommandEnvelope_OneofSizer, []interface{}{
		(*SimulatorCommandEnvelope_CameraCommand)(nil),
		(*SimulatorCommandEnvelope_ResetCommand)(nil),
		(*SimulatorCommandEnvelope_StatsCommand)(nil),
	}
}

func _SimulatorCommandEnvelope_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SimulatorCommandEnvelope)
	// command
	switch x := m.Command.(type) {
	case *SimulatorCommandEnvelope_CameraCommand:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CameraCommand); err != nil {
			return err
		}
	case *SimulatorCommandEnvelope_ResetCommand:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ResetCommand); err != nil {
			return err
		}
	case *SimulatorCommandEnvelope_StatsCommand:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StatsCommand); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("SimulatorCommandEnvelope.Command has unexpected type %T", x)
	}
	return nil
}

func _SimulatorCommandEnvelope_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SimulatorCommandEnvelope)
	switch tag {
	case 1: // command.cameraCommand
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SimulatorCameraCommand)
		err := b.DecodeMessage(msg)
		m.Command = &SimulatorCommandEnvelope_CameraCommand{msg}
		return true, err
	case 2: // command.resetCommand
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SimulatorResetCommand)
		err := b.DecodeMessage(msg)
		m.Command = &SimulatorCommandEnvelope_ResetCommand{msg}
		return true, err
	case 3: // command.statsCommand
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SimulatorStatsCommand)
		err := b.DecodeMessage(msg)
		m.Command = &SimulatorCommandEnvelope_StatsCommand{msg}
		return true, err
	default:
		return false, nil
	}
}

func _SimulatorCommandEnvelope_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SimulatorCommandEnvelope)
	// command
	switch x := m.Command.(type) {
	case *SimulatorCommandEnvelope_CameraCommand:
		s := proto.Size(x.CameraCommand)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SimulatorCommandEnvelope_ResetCommand:
		s := proto.Size(x.ResetCommand)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SimulatorCommandEnvelope_StatsCommand:
		s := proto.Size(x.StatsCommand)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*SimulatorCommandEnvelope)(nil), "hal.SimulatorCommandEnvelope")
}

func init() {
	proto.RegisterFile("packages/hal/proto/simulator_command_envelope.proto", fileDescriptor13)
}

var fileDescriptor13 = []byte{
	// 208 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x32, 0x2e, 0x48, 0x4c, 0xce,
	0x4e, 0x4c, 0x4f, 0x2d, 0xd6, 0xcf, 0x48, 0xcc, 0xd1, 0x2f, 0x28, 0xca, 0x2f, 0xc9, 0xd7, 0x2f,
	0xce, 0xcc, 0x2d, 0xcd, 0x49, 0x2c, 0xc9, 0x2f, 0x8a, 0x4f, 0xce, 0xcf, 0xcd, 0x4d, 0xcc, 0x4b,
	0x89, 0x4f, 0xcd, 0x2b, 0x4b, 0xcd, 0xc9, 0x2f, 0x48, 0xd5, 0x03, 0x2b, 0x10, 0x62, 0xce, 0x48,
	0xcc, 0x91, 0x32, 0xc4, 0xaf, 0x33, 0x31, 0x37, 0xb5, 0x28, 0x11, 0x66, 0x00, 0x44, 0x9f, 0x94,
	0x01, 0x5e, 0x2d, 0x45, 0xa9, 0xc5, 0xa9, 0x25, 0x24, 0xe9, 0x28, 0x2e, 0x49, 0x2c, 0x29, 0x46,
	0xd5, 0xa1, 0xf4, 0x8e, 0x91, 0x4b, 0x22, 0x18, 0xa6, 0xc2, 0x19, 0x22, 0xe5, 0x0a, 0x75, 0xbe,
	0x90, 0x33, 0x17, 0x2f, 0xc4, 0x61, 0x50, 0x09, 0x09, 0x46, 0x05, 0x46, 0x0d, 0x6e, 0x23, 0x69,
	0xbd, 0x8c, 0xc4, 0x1c, 0x3d, 0x84, 0x2e, 0x64, 0x25, 0x1e, 0x0c, 0x41, 0xa8, 0x7a, 0x84, 0x1c,
	0xb8, 0x78, 0xc0, 0x4e, 0x85, 0x99, 0xc1, 0x04, 0x36, 0x43, 0x0a, 0xd5, 0x8c, 0x20, 0x24, 0x15,
	0x1e, 0x0c, 0x41, 0x28, 0x3a, 0x40, 0x26, 0x80, 0x9d, 0x0e, 0x33, 0x81, 0x19, 0x9b, 0x09, 0xc1,
	0x48, 0x2a, 0x40, 0x26, 0x20, 0xeb, 0x70, 0xe2, 0xe4, 0x62, 0x87, 0x7a, 0x3b, 0x89, 0x0d, 0xec,
	0x6f, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x3b, 0xa1, 0xc0, 0x5b, 0xca, 0x01, 0x00, 0x00,
}
