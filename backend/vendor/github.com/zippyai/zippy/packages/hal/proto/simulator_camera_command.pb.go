// Code generated by protoc-gen-go. DO NOT EDIT.
// source: packages/hal/proto/simulator_camera_command.proto

package hal

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type SimulatorCameraCommand struct {
	CameraId    CameraId `protobuf:"varint,1,opt,name=cameraId,enum=hal.CameraId" json:"cameraId,omitempty"`
	Enable      bool     `protobuf:"varint,2,opt,name=enable" json:"enable,omitempty"`
	EnableDepth bool     `protobuf:"varint,3,opt,name=enableDepth" json:"enableDepth,omitempty"`
	EnableXYZ   bool     `protobuf:"varint,4,opt,name=enableXYZ" json:"enableXYZ,omitempty"`
}

func (m *SimulatorCameraCommand) Reset()                    { *m = SimulatorCameraCommand{} }
func (m *SimulatorCameraCommand) String() string            { return proto.CompactTextString(m) }
func (*SimulatorCameraCommand) ProtoMessage()               {}
func (*SimulatorCameraCommand) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{0} }

func (m *SimulatorCameraCommand) GetCameraId() CameraId {
	if m != nil {
		return m.CameraId
	}
	return CameraId_FrontLeftStereo
}

func (m *SimulatorCameraCommand) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

func (m *SimulatorCameraCommand) GetEnableDepth() bool {
	if m != nil {
		return m.EnableDepth
	}
	return false
}

func (m *SimulatorCameraCommand) GetEnableXYZ() bool {
	if m != nil {
		return m.EnableXYZ
	}
	return false
}

func init() {
	proto.RegisterType((*SimulatorCameraCommand)(nil), "hal.SimulatorCameraCommand")
}

func init() { proto.RegisterFile("packages/hal/proto/simulator_camera_command.proto", fileDescriptor10) }

var fileDescriptor10 = []byte{
	// 182 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x32, 0x2c, 0x48, 0x4c, 0xce,
	0x4e, 0x4c, 0x4f, 0x2d, 0xd6, 0xcf, 0x48, 0xcc, 0xd1, 0x2f, 0x28, 0xca, 0x2f, 0xc9, 0xd7, 0x2f,
	0xce, 0xcc, 0x2d, 0xcd, 0x49, 0x2c, 0xc9, 0x2f, 0x8a, 0x4f, 0x4e, 0xcc, 0x4d, 0x2d, 0x4a, 0x8c,
	0x4f, 0xce, 0xcf, 0xcd, 0x4d, 0xcc, 0x4b, 0xd1, 0x03, 0x4b, 0x0b, 0x31, 0x67, 0x24, 0xe6, 0x48,
	0x29, 0x61, 0xd1, 0x07, 0x55, 0x9d, 0x09, 0x55, 0xa8, 0x34, 0x9b, 0x91, 0x4b, 0x2c, 0x18, 0x66,
	0x96, 0x33, 0x58, 0xd2, 0x19, 0x62, 0x92, 0x90, 0x26, 0x17, 0x07, 0x44, 0xb5, 0x67, 0x8a, 0x04,
	0xa3, 0x02, 0xa3, 0x06, 0x9f, 0x11, 0xaf, 0x5e, 0x46, 0x62, 0x8e, 0x9e, 0x33, 0x54, 0x30, 0x08,
	0x2e, 0x2d, 0x24, 0xc6, 0xc5, 0x96, 0x9a, 0x97, 0x98, 0x94, 0x93, 0x2a, 0xc1, 0xa4, 0xc0, 0xa8,
	0xc1, 0x11, 0x04, 0xe5, 0x09, 0x29, 0x70, 0x71, 0x43, 0x58, 0x2e, 0xa9, 0x05, 0x25, 0x19, 0x12,
	0xcc, 0x60, 0x49, 0x64, 0x21, 0x21, 0x19, 0x2e, 0x4e, 0x08, 0x37, 0x22, 0x32, 0x4a, 0x82, 0x05,
	0x2c, 0x8f, 0x10, 0x48, 0x62, 0x03, 0x3b, 0xd2, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x7c, 0x33,
	0xa4, 0x92, 0x02, 0x01, 0x00, 0x00,
}
