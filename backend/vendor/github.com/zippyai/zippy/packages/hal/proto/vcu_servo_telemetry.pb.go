// Code generated by protoc-gen-go. DO NOT EDIT.
// source: packages/hal/proto/vcu_servo_telemetry.proto

package hal

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import core "github.com/zippyai/zippy/packages/core/proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type VCUServoID int32

const (
	VCUServoID_LeftFrontServo      VCUServoID = 0
	VCUServoID_LeftRearServo       VCUServoID = 1
	VCUServoID_RightFrontServo     VCUServoID = 2
	VCUServoID_RightRearServo      VCUServoID = 3
	VCUServoID_LeftRailHingeJoint  VCUServoID = 4
	VCUServoID_RightRailHingeJoint VCUServoID = 5
)

var VCUServoID_name = map[int32]string{
	0: "LeftFrontServo",
	1: "LeftRearServo",
	2: "RightFrontServo",
	3: "RightRearServo",
	4: "LeftRailHingeJoint",
	5: "RightRailHingeJoint",
}
var VCUServoID_value = map[string]int32{
	"LeftFrontServo":      0,
	"LeftRearServo":       1,
	"RightFrontServo":     2,
	"RightRearServo":      3,
	"LeftRailHingeJoint":  4,
	"RightRailHingeJoint": 5,
}

func (x VCUServoID) String() string {
	return proto.EnumName(VCUServoID_name, int32(x))
}
func (VCUServoID) EnumDescriptor() ([]byte, []int) { return fileDescriptor26, []int{0} }

// / Describes telemetry as reported by a single servo
type VCUServoTelemetry struct {
	// / HW timestamp of when this measurement was made.
	MeasurementHardwareTimestamp *core.HardwareTimestamp `protobuf:"bytes,1,opt,name=measurementHardwareTimestamp" json:"measurementHardwareTimestamp,omitempty"`
	// / System timestamp of when this measurement was made. The VCU will make every reasonable
	// / effort to ensure that measuredHardwareTimestamp and measuredSystemTimestamp refer
	// / to the same instant in time.
	MeasurementSystemTimestamp *core.SystemTimestamp `protobuf:"bytes,2,opt,name=measurementSystemTimestamp" json:"measurementSystemTimestamp,omitempty"`
	// / Which servo we are reporting.
	ServoId VCUServoID `protobuf:"varint,4,opt,name=servoId,enum=hal.VCUServoID" json:"servoId,omitempty"`
	// / The total deflection of the servo in radians.
	// / Wheel servos (LeftFrontServo,LeftRearServo,RightFrontServo,RightRearServo) :
	// /     0 means "parallel to the forward direction
	// /     of the vehicle", positive increases clockwise from "front" when viewing the vehicle
	// /     top-down.
	// / Hinge-joint servos on rails:
	// /     0 means "parallel to the upward direction of the rail",
	// /     positive increases clockwise when viewing the vehicle
	// /     right-left.
	ServoAngleRadians float32 `protobuf:"fixed32,5,opt,name=servoAngleRadians" json:"servoAngleRadians,omitempty"`
}

func (m *VCUServoTelemetry) Reset()                    { *m = VCUServoTelemetry{} }
func (m *VCUServoTelemetry) String() string            { return proto.CompactTextString(m) }
func (*VCUServoTelemetry) ProtoMessage()               {}
func (*VCUServoTelemetry) Descriptor() ([]byte, []int) { return fileDescriptor26, []int{0} }

func (m *VCUServoTelemetry) GetMeasurementHardwareTimestamp() *core.HardwareTimestamp {
	if m != nil {
		return m.MeasurementHardwareTimestamp
	}
	return nil
}

func (m *VCUServoTelemetry) GetMeasurementSystemTimestamp() *core.SystemTimestamp {
	if m != nil {
		return m.MeasurementSystemTimestamp
	}
	return nil
}

func (m *VCUServoTelemetry) GetServoId() VCUServoID {
	if m != nil {
		return m.ServoId
	}
	return VCUServoID_LeftFrontServo
}

func (m *VCUServoTelemetry) GetServoAngleRadians() float32 {
	if m != nil {
		return m.ServoAngleRadians
	}
	return 0
}

func init() {
	proto.RegisterType((*VCUServoTelemetry)(nil), "hal.VCUServoTelemetry")
	proto.RegisterEnum("hal.VCUServoID", VCUServoID_name, VCUServoID_value)
}

func init() { proto.RegisterFile("packages/hal/proto/vcu_servo_telemetry.proto", fileDescriptor26) }

var fileDescriptor26 = []byte{
	// 309 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0xdf, 0x4a, 0x02, 0x41,
	0x14, 0xc6, 0xdb, 0x55, 0x0b, 0x4e, 0xe4, 0x9f, 0x23, 0xa5, 0x48, 0x17, 0x52, 0x37, 0x16, 0xb2,
	0x82, 0x3d, 0x41, 0x14, 0xa1, 0xd1, 0xd5, 0xa8, 0xdd, 0x74, 0x21, 0x27, 0x3d, 0xed, 0x2e, 0xed,
	0xee, 0xc8, 0xcc, 0x68, 0xf8, 0x10, 0xbd, 0x43, 0x8f, 0x1a, 0x3b, 0xdb, 0xa6, 0x25, 0x78, 0x37,
	0x7c, 0xdf, 0xf7, 0xfb, 0xc1, 0xcc, 0x40, 0x77, 0x41, 0xb3, 0x77, 0xf2, 0x59, 0xf7, 0x02, 0x8a,
	0x7a, 0x0b, 0x25, 0x8d, 0xec, 0xad, 0x66, 0xcb, 0xa9, 0x66, 0xb5, 0x92, 0x53, 0xc3, 0x11, 0xc7,
	0x6c, 0xd4, 0xda, 0xb3, 0x0d, 0x16, 0x02, 0x8a, 0x5a, 0x97, 0xbf, 0xc8, 0x4c, 0x2a, 0xfe, 0x61,
	0x4c, 0x18, 0xb3, 0x36, 0x14, 0x2f, 0xb2, 0xe5, 0xc5, 0x97, 0x0b, 0xb5, 0xe7, 0xbb, 0xc9, 0x28,
	0xd5, 0x8c, 0x73, 0x0b, 0xbe, 0xc0, 0x79, 0xcc, 0xa4, 0x97, 0x8a, 0x63, 0x4e, 0xcc, 0x80, 0xd4,
	0xfc, 0x83, 0x14, 0x8f, 0x73, 0xb6, 0xe9, 0xb4, 0x9d, 0xce, 0x71, 0xbf, 0xe1, 0xa5, 0x62, 0x6f,
	0xa7, 0x16, 0x7b, 0x61, 0x9c, 0x40, 0x6b, 0xab, 0x1f, 0xad, 0xb5, 0xe1, 0x78, 0xa3, 0x76, 0xad,
	0xfa, 0x34, 0x53, 0xff, 0x2b, 0xc5, 0x1e, 0x10, 0xaf, 0xe0, 0xc8, 0x3e, 0xc6, 0x70, 0xde, 0x2c,
	0xb6, 0x9d, 0x4e, 0xb9, 0x5f, 0xf1, 0x02, 0x8a, 0xbc, 0xfc, 0x72, 0xc3, 0x7b, 0x91, 0xf7, 0xd8,
	0x85, 0x9a, 0x3d, 0xde, 0x26, 0x7e, 0xc4, 0x82, 0xe6, 0x21, 0x25, 0xba, 0x59, 0x6a, 0x3b, 0x1d,
	0x57, 0xec, 0x16, 0xd7, 0x9f, 0x0e, 0xc0, 0xc6, 0x82, 0x08, 0xe5, 0x27, 0x7e, 0x33, 0x0f, 0x4a,
	0x26, 0xc6, 0x66, 0xd5, 0x03, 0xac, 0xc1, 0x49, 0x9a, 0x09, 0x26, 0x95, 0x45, 0x0e, 0xd6, 0xa1,
	0x22, 0x42, 0x3f, 0xd8, 0xde, 0xb9, 0x29, 0x6b, 0xc3, 0xcd, 0xb0, 0x80, 0x67, 0x80, 0x96, 0xa5,
	0x30, 0x1a, 0x84, 0x89, 0xcf, 0x8f, 0x32, 0x4c, 0x4c, 0xb5, 0x88, 0x0d, 0xa8, 0x67, 0xdb, 0xbf,
	0x45, 0xe9, 0xf5, 0xd0, 0xfe, 0xdc, 0xcd, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x37, 0x8b, 0x2a,
	0xb0, 0x13, 0x02, 0x00, 0x00,
}
