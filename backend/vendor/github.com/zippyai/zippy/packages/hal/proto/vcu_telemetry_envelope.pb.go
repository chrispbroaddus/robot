// Code generated by protoc-gen-go. DO NOT EDIT.
// source: packages/hal/proto/vcu_telemetry_envelope.proto

package hal

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import core "github.com/zippyai/zippy/packages/core/proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// / Container for VCU telemetry
type VCUTelemetryEnvelope struct {
	// / When this telemetry item was originally sent by the VCU
	SendTimestamp *core.SystemTimestamp `protobuf:"bytes,1,opt,name=sendTimestamp" json:"sendTimestamp,omitempty"`
	// Types that are valid to be assigned to Item:
	//	*VCUTelemetryEnvelope_WheelEncoder
	//	*VCUTelemetryEnvelope_Servo
	//	*VCUTelemetryEnvelope_SuspensionEncoder
	//	*VCUTelemetryEnvelope_Slider
	//	*VCUTelemetryEnvelope_Imu
	Item isVCUTelemetryEnvelope_Item `protobuf_oneof:"item"`
}

func (m *VCUTelemetryEnvelope) Reset()                    { *m = VCUTelemetryEnvelope{} }
func (m *VCUTelemetryEnvelope) String() string            { return proto.CompactTextString(m) }
func (*VCUTelemetryEnvelope) ProtoMessage()               {}
func (*VCUTelemetryEnvelope) Descriptor() ([]byte, []int) { return fileDescriptor31, []int{0} }

type isVCUTelemetryEnvelope_Item interface {
	isVCUTelemetryEnvelope_Item()
}

type VCUTelemetryEnvelope_WheelEncoder struct {
	WheelEncoder *VCUWheelEncoderTelemetry `protobuf:"bytes,2,opt,name=wheelEncoder,oneof"`
}
type VCUTelemetryEnvelope_Servo struct {
	Servo *VCUServoTelemetry `protobuf:"bytes,3,opt,name=servo,oneof"`
}
type VCUTelemetryEnvelope_SuspensionEncoder struct {
	SuspensionEncoder *VCUSuspensionEncoderTelemetry `protobuf:"bytes,4,opt,name=suspensionEncoder,oneof"`
}
type VCUTelemetryEnvelope_Slider struct {
	Slider *VCUSliderTelemetry `protobuf:"bytes,5,opt,name=slider,oneof"`
}
type VCUTelemetryEnvelope_Imu struct {
	Imu *VCUIMUTelemetry `protobuf:"bytes,6,opt,name=imu,oneof"`
}

func (*VCUTelemetryEnvelope_WheelEncoder) isVCUTelemetryEnvelope_Item()      {}
func (*VCUTelemetryEnvelope_Servo) isVCUTelemetryEnvelope_Item()             {}
func (*VCUTelemetryEnvelope_SuspensionEncoder) isVCUTelemetryEnvelope_Item() {}
func (*VCUTelemetryEnvelope_Slider) isVCUTelemetryEnvelope_Item()            {}
func (*VCUTelemetryEnvelope_Imu) isVCUTelemetryEnvelope_Item()               {}

func (m *VCUTelemetryEnvelope) GetItem() isVCUTelemetryEnvelope_Item {
	if m != nil {
		return m.Item
	}
	return nil
}

func (m *VCUTelemetryEnvelope) GetSendTimestamp() *core.SystemTimestamp {
	if m != nil {
		return m.SendTimestamp
	}
	return nil
}

func (m *VCUTelemetryEnvelope) GetWheelEncoder() *VCUWheelEncoderTelemetry {
	if x, ok := m.GetItem().(*VCUTelemetryEnvelope_WheelEncoder); ok {
		return x.WheelEncoder
	}
	return nil
}

func (m *VCUTelemetryEnvelope) GetServo() *VCUServoTelemetry {
	if x, ok := m.GetItem().(*VCUTelemetryEnvelope_Servo); ok {
		return x.Servo
	}
	return nil
}

func (m *VCUTelemetryEnvelope) GetSuspensionEncoder() *VCUSuspensionEncoderTelemetry {
	if x, ok := m.GetItem().(*VCUTelemetryEnvelope_SuspensionEncoder); ok {
		return x.SuspensionEncoder
	}
	return nil
}

func (m *VCUTelemetryEnvelope) GetSlider() *VCUSliderTelemetry {
	if x, ok := m.GetItem().(*VCUTelemetryEnvelope_Slider); ok {
		return x.Slider
	}
	return nil
}

func (m *VCUTelemetryEnvelope) GetImu() *VCUIMUTelemetry {
	if x, ok := m.GetItem().(*VCUTelemetryEnvelope_Imu); ok {
		return x.Imu
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*VCUTelemetryEnvelope) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _VCUTelemetryEnvelope_OneofMarshaler, _VCUTelemetryEnvelope_OneofUnmarshaler, _VCUTelemetryEnvelope_OneofSizer, []interface{}{
		(*VCUTelemetryEnvelope_WheelEncoder)(nil),
		(*VCUTelemetryEnvelope_Servo)(nil),
		(*VCUTelemetryEnvelope_SuspensionEncoder)(nil),
		(*VCUTelemetryEnvelope_Slider)(nil),
		(*VCUTelemetryEnvelope_Imu)(nil),
	}
}

func _VCUTelemetryEnvelope_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*VCUTelemetryEnvelope)
	// item
	switch x := m.Item.(type) {
	case *VCUTelemetryEnvelope_WheelEncoder:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.WheelEncoder); err != nil {
			return err
		}
	case *VCUTelemetryEnvelope_Servo:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Servo); err != nil {
			return err
		}
	case *VCUTelemetryEnvelope_SuspensionEncoder:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SuspensionEncoder); err != nil {
			return err
		}
	case *VCUTelemetryEnvelope_Slider:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Slider); err != nil {
			return err
		}
	case *VCUTelemetryEnvelope_Imu:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Imu); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("VCUTelemetryEnvelope.Item has unexpected type %T", x)
	}
	return nil
}

func _VCUTelemetryEnvelope_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*VCUTelemetryEnvelope)
	switch tag {
	case 2: // item.wheelEncoder
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(VCUWheelEncoderTelemetry)
		err := b.DecodeMessage(msg)
		m.Item = &VCUTelemetryEnvelope_WheelEncoder{msg}
		return true, err
	case 3: // item.servo
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(VCUServoTelemetry)
		err := b.DecodeMessage(msg)
		m.Item = &VCUTelemetryEnvelope_Servo{msg}
		return true, err
	case 4: // item.suspensionEncoder
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(VCUSuspensionEncoderTelemetry)
		err := b.DecodeMessage(msg)
		m.Item = &VCUTelemetryEnvelope_SuspensionEncoder{msg}
		return true, err
	case 5: // item.slider
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(VCUSliderTelemetry)
		err := b.DecodeMessage(msg)
		m.Item = &VCUTelemetryEnvelope_Slider{msg}
		return true, err
	case 6: // item.imu
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(VCUIMUTelemetry)
		err := b.DecodeMessage(msg)
		m.Item = &VCUTelemetryEnvelope_Imu{msg}
		return true, err
	default:
		return false, nil
	}
}

func _VCUTelemetryEnvelope_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*VCUTelemetryEnvelope)
	// item
	switch x := m.Item.(type) {
	case *VCUTelemetryEnvelope_WheelEncoder:
		s := proto.Size(x.WheelEncoder)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *VCUTelemetryEnvelope_Servo:
		s := proto.Size(x.Servo)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *VCUTelemetryEnvelope_SuspensionEncoder:
		s := proto.Size(x.SuspensionEncoder)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *VCUTelemetryEnvelope_Slider:
		s := proto.Size(x.Slider)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *VCUTelemetryEnvelope_Imu:
		s := proto.Size(x.Imu)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*VCUTelemetryEnvelope)(nil), "hal.VCUTelemetryEnvelope")
}

func init() { proto.RegisterFile("packages/hal/proto/vcu_telemetry_envelope.proto", fileDescriptor31) }

var fileDescriptor31 = []byte{
	// 322 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0x3b, 0x4f, 0xf3, 0x30,
	0x14, 0x86, 0xbf, 0x7e, 0x69, 0x33, 0x18, 0x18, 0xb0, 0x0a, 0x44, 0x95, 0x90, 0x50, 0x59, 0x2a,
	0x04, 0x8e, 0xb8, 0x2c, 0x88, 0x8d, 0xaa, 0x12, 0x0c, 0x2c, 0xbd, 0x31, 0x46, 0x26, 0x3d, 0x22,
	0x16, 0x76, 0x1c, 0xc5, 0x4e, 0x50, 0x47, 0xfe, 0x39, 0x8a, 0x73, 0x69, 0xda, 0xe2, 0xf5, 0x9c,
	0xe7, 0x79, 0x8f, 0xf5, 0x1a, 0xf9, 0x09, 0x0d, 0xbf, 0xe8, 0x27, 0x28, 0x3f, 0xa2, 0xdc, 0x4f,
	0x52, 0xa9, 0xa5, 0x9f, 0x87, 0x59, 0xa0, 0x81, 0x83, 0x00, 0x9d, 0xae, 0x03, 0x88, 0x73, 0xe0,
	0x32, 0x01, 0x62, 0x96, 0xd8, 0x89, 0x28, 0x1f, 0x5c, 0x36, 0x56, 0x28, 0x53, 0xa8, 0x34, 0xcd,
	0x04, 0x28, 0x4d, 0x45, 0x52, 0x92, 0x83, 0x07, 0x4b, 0xf4, 0x77, 0x04, 0xc0, 0x03, 0x88, 0x43,
	0xb9, 0x82, 0x74, 0x73, 0xa8, 0xb2, 0xae, 0x2d, 0x96, 0x82, 0x34, 0x97, 0x7b, 0xf4, 0x8d, 0x8d,
	0xe6, 0xec, 0xaf, 0xf0, 0x47, 0x1b, 0x9e, 0xa9, 0x04, 0x62, 0xc5, 0x64, 0x6c, 0x7d, 0xd7, 0x95,
	0x45, 0x65, 0x22, 0xdb, 0x65, 0x87, 0x3f, 0x0e, 0xea, 0x2f, 0xc7, 0x8b, 0x79, 0x3d, 0x9e, 0x54,
	0x15, 0xe2, 0x27, 0x74, 0xa4, 0x20, 0x5e, 0xcd, 0xeb, 0xa6, 0xbc, 0xce, 0x45, 0x67, 0x74, 0x70,
	0x77, 0x42, 0x8a, 0x1a, 0xc9, 0x6c, 0xad, 0x34, 0x88, 0x66, 0x39, 0xdd, 0x66, 0xf1, 0x18, 0x1d,
	0x9a, 0xea, 0x26, 0xe5, 0x0b, 0xbd, 0xff, 0xc6, 0x3d, 0x27, 0x11, 0xe5, 0x64, 0x39, 0x5e, 0xbc,
	0xb7, 0x76, 0xcd, 0xe5, 0x97, 0x7f, 0xd3, 0x2d, 0x09, 0x13, 0xd4, 0x33, 0x4d, 0x7a, 0x8e, 0xb1,
	0x4f, 0x6b, 0x7b, 0x56, 0x0c, 0xdb, 0x5a, 0x89, 0xe1, 0x29, 0x3a, 0xde, 0x94, 0x53, 0x5f, 0xee,
	0x1a, 0x77, 0xd8, 0xb8, 0xbb, 0x40, 0x3b, 0x67, 0x5f, 0xc7, 0xb7, 0xc8, 0x2d, 0xff, 0xc7, 0xeb,
	0x99, 0xa0, 0xb3, 0x26, 0xc8, 0x4c, 0xdb, 0x76, 0x05, 0xe2, 0x11, 0x72, 0x98, 0xc8, 0x3c, 0xd7,
	0xf0, 0xfd, 0x9a, 0x7f, 0x7d, 0x5b, 0xb4, 0xe1, 0x02, 0x79, 0x76, 0x51, 0x97, 0x69, 0x10, 0x1f,
	0xae, 0xf9, 0x8a, 0xfb, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x65, 0x38, 0x5e, 0xd0, 0xe1, 0x02,
	0x00, 0x00,
}
