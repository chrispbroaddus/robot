// Code generated by protoc-gen-go. DO NOT EDIT.
// source: packages/hal/proto/vcu_wheel_encoder_telemetry.proto

package hal

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import core "github.com/zippyai/zippy/packages/core/proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type VCUWheelID int32

const (
	VCUWheelID_LeftFrontWheel   VCUWheelID = 0
	VCUWheelID_LeftMiddleWheel  VCUWheelID = 1
	VCUWheelID_LeftRearWheel    VCUWheelID = 2
	VCUWheelID_RightFrontWheel  VCUWheelID = 3
	VCUWheelID_RightMiddleWheel VCUWheelID = 4
	VCUWheelID_RightRearWheel   VCUWheelID = 5
)

var VCUWheelID_name = map[int32]string{
	0: "LeftFrontWheel",
	1: "LeftMiddleWheel",
	2: "LeftRearWheel",
	3: "RightFrontWheel",
	4: "RightMiddleWheel",
	5: "RightRearWheel",
}
var VCUWheelID_value = map[string]int32{
	"LeftFrontWheel":   0,
	"LeftMiddleWheel":  1,
	"LeftRearWheel":    2,
	"RightFrontWheel":  3,
	"RightMiddleWheel": 4,
	"RightRearWheel":   5,
}

func (x VCUWheelID) String() string {
	return proto.EnumName(VCUWheelID_name, int32(x))
}
func (VCUWheelID) EnumDescriptor() ([]byte, []int) { return fileDescriptor33, []int{0} }

// / Describes odometry as reported by a single wheel encoder.
type VCUWheelEncoderTelemetry struct {
	// / HW timestamp describing when we started this odometry measurement.
	PeriodStartHardwareTimestamp *core.HardwareTimestamp `protobuf:"bytes,1,opt,name=periodStartHardwareTimestamp" json:"periodStartHardwareTimestamp,omitempty"`
	// / HW timestamp describing when we ended this odometry measurement.
	PeriodEndHardwareTimestamp *core.HardwareTimestamp `protobuf:"bytes,2,opt,name=periodEndHardwareTimestamp" json:"periodEndHardwareTimestamp,omitempty"`
	// / System timestamp at end of period
	PeriodEndSystemTimestamp *core.SystemTimestamp `protobuf:"bytes,3,opt,name=periodEndSystemTimestamp" json:"periodEndSystemTimestamp,omitempty"`
	// / Wheel for which we are reporting odometry.
	WheelID VCUWheelID `protobuf:"varint,4,opt,name=wheelID,enum=hal.VCUWheelID" json:"wheelID,omitempty"`
	// / The VCU's best guess as to the (signed) linear distance traveled by this wheel
	// / over this period.
	LinearDisplacementMeters float32 `protobuf:"fixed32,5,opt,name=linearDisplacementMeters" json:"linearDisplacementMeters,omitempty"`
	// / Number of microseconds of data which may have been dropped due to
	// / noise on Hall effect sensors.
	HallEffectNoiseMeasurementGapMicroseconds uint32 `protobuf:"fixed32,6,opt,name=hallEffectNoiseMeasurementGapMicroseconds" json:"hallEffectNoiseMeasurementGapMicroseconds,omitempty"`
}

func (m *VCUWheelEncoderTelemetry) Reset()                    { *m = VCUWheelEncoderTelemetry{} }
func (m *VCUWheelEncoderTelemetry) String() string            { return proto.CompactTextString(m) }
func (*VCUWheelEncoderTelemetry) ProtoMessage()               {}
func (*VCUWheelEncoderTelemetry) Descriptor() ([]byte, []int) { return fileDescriptor33, []int{0} }

func (m *VCUWheelEncoderTelemetry) GetPeriodStartHardwareTimestamp() *core.HardwareTimestamp {
	if m != nil {
		return m.PeriodStartHardwareTimestamp
	}
	return nil
}

func (m *VCUWheelEncoderTelemetry) GetPeriodEndHardwareTimestamp() *core.HardwareTimestamp {
	if m != nil {
		return m.PeriodEndHardwareTimestamp
	}
	return nil
}

func (m *VCUWheelEncoderTelemetry) GetPeriodEndSystemTimestamp() *core.SystemTimestamp {
	if m != nil {
		return m.PeriodEndSystemTimestamp
	}
	return nil
}

func (m *VCUWheelEncoderTelemetry) GetWheelID() VCUWheelID {
	if m != nil {
		return m.WheelID
	}
	return VCUWheelID_LeftFrontWheel
}

func (m *VCUWheelEncoderTelemetry) GetLinearDisplacementMeters() float32 {
	if m != nil {
		return m.LinearDisplacementMeters
	}
	return 0
}

func (m *VCUWheelEncoderTelemetry) GetHallEffectNoiseMeasurementGapMicroseconds() uint32 {
	if m != nil {
		return m.HallEffectNoiseMeasurementGapMicroseconds
	}
	return 0
}

func init() {
	proto.RegisterType((*VCUWheelEncoderTelemetry)(nil), "hal.VCUWheelEncoderTelemetry")
	proto.RegisterEnum("hal.VCUWheelID", VCUWheelID_name, VCUWheelID_value)
}

func init() {
	proto.RegisterFile("packages/hal/proto/vcu_wheel_encoder_telemetry.proto", fileDescriptor33)
}

var fileDescriptor33 = []byte{
	// 377 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x4f, 0x6f, 0xda, 0x30,
	0x18, 0xc6, 0x17, 0xc2, 0x1f, 0xc9, 0xd3, 0x80, 0x79, 0x9b, 0x16, 0xa1, 0x1d, 0xa2, 0xed, 0x12,
	0x76, 0x08, 0x12, 0xdb, 0xa9, 0xd7, 0x42, 0x5b, 0xa4, 0xa6, 0x52, 0x03, 0x2d, 0x87, 0x56, 0x42,
	0xae, 0xf3, 0x42, 0xac, 0x3a, 0x71, 0x64, 0x9b, 0x22, 0x3e, 0x41, 0xbf, 0x6a, 0x3f, 0x46, 0x15,
	0xa7, 0x01, 0x54, 0x04, 0xea, 0xf5, 0x79, 0x9e, 0xdf, 0x2f, 0xd1, 0x2b, 0xa3, 0xff, 0x19, 0xa1,
	0x8f, 0x64, 0x01, 0xaa, 0x17, 0x13, 0xde, 0xcb, 0xa4, 0xd0, 0xa2, 0xf7, 0x44, 0x97, 0xb3, 0x55,
	0x0c, 0xc0, 0x67, 0x90, 0x52, 0x11, 0x81, 0x9c, 0x69, 0xe0, 0x90, 0x80, 0x96, 0x6b, 0xdf, 0x2c,
	0xb0, 0x1d, 0x13, 0xde, 0xf9, 0xb3, 0x41, 0xa9, 0x90, 0xf0, 0xc6, 0x6a, 0x96, 0x80, 0xd2, 0x24,
	0xc9, 0x8a, 0xe5, 0xef, 0x17, 0x1b, 0x39, 0xb7, 0xa7, 0x37, 0xd3, 0x5c, 0x37, 0x2c, 0x6c, 0x93,
	0x52, 0x86, 0xef, 0xd0, 0xaf, 0x0c, 0x24, 0x13, 0xd1, 0x58, 0x13, 0xa9, 0x2f, 0x88, 0x8c, 0x56,
	0x44, 0xc2, 0xa4, 0x54, 0x38, 0x96, 0x6b, 0x79, 0x9f, 0xfb, 0x3f, 0xfd, 0xdc, 0xef, 0xef, 0xd5,
	0xe1, 0x51, 0x18, 0x4f, 0x51, 0xa7, 0xe8, 0x87, 0x69, 0xb4, 0xaf, 0xae, 0x1c, 0x57, 0x1f, 0x41,
	0xf1, 0x35, 0x72, 0x36, 0xed, 0x78, 0xad, 0x34, 0x24, 0x5b, 0xad, 0x6d, 0xb4, 0x3f, 0x0a, 0xed,
	0xbb, 0x32, 0x3c, 0x88, 0xe1, 0x2e, 0x6a, 0x98, 0x83, 0x8f, 0x06, 0x4e, 0xd5, 0xb5, 0xbc, 0x66,
	0xbf, 0xe5, 0xc7, 0x84, 0xfb, 0xe5, 0xe1, 0x46, 0x83, 0xb0, 0xec, 0xf1, 0x09, 0x72, 0x38, 0x4b,
	0x81, 0xc8, 0x01, 0x53, 0x19, 0x27, 0x14, 0x12, 0x48, 0x75, 0x00, 0x1a, 0xa4, 0x72, 0x6a, 0xae,
	0xe5, 0x55, 0xc2, 0x83, 0x3d, 0xbe, 0x47, 0xdd, 0x98, 0x70, 0x3e, 0x9c, 0xcf, 0x81, 0xea, 0x2b,
	0xc1, 0x14, 0x04, 0x40, 0xd4, 0x52, 0x9a, 0xcd, 0x39, 0xc9, 0x02, 0x46, 0xa5, 0x50, 0x40, 0x45,
	0x1a, 0x29, 0xa7, 0xee, 0x5a, 0x5e, 0x23, 0xfc, 0x38, 0xf0, 0xf7, 0xd9, 0x42, 0x68, 0xfb, 0xc7,
	0x18, 0xa3, 0xe6, 0x25, 0xcc, 0xf5, 0x99, 0x14, 0xa9, 0x36, 0x59, 0xfb, 0x13, 0xfe, 0x86, 0x5a,
	0x79, 0x16, 0xb0, 0x28, 0xe2, 0x50, 0x84, 0x16, 0xfe, 0x8a, 0xbe, 0xe4, 0x61, 0x08, 0x44, 0x16,
	0x51, 0x25, 0xdf, 0x85, 0x6c, 0x11, 0xef, 0xc2, 0x36, 0xfe, 0x8e, 0xda, 0x26, 0xdc, 0xa5, 0xab,
	0xf9, 0x67, 0x4c, 0xba, 0xc5, 0x6b, 0x0f, 0x75, 0xf3, 0xf6, 0xfe, 0xbd, 0x06, 0x00, 0x00, 0xff,
	0xff, 0x1d, 0xf1, 0x40, 0x3d, 0xdd, 0x02, 0x00, 0x00,
}
