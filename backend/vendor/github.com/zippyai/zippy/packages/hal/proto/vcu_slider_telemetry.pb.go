// Code generated by protoc-gen-go. DO NOT EDIT.
// source: packages/hal/proto/vcu_slider_telemetry.proto

package hal

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import core "github.com/zippyai/zippy/packages/core/proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type VCUSliderID int32

const (
	VCUSliderID_LeftRailSlider  VCUSliderID = 0
	VCUSliderID_RightRailSlider VCUSliderID = 1
)

var VCUSliderID_name = map[int32]string{
	0: "LeftRailSlider",
	1: "RightRailSlider",
}
var VCUSliderID_value = map[string]int32{
	"LeftRailSlider":  0,
	"RightRailSlider": 1,
}

func (x VCUSliderID) String() string {
	return proto.EnumName(VCUSliderID_name, int32(x))
}
func (VCUSliderID) EnumDescriptor() ([]byte, []int) { return fileDescriptor27, []int{0} }

// / Describes telemetry as reported by a single servo
type VCUSliderTelemetry struct {
	// / HW timestamp of when this measurement was made.
	MeasurementHardwareTimestamp *core.HardwareTimestamp `protobuf:"bytes,1,opt,name=measurementHardwareTimestamp" json:"measurementHardwareTimestamp,omitempty"`
	// / System timestamp of when this measurement was made. The VCU will make every reasonable
	// / effort to ensure that measuredHardwareTimestamp and measuredSystemTimestamp refer
	// / to the same instant in time.
	MeasurementSystemTimestamp *core.SystemTimestamp `protobuf:"bytes,2,opt,name=measurementSystemTimestamp" json:"measurementSystemTimestamp,omitempty"`
	// / Which slider we are reporting.
	SliderId VCUSliderID `protobuf:"varint,4,opt,name=sliderId,enum=hal.VCUSliderID" json:"sliderId,omitempty"`
	// / The total amount of the slider moved in the axis.
	PositionInMeters float32 `protobuf:"fixed32,5,opt,name=positionInMeters" json:"positionInMeters,omitempty"`
}

func (m *VCUSliderTelemetry) Reset()                    { *m = VCUSliderTelemetry{} }
func (m *VCUSliderTelemetry) String() string            { return proto.CompactTextString(m) }
func (*VCUSliderTelemetry) ProtoMessage()               {}
func (*VCUSliderTelemetry) Descriptor() ([]byte, []int) { return fileDescriptor27, []int{0} }

func (m *VCUSliderTelemetry) GetMeasurementHardwareTimestamp() *core.HardwareTimestamp {
	if m != nil {
		return m.MeasurementHardwareTimestamp
	}
	return nil
}

func (m *VCUSliderTelemetry) GetMeasurementSystemTimestamp() *core.SystemTimestamp {
	if m != nil {
		return m.MeasurementSystemTimestamp
	}
	return nil
}

func (m *VCUSliderTelemetry) GetSliderId() VCUSliderID {
	if m != nil {
		return m.SliderId
	}
	return VCUSliderID_LeftRailSlider
}

func (m *VCUSliderTelemetry) GetPositionInMeters() float32 {
	if m != nil {
		return m.PositionInMeters
	}
	return 0
}

func init() {
	proto.RegisterType((*VCUSliderTelemetry)(nil), "hal.VCUSliderTelemetry")
	proto.RegisterEnum("hal.VCUSliderID", VCUSliderID_name, VCUSliderID_value)
}

func init() { proto.RegisterFile("packages/hal/proto/vcu_slider_telemetry.proto", fileDescriptor27) }

var fileDescriptor27 = []byte{
	// 268 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x90, 0xc1, 0x4a, 0xf3, 0x40,
	0x14, 0x85, 0xff, 0xe4, 0x57, 0x91, 0x29, 0xd4, 0x30, 0x22, 0x86, 0xe2, 0x22, 0xe8, 0x26, 0x14,
	0x4d, 0xa0, 0x82, 0x2f, 0xa0, 0x0b, 0x03, 0xba, 0x99, 0xb6, 0x6e, 0x5c, 0x94, 0x6b, 0x72, 0x6d,
	0x06, 0x67, 0x32, 0x61, 0xe6, 0x56, 0xe9, 0xeb, 0xf8, 0xa4, 0x62, 0x62, 0x63, 0xb0, 0xd0, 0xed,
	0x39, 0xf7, 0xfb, 0xe0, 0x1e, 0x76, 0x55, 0x43, 0xfe, 0x06, 0x4b, 0x74, 0x69, 0x09, 0x2a, 0xad,
	0xad, 0x21, 0x93, 0xbe, 0xe7, 0xab, 0x85, 0x53, 0xb2, 0x40, 0xbb, 0x20, 0x54, 0xa8, 0x91, 0xec,
	0x3a, 0x69, 0x2a, 0xfe, 0xbf, 0x04, 0x35, 0xba, 0xe8, 0x98, 0xdc, 0x58, 0xfc, 0x81, 0x48, 0x6a,
	0x74, 0x04, 0xba, 0x6e, 0x2f, 0xcf, 0x3f, 0x7d, 0xc6, 0x9f, 0x6e, 0xe7, 0xd3, 0xc6, 0x33, 0xdb,
	0x68, 0xf8, 0x33, 0x3b, 0xd3, 0x08, 0x6e, 0x65, 0x51, 0x63, 0x45, 0xf7, 0x60, 0x8b, 0x0f, 0xb0,
	0x38, 0xdb, 0xc0, 0xa1, 0x17, 0x79, 0xf1, 0x60, 0x72, 0x9a, 0x7c, 0x9b, 0x93, 0xad, 0x5a, 0xec,
	0x84, 0xf9, 0x9c, 0x8d, 0x7a, 0xfd, 0x74, 0xed, 0x08, 0xf5, 0xaf, 0xda, 0x6f, 0xd4, 0x27, 0xad,
	0xfa, 0x4f, 0x29, 0x76, 0x80, 0xfc, 0x92, 0x1d, 0xb6, 0x73, 0x64, 0x45, 0xb8, 0x17, 0x79, 0xf1,
	0x70, 0x12, 0x24, 0x25, 0xa8, 0xa4, 0x7b, 0x2f, 0xbb, 0x13, 0xdd, 0x05, 0x1f, 0xb3, 0xa0, 0x36,
	0x4e, 0x92, 0x34, 0x55, 0x56, 0x3d, 0x22, 0xa1, 0x75, 0xe1, 0x7e, 0xe4, 0xc5, 0xbe, 0xd8, 0xca,
	0xc7, 0x37, 0x6c, 0xd0, 0x93, 0x70, 0xce, 0x86, 0x0f, 0xf8, 0x4a, 0x02, 0xa4, 0x6a, 0xb3, 0xe0,
	0x1f, 0x3f, 0x66, 0x47, 0x42, 0x2e, 0xcb, 0x7e, 0xe8, 0xbd, 0x1c, 0x34, 0x1b, 0x5f, 0x7f, 0x05,
	0x00, 0x00, 0xff, 0xff, 0xe2, 0x31, 0xe1, 0x40, 0xbe, 0x01, 0x00, 0x00,
}
