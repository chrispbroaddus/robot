// Code generated by protoc-gen-go. DO NOT EDIT.
// source: packages/hal/proto/vcu_suspension_encoder_telemetry.proto

package hal

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import core "github.com/zippyai/zippy/packages/core/proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// / Adam will fill this out :-)
type VCUSuspensionJointID int32

const (
	VCUSuspensionJointID_LeftFrontSuspensionJoint  VCUSuspensionJointID = 0
	VCUSuspensionJointID_LeftRearSuspensionJoint   VCUSuspensionJointID = 1
	VCUSuspensionJointID_RightFrontSuspensionJoint VCUSuspensionJointID = 2
	VCUSuspensionJointID_RightRearSuspensionJoint  VCUSuspensionJointID = 3
)

var VCUSuspensionJointID_name = map[int32]string{
	0: "LeftFrontSuspensionJoint",
	1: "LeftRearSuspensionJoint",
	2: "RightFrontSuspensionJoint",
	3: "RightRearSuspensionJoint",
}
var VCUSuspensionJointID_value = map[string]int32{
	"LeftFrontSuspensionJoint":  0,
	"LeftRearSuspensionJoint":   1,
	"RightFrontSuspensionJoint": 2,
	"RightRearSuspensionJoint":  3,
}

func (x VCUSuspensionJointID) String() string {
	return proto.EnumName(VCUSuspensionJointID_name, int32(x))
}
func (VCUSuspensionJointID) EnumDescriptor() ([]byte, []int) { return fileDescriptor30, []int{0} }

// / Describe telemetry as reported by a single suspension encoder.
type VCUSuspensionEncoderTelemetry struct {
	// / HW timestamp of when this measurement was made.
	MeasurementHardwareTimestamp *core.HardwareTimestamp `protobuf:"bytes,1,opt,name=measurementHardwareTimestamp" json:"measurementHardwareTimestamp,omitempty"`
	// / System timestamp of when this measurement was made. The VCU will make every reasonable
	// / effort to ensure that measuredHardwareTimestamp and measuredSystemTimestamp refer
	// / to the same instant in time.
	MeasurementSystemTimestamp *core.SystemTimestamp `protobuf:"bytes,2,opt,name=measurementSystemTimestamp" json:"measurementSystemTimestamp,omitempty"`
	// / Which servo we are reporting.
	JointId VCUSuspensionJointID `protobuf:"varint,4,opt,name=jointId,enum=hal.VCUSuspensionJointID" json:"jointId,omitempty"`
	// / The total deflection of the joint in radians. Adam will have to explain what 0, positive,
	// / and negative quantities mean.
	JointAngleRadians float32 `protobuf:"fixed32,5,opt,name=jointAngleRadians" json:"jointAngleRadians,omitempty"`
}

func (m *VCUSuspensionEncoderTelemetry) Reset()                    { *m = VCUSuspensionEncoderTelemetry{} }
func (m *VCUSuspensionEncoderTelemetry) String() string            { return proto.CompactTextString(m) }
func (*VCUSuspensionEncoderTelemetry) ProtoMessage()               {}
func (*VCUSuspensionEncoderTelemetry) Descriptor() ([]byte, []int) { return fileDescriptor30, []int{0} }

func (m *VCUSuspensionEncoderTelemetry) GetMeasurementHardwareTimestamp() *core.HardwareTimestamp {
	if m != nil {
		return m.MeasurementHardwareTimestamp
	}
	return nil
}

func (m *VCUSuspensionEncoderTelemetry) GetMeasurementSystemTimestamp() *core.SystemTimestamp {
	if m != nil {
		return m.MeasurementSystemTimestamp
	}
	return nil
}

func (m *VCUSuspensionEncoderTelemetry) GetJointId() VCUSuspensionJointID {
	if m != nil {
		return m.JointId
	}
	return VCUSuspensionJointID_LeftFrontSuspensionJoint
}

func (m *VCUSuspensionEncoderTelemetry) GetJointAngleRadians() float32 {
	if m != nil {
		return m.JointAngleRadians
	}
	return 0
}

func init() {
	proto.RegisterType((*VCUSuspensionEncoderTelemetry)(nil), "hal.VCUSuspensionEncoderTelemetry")
	proto.RegisterEnum("hal.VCUSuspensionJointID", VCUSuspensionJointID_name, VCUSuspensionJointID_value)
}

func init() {
	proto.RegisterFile("packages/hal/proto/vcu_suspension_encoder_telemetry.proto", fileDescriptor30)
}

var fileDescriptor30 = []byte{
	// 304 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0x4f, 0x4b, 0xfb, 0x30,
	0x1c, 0x87, 0x7f, 0xe9, 0x7e, 0x2a, 0x44, 0x10, 0x0d, 0xca, 0xba, 0xb9, 0xc1, 0xd0, 0xcb, 0x10,
	0xe9, 0x60, 0x3b, 0x79, 0x14, 0xff, 0xa0, 0xe2, 0x29, 0xdb, 0xbc, 0x78, 0x18, 0x5f, 0xdb, 0xaf,
	0x6b, 0xb5, 0x49, 0x4a, 0x92, 0x29, 0x7b, 0x13, 0xbe, 0x1c, 0x5f, 0x9f, 0x2c, 0xb5, 0x53, 0xbb,
	0xb2, 0x5b, 0xe0, 0xf9, 0x3c, 0x4f, 0x08, 0xa1, 0x67, 0x19, 0x84, 0xaf, 0x30, 0x45, 0xd3, 0x8b,
	0x21, 0xed, 0x65, 0x5a, 0x59, 0xd5, 0x7b, 0x0b, 0x67, 0x13, 0x33, 0x33, 0x19, 0x4a, 0x93, 0x28,
	0x39, 0x41, 0x19, 0xaa, 0x08, 0xf5, 0xc4, 0x62, 0x8a, 0x02, 0xad, 0x9e, 0x07, 0x6e, 0xc6, 0x6a,
	0x31, 0xa4, 0xcd, 0xe3, 0xa5, 0x1f, 0x2a, 0x8d, 0xdf, 0x01, 0x9b, 0x08, 0x34, 0x16, 0x44, 0x96,
	0x2f, 0x8f, 0x3e, 0x3d, 0xda, 0x7e, 0xb8, 0x18, 0x0f, 0x97, 0xcd, 0xab, 0x3c, 0x39, 0x2a, 0x8a,
	0xec, 0x91, 0xb6, 0x04, 0x82, 0x99, 0x69, 0x14, 0x28, 0xed, 0x0d, 0xe8, 0xe8, 0x1d, 0x34, 0x8e,
	0x8a, 0x8e, 0x4f, 0x3a, 0xa4, 0xbb, 0xdd, 0xaf, 0x07, 0x8b, 0x4b, 0x82, 0x15, 0xcc, 0xd7, 0xca,
	0x6c, 0x4c, 0x9b, 0xbf, 0xf8, 0x70, 0x6e, 0x2c, 0x8a, 0x9f, 0xb4, 0xe7, 0xd2, 0x07, 0x79, 0xba,
	0x04, 0xf9, 0x1a, 0x91, 0x0d, 0xe8, 0xd6, 0x8b, 0x4a, 0xa4, 0xbd, 0x8d, 0xfc, 0xff, 0x1d, 0xd2,
	0xdd, 0xe9, 0x37, 0x82, 0x18, 0xd2, 0xe0, 0xcf, 0x43, 0xef, 0xdc, 0xe0, 0x92, 0x17, 0x4b, 0x76,
	0x4a, 0xf7, 0xdc, 0xf1, 0x5c, 0x4e, 0x53, 0xe4, 0x10, 0x25, 0x20, 0x8d, 0xbf, 0xd1, 0x21, 0x5d,
	0x8f, 0xaf, 0x82, 0x93, 0x0f, 0x42, 0xf7, 0xab, 0x7a, 0xac, 0x45, 0xfd, 0x7b, 0x7c, 0xb6, 0xd7,
	0x5a, 0x49, 0x5b, 0xa2, 0xbb, 0xff, 0xd8, 0x21, 0xad, 0x2f, 0x28, 0x47, 0xd0, 0x65, 0x48, 0x58,
	0x9b, 0x36, 0x78, 0x32, 0x8d, 0xab, 0x5d, 0x6f, 0x51, 0x76, 0xb8, 0x4a, 0xae, 0x3d, 0x6d, 0xba,
	0x0f, 0x1d, 0x7c, 0x05, 0x00, 0x00, 0xff, 0xff, 0x13, 0x89, 0xcf, 0x51, 0x37, 0x02, 0x00, 0x00,
}
