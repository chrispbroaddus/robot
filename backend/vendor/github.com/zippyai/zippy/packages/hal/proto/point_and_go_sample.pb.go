// Code generated by protoc-gen-go. DO NOT EDIT.
// source: packages/hal/proto/point_and_go_sample.proto

package hal

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import core "github.com/zippyai/zippy/packages/core/proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type PointAndGoSample struct {
	// / Where did this stimulus to the system originate? This should refer to a
	// / specific *teleoperator*
	// /
	// / Temporarily, this will always be populated as:
	// / { name: "Teleoperator", serialNumber: 1 }
	// /
	// / until it becomes clear how to "properly" deal with the serial number.
	OriginatorDevice *Device `protobuf:"bytes,1,opt,name=originatorDevice" json:"originatorDevice,omitempty"`
	// / Teleoperator client's best guess as to when this stimulus was generated.
	// / This can be used to order messages from a single teleoperator during a
	// / single session but that is about all.
	OriginatorSystemTimestamp *core.SystemTimestamp `protobuf:"bytes,2,opt,name=originatorSystemTimestamp" json:"originatorSystemTimestamp,omitempty"`
	// / Device which generated the original stimulus to which this P&G sample is
	// / a response.
	SourceDevice *Device `protobuf:"bytes,3,opt,name=sourceDevice" json:"sourceDevice,omitempty"`
	// / System timestamp of the original stimulus to which this P&G sample is a
	// / a response.
	SourceSystemTimestamp *core.SystemTimestamp `protobuf:"bytes,4,opt,name=sourceSystemTimestamp" json:"sourceSystemTimestamp,omitempty"`
	// / As measured from the top left, x increasing left to right, y increasing
	// / top to bottom, the relative location of the operator's click in the X
	// / direction. Always in the range [0, 1]
	ClickXFraction float32 `protobuf:"fixed32,5,opt,name=clickXFraction" json:"clickXFraction,omitempty"`
	// / As measured from the top left, x increasing left to right, y increasing
	// / top to bottom, the relative location of the operator's click in the Y
	// / direction. Always in the range [0, 1]
	ClickYFaction float32 `protobuf:"fixed32,6,opt,name=clickYFaction" json:"clickYFaction,omitempty"`
}

func (m *PointAndGoSample) Reset()                    { *m = PointAndGoSample{} }
func (m *PointAndGoSample) String() string            { return proto.CompactTextString(m) }
func (*PointAndGoSample) ProtoMessage()               {}
func (*PointAndGoSample) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{0} }

func (m *PointAndGoSample) GetOriginatorDevice() *Device {
	if m != nil {
		return m.OriginatorDevice
	}
	return nil
}

func (m *PointAndGoSample) GetOriginatorSystemTimestamp() *core.SystemTimestamp {
	if m != nil {
		return m.OriginatorSystemTimestamp
	}
	return nil
}

func (m *PointAndGoSample) GetSourceDevice() *Device {
	if m != nil {
		return m.SourceDevice
	}
	return nil
}

func (m *PointAndGoSample) GetSourceSystemTimestamp() *core.SystemTimestamp {
	if m != nil {
		return m.SourceSystemTimestamp
	}
	return nil
}

func (m *PointAndGoSample) GetClickXFraction() float32 {
	if m != nil {
		return m.ClickXFraction
	}
	return 0
}

func (m *PointAndGoSample) GetClickYFaction() float32 {
	if m != nil {
		return m.ClickYFaction
	}
	return 0
}

func init() {
	proto.RegisterType((*PointAndGoSample)(nil), "hal.PointAndGoSample")
}

func init() { proto.RegisterFile("packages/hal/proto/point_and_go_sample.proto", fileDescriptor9) }

var fileDescriptor9 = []byte{
	// 262 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x90, 0x41, 0x4b, 0xc3, 0x30,
	0x14, 0xc7, 0x69, 0xa7, 0x3b, 0x64, 0x2a, 0x23, 0x30, 0xa8, 0xbb, 0x38, 0x54, 0x64, 0x07, 0x49,
	0x41, 0x0f, 0x9e, 0x05, 0x99, 0x07, 0x2f, 0xd2, 0x7a, 0xd0, 0x53, 0x79, 0xa6, 0xa1, 0x0d, 0x4b,
	0xf3, 0x42, 0x12, 0x05, 0xbf, 0xb3, 0x1f, 0x42, 0x96, 0x56, 0x65, 0x5d, 0xf5, 0x98, 0xff, 0xfb,
	0xbd, 0xf7, 0xff, 0x11, 0x72, 0x69, 0x80, 0xaf, 0xa1, 0x12, 0x2e, 0xad, 0x41, 0xa5, 0xc6, 0xa2,
	0xc7, 0xd4, 0xa0, 0xd4, 0xbe, 0x00, 0x5d, 0x16, 0x15, 0x16, 0x0e, 0x1a, 0xa3, 0x04, 0x0b, 0x13,
	0x3a, 0xaa, 0x41, 0xcd, 0x4f, 0x06, 0x56, 0x4a, 0xf1, 0x2e, 0x79, 0x47, 0xcd, 0xcf, 0x7e, 0x00,
	0x8e, 0x56, 0x74, 0x84, 0x97, 0x8d, 0x70, 0x1e, 0x1a, 0xd3, 0x42, 0xa7, 0x9f, 0x31, 0x99, 0x3e,
	0x6e, 0x8a, 0x6e, 0x75, 0x79, 0x8f, 0x79, 0x68, 0xa1, 0x37, 0x64, 0x8a, 0x56, 0x56, 0x52, 0x83,
	0x47, 0x7b, 0x17, 0x6e, 0x26, 0xd1, 0x22, 0x5a, 0x4e, 0xae, 0x26, 0xac, 0x06, 0xc5, 0xda, 0x28,
	0xdb, 0x81, 0x68, 0x4e, 0x8e, 0x7f, 0xb3, 0xfc, 0xc3, 0x79, 0xd1, 0x3c, 0x7d, 0x17, 0x26, 0x71,
	0xb8, 0x30, 0x63, 0x1b, 0x1b, 0xd6, 0x1b, 0x66, 0x7f, 0xef, 0xd1, 0x94, 0x1c, 0x38, 0x7c, 0xb3,
	0x5c, 0x74, 0x26, 0xa3, 0x5d, 0x93, 0x2d, 0x80, 0x3e, 0x90, 0x59, 0xfb, 0xee, 0x1b, 0xec, 0xfd,
	0x67, 0x30, 0xbc, 0x43, 0x2f, 0xc8, 0x11, 0x57, 0x92, 0xaf, 0x9f, 0x57, 0x16, 0xb8, 0x97, 0xa8,
	0x93, 0xfd, 0x45, 0xb4, 0x8c, 0xb3, 0x5e, 0x4a, 0xcf, 0xc9, 0x61, 0x48, 0x5e, 0x56, 0x1d, 0x36,
	0x0e, 0xd8, 0x76, 0xf8, 0x3a, 0x0e, 0xbf, 0x7e, 0xfd, 0x15, 0x00, 0x00, 0xff, 0xff, 0xe7, 0xf5,
	0xbe, 0xba, 0xf0, 0x01, 0x00, 0x00,
}
