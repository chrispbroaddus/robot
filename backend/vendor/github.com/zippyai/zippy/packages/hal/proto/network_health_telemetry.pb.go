// Code generated by protoc-gen-go. DO NOT EDIT.
// source: packages/hal/proto/network_health_telemetry.proto

package hal

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import core "github.com/zippyai/zippy/packages/core/proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// /
// / Per-network-interface statistics
// /
type NetworkInterfaceStatistics struct {
	Ipv4Addresses   []string `protobuf:"bytes,1,rep,name=ipv4_addresses,json=ipv4Addresses" json:"ipv4_addresses,omitempty"`
	Ipv6Addresses   []string `protobuf:"bytes,2,rep,name=ipv6_addresses,json=ipv6Addresses" json:"ipv6_addresses,omitempty"`
	TransmitPackets uint64   `protobuf:"varint,3,opt,name=transmit_packets,json=transmitPackets" json:"transmit_packets,omitempty"`
	ReceivePackets  uint64   `protobuf:"varint,4,opt,name=receive_packets,json=receivePackets" json:"receive_packets,omitempty"`
	TransmitBytes   uint64   `protobuf:"varint,5,opt,name=transmit_bytes,json=transmitBytes" json:"transmit_bytes,omitempty"`
	ReceiveBytes    uint64   `protobuf:"varint,6,opt,name=receive_bytes,json=receiveBytes" json:"receive_bytes,omitempty"`
	TransmitErrors  uint64   `protobuf:"varint,7,opt,name=transmit_errors,json=transmitErrors" json:"transmit_errors,omitempty"`
	ReceiveErrors   uint64   `protobuf:"varint,8,opt,name=receive_errors,json=receiveErrors" json:"receive_errors,omitempty"`
}

func (m *NetworkInterfaceStatistics) Reset()                    { *m = NetworkInterfaceStatistics{} }
func (m *NetworkInterfaceStatistics) String() string            { return proto.CompactTextString(m) }
func (*NetworkInterfaceStatistics) ProtoMessage()               {}
func (*NetworkInterfaceStatistics) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{0} }

func (m *NetworkInterfaceStatistics) GetIpv4Addresses() []string {
	if m != nil {
		return m.Ipv4Addresses
	}
	return nil
}

func (m *NetworkInterfaceStatistics) GetIpv6Addresses() []string {
	if m != nil {
		return m.Ipv6Addresses
	}
	return nil
}

func (m *NetworkInterfaceStatistics) GetTransmitPackets() uint64 {
	if m != nil {
		return m.TransmitPackets
	}
	return 0
}

func (m *NetworkInterfaceStatistics) GetReceivePackets() uint64 {
	if m != nil {
		return m.ReceivePackets
	}
	return 0
}

func (m *NetworkInterfaceStatistics) GetTransmitBytes() uint64 {
	if m != nil {
		return m.TransmitBytes
	}
	return 0
}

func (m *NetworkInterfaceStatistics) GetReceiveBytes() uint64 {
	if m != nil {
		return m.ReceiveBytes
	}
	return 0
}

func (m *NetworkInterfaceStatistics) GetTransmitErrors() uint64 {
	if m != nil {
		return m.TransmitErrors
	}
	return 0
}

func (m *NetworkInterfaceStatistics) GetReceiveErrors() uint64 {
	if m != nil {
		return m.ReceiveErrors
	}
	return 0
}

// /
// / Ping statistics
// /
type NetworkPingStatistics struct {
	// / Which host we attempted to ping
	TargetHost string `protobuf:"bytes,1,opt,name=target_host,json=targetHost" json:"target_host,omitempty"`
	// / How many times we attempted to resolve the host name
	ResolveAttempts int32 `protobuf:"varint,2,opt,name=resolve_attempts,json=resolveAttempts" json:"resolve_attempts,omitempty"`
	// / How many times we succeeded at resolving the host name.
	ResolveSuccesses int32 `protobuf:"varint,3,opt,name=resolve_successes,json=resolveSuccesses" json:"resolve_successes,omitempty"`
	// / How many ICMP echo packets we sent. If there were no successful resolves, this will be zero.
	PingTransmit int32 `protobuf:"varint,4,opt,name=ping_transmit,json=pingTransmit" json:"ping_transmit,omitempty"`
	// / How many ICMP echo packets we received. If there were no successful resolves, this will be zero.
	PingReceive int32 `protobuf:"varint,5,opt,name=ping_receive,json=pingReceive" json:"ping_receive,omitempty"`
	// / Average round-trip time. If there were no successful ping receives, this will be -1
	AverageRoundTripTimeSeconds float32 `protobuf:"fixed32,6,opt,name=average_round_trip_time_seconds,json=averageRoundTripTimeSeconds" json:"average_round_trip_time_seconds,omitempty"`
	// / Variance of round trip time.
	// / If there were fewer than two successful round trips, this will be zero.
	VarianceRoundTripTimeSeconds float32 `protobuf:"fixed32,7,opt,name=variance_round_trip_time_seconds,json=varianceRoundTripTimeSeconds" json:"variance_round_trip_time_seconds,omitempty"`
	// / If there were no successful ping receives, this will be -1
	MaximumRoundTripTimeSeconds float32 `protobuf:"fixed32,8,opt,name=maximum_round_trip_time_seconds,json=maximumRoundTripTimeSeconds" json:"maximum_round_trip_time_seconds,omitempty"`
}

func (m *NetworkPingStatistics) Reset()                    { *m = NetworkPingStatistics{} }
func (m *NetworkPingStatistics) String() string            { return proto.CompactTextString(m) }
func (*NetworkPingStatistics) ProtoMessage()               {}
func (*NetworkPingStatistics) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{1} }

func (m *NetworkPingStatistics) GetTargetHost() string {
	if m != nil {
		return m.TargetHost
	}
	return ""
}

func (m *NetworkPingStatistics) GetResolveAttempts() int32 {
	if m != nil {
		return m.ResolveAttempts
	}
	return 0
}

func (m *NetworkPingStatistics) GetResolveSuccesses() int32 {
	if m != nil {
		return m.ResolveSuccesses
	}
	return 0
}

func (m *NetworkPingStatistics) GetPingTransmit() int32 {
	if m != nil {
		return m.PingTransmit
	}
	return 0
}

func (m *NetworkPingStatistics) GetPingReceive() int32 {
	if m != nil {
		return m.PingReceive
	}
	return 0
}

func (m *NetworkPingStatistics) GetAverageRoundTripTimeSeconds() float32 {
	if m != nil {
		return m.AverageRoundTripTimeSeconds
	}
	return 0
}

func (m *NetworkPingStatistics) GetVarianceRoundTripTimeSeconds() float32 {
	if m != nil {
		return m.VarianceRoundTripTimeSeconds
	}
	return 0
}

func (m *NetworkPingStatistics) GetMaximumRoundTripTimeSeconds() float32 {
	if m != nil {
		return m.MaximumRoundTripTimeSeconds
	}
	return 0
}

// /
// / Overall network health statistics
// /
type NetworkHealthTelemetry struct {
	// / When we started this health test
	MeasurementStartSystemTimestamp *core.SystemTimestamp `protobuf:"bytes,1,opt,name=measurement_start_system_timestamp,json=measurementStartSystemTimestamp" json:"measurement_start_system_timestamp,omitempty"`
	// / When we completed this health test
	MeasurementEndSystemTimestamp *core.SystemTimestamp `protobuf:"bytes,2,opt,name=measurement_end_system_timestamp,json=measurementEndSystemTimestamp" json:"measurement_end_system_timestamp,omitempty"`
	// / Canonical host name
	CanonicalHostHame string `protobuf:"bytes,3,opt,name=canonical_host_hame,json=canonicalHostHame" json:"canonical_host_hame,omitempty"`
	// / IPv4 statistics. This is always attempted.
	Ipv4Statistics *NetworkPingStatistics `protobuf:"bytes,4,opt,name=ipv4_statistics,json=ipv4Statistics" json:"ipv4_statistics,omitempty"`
	// / IPv6 statistics. This is only attmepted if v4 failed.
	Ipv6Statistics *NetworkPingStatistics `protobuf:"bytes,5,opt,name=ipv6_statistics,json=ipv6Statistics" json:"ipv6_statistics,omitempty"`
	// / Per-interface statistics
	PerInterfaceStatistics map[string]*NetworkInterfaceStatistics `protobuf:"bytes,6,rep,name=per_interface_statistics,json=perInterfaceStatistics" json:"per_interface_statistics,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *NetworkHealthTelemetry) Reset()                    { *m = NetworkHealthTelemetry{} }
func (m *NetworkHealthTelemetry) String() string            { return proto.CompactTextString(m) }
func (*NetworkHealthTelemetry) ProtoMessage()               {}
func (*NetworkHealthTelemetry) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{2} }

func (m *NetworkHealthTelemetry) GetMeasurementStartSystemTimestamp() *core.SystemTimestamp {
	if m != nil {
		return m.MeasurementStartSystemTimestamp
	}
	return nil
}

func (m *NetworkHealthTelemetry) GetMeasurementEndSystemTimestamp() *core.SystemTimestamp {
	if m != nil {
		return m.MeasurementEndSystemTimestamp
	}
	return nil
}

func (m *NetworkHealthTelemetry) GetCanonicalHostHame() string {
	if m != nil {
		return m.CanonicalHostHame
	}
	return ""
}

func (m *NetworkHealthTelemetry) GetIpv4Statistics() *NetworkPingStatistics {
	if m != nil {
		return m.Ipv4Statistics
	}
	return nil
}

func (m *NetworkHealthTelemetry) GetIpv6Statistics() *NetworkPingStatistics {
	if m != nil {
		return m.Ipv6Statistics
	}
	return nil
}

func (m *NetworkHealthTelemetry) GetPerInterfaceStatistics() map[string]*NetworkInterfaceStatistics {
	if m != nil {
		return m.PerInterfaceStatistics
	}
	return nil
}

func init() {
	proto.RegisterType((*NetworkInterfaceStatistics)(nil), "hal.NetworkInterfaceStatistics")
	proto.RegisterType((*NetworkPingStatistics)(nil), "hal.NetworkPingStatistics")
	proto.RegisterType((*NetworkHealthTelemetry)(nil), "hal.NetworkHealthTelemetry")
}

func init() { proto.RegisterFile("packages/hal/proto/network_health_telemetry.proto", fileDescriptor8) }

var fileDescriptor8 = []byte{
	// 680 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0xdd, 0x6e, 0x13, 0x3b,
	0x10, 0xc7, 0x95, 0xa4, 0xe9, 0x87, 0xd3, 0x36, 0xed, 0x1e, 0xb5, 0x8a, 0xd2, 0x73, 0x94, 0x9c,
	0x54, 0x55, 0x73, 0x74, 0xa4, 0x54, 0x14, 0x08, 0x88, 0xbb, 0x42, 0x8b, 0xca, 0x0d, 0xaa, 0x36,
	0xb9, 0xc6, 0x72, 0x37, 0x43, 0x62, 0xba, 0xf6, 0x2e, 0xf6, 0x24, 0x90, 0x77, 0xe2, 0x89, 0x78,
	0x0f, 0xee, 0x91, 0xbf, 0x96, 0x55, 0x49, 0x2b, 0xee, 0x92, 0xff, 0xfc, 0xe6, 0x3f, 0xde, 0xf1,
	0x8c, 0xc9, 0x93, 0x9c, 0x25, 0x77, 0x6c, 0x0a, 0xfa, 0x6c, 0xc6, 0xd2, 0xb3, 0x5c, 0x65, 0x98,
	0x9d, 0x49, 0xc0, 0x2f, 0x99, 0xba, 0xa3, 0x33, 0x60, 0x29, 0xce, 0x28, 0x42, 0x0a, 0x02, 0x50,
	0x2d, 0x07, 0x36, 0x1c, 0xd5, 0x66, 0x2c, 0x6d, 0x1f, 0x17, 0x79, 0x49, 0xa6, 0xc0, 0x27, 0x22,
	0x17, 0xa0, 0x91, 0x89, 0xdc, 0x91, 0xbd, 0xef, 0x55, 0xd2, 0x7e, 0xef, 0xcc, 0xde, 0x49, 0x04,
	0xf5, 0x91, 0x25, 0x30, 0x42, 0x86, 0x5c, 0x23, 0x4f, 0x74, 0x74, 0x42, 0x76, 0x79, 0xbe, 0x78,
	0x46, 0xd9, 0x64, 0xa2, 0x40, 0x6b, 0xd0, 0xad, 0x4a, 0xb7, 0xd6, 0xdf, 0x8a, 0x77, 0x8c, 0x7a,
	0x11, 0x44, 0x8f, 0x0d, 0x4b, 0x58, 0xb5, 0xc0, 0x86, 0xbf, 0xb0, 0xff, 0xc8, 0x1e, 0x2a, 0x26,
	0xb5, 0xe0, 0x48, 0xcd, 0xe1, 0x00, 0x75, 0xab, 0xd6, 0xad, 0xf4, 0xd7, 0xe2, 0x66, 0xd0, 0x6f,
	0x9c, 0x1c, 0x9d, 0x92, 0xa6, 0x82, 0x04, 0xf8, 0x02, 0x0a, 0x72, 0xcd, 0x92, 0xbb, 0x5e, 0x0e,
	0xe0, 0x09, 0xd9, 0x2d, 0x3c, 0x6f, 0x97, 0x08, 0xba, 0x55, 0xb7, 0xdc, 0x4e, 0x50, 0x5f, 0x1b,
	0x31, 0x3a, 0x26, 0x3b, 0xc1, 0xcf, 0x51, 0xeb, 0x96, 0xda, 0xf6, 0xa2, 0x83, 0x4e, 0x49, 0x71,
	0x0e, 0x0a, 0x4a, 0x65, 0x4a, 0xb7, 0x36, 0x5c, 0xd1, 0x20, 0x5f, 0x59, 0xd5, 0x14, 0x0d, 0x6e,
	0x9e, 0xdb, 0x74, 0x45, 0xbd, 0xea, 0xb0, 0xde, 0xb7, 0x1a, 0x39, 0xf0, 0xcd, 0xbd, 0xe1, 0x72,
	0x5a, 0xea, 0x6b, 0x87, 0x34, 0x90, 0xa9, 0x29, 0x20, 0x9d, 0x65, 0x1a, 0x5b, 0x95, 0x6e, 0xa5,
	0xbf, 0x15, 0x13, 0x27, 0x5d, 0x67, 0x1a, 0x4d, 0xab, 0x14, 0xe8, 0x2c, 0x5d, 0x00, 0x65, 0x88,
	0x20, 0x72, 0x34, 0x3d, 0xad, 0xf4, 0xeb, 0x71, 0xd3, 0xeb, 0x17, 0x5e, 0x8e, 0xfe, 0x27, 0xfb,
	0x01, 0xd5, 0xf3, 0x24, 0x71, 0xfd, 0xaf, 0x59, 0x36, 0x78, 0x8c, 0x82, 0x6e, 0xfa, 0x90, 0x73,
	0x39, 0xa5, 0xe1, 0x83, 0x6c, 0x57, 0xeb, 0xf1, 0xb6, 0x11, 0xc7, 0x5e, 0x8b, 0xfe, 0x25, 0xf6,
	0x3f, 0xf5, 0x5f, 0x63, 0x3b, 0x5a, 0x8f, 0x1b, 0x46, 0x8b, 0x9d, 0x14, 0x5d, 0x92, 0x0e, 0x5b,
	0x80, 0x62, 0x53, 0xa0, 0x2a, 0x9b, 0xcb, 0x09, 0x45, 0xc5, 0x73, 0x6a, 0xa6, 0x8b, 0x6a, 0x48,
	0x32, 0x39, 0x71, 0x1d, 0xae, 0xc6, 0x47, 0x1e, 0x8b, 0x0d, 0x35, 0x56, 0x3c, 0x1f, 0x73, 0x01,
	0x23, 0x87, 0x44, 0x6f, 0x49, 0x77, 0xc1, 0x14, 0x67, 0x32, 0x79, 0xd8, 0x66, 0xc3, 0xda, 0xfc,
	0x1d, 0xb8, 0x95, 0x3e, 0x97, 0xa4, 0x23, 0xd8, 0x57, 0x2e, 0xe6, 0xe2, 0x41, 0x9b, 0x4d, 0x77,
	0x1a, 0x8f, 0xad, 0x72, 0xe9, 0xfd, 0x58, 0x23, 0x87, 0xfe, 0xba, 0xae, 0xed, 0x5e, 0x8d, 0xc3,
	0x5a, 0x45, 0xb7, 0xa4, 0x27, 0x80, 0xe9, 0xb9, 0x02, 0x01, 0x12, 0xa9, 0x46, 0xa6, 0x90, 0xea,
	0xa5, 0x46, 0x10, 0xb4, 0x58, 0x29, 0x7b, 0x8d, 0x8d, 0xf3, 0x83, 0x81, 0xd9, 0xb7, 0xc1, 0xc8,
	0x46, 0xc7, 0x21, 0x18, 0x77, 0x4a, 0x06, 0x23, 0x93, 0x7f, 0x0f, 0x88, 0x3e, 0x90, 0x6e, 0xb9,
	0x06, 0xc8, 0xc9, 0xef, 0x15, 0xaa, 0x8f, 0x55, 0xf8, 0xa7, 0x94, 0x7e, 0x25, 0x27, 0xf7, 0xfd,
	0x07, 0xe4, 0xaf, 0x84, 0xc9, 0x4c, 0xf2, 0x84, 0xa5, 0x76, 0xec, 0xe8, 0x8c, 0x09, 0xb0, 0x93,
	0xb2, 0x15, 0xef, 0x17, 0x21, 0x33, 0x7e, 0xd7, 0x4c, 0x40, 0xf4, 0x86, 0x34, 0xed, 0xee, 0xeb,
	0x62, 0x6c, 0xed, 0xb0, 0x34, 0xce, 0xdb, 0x83, 0x19, 0x4b, 0x07, 0x2b, 0x07, 0x3b, 0xb6, 0xcf,
	0x45, 0x69, 0xd0, 0x9d, 0xc9, 0xb0, 0x6c, 0x52, 0xff, 0x23, 0x93, 0x61, 0xc9, 0xe4, 0x33, 0x69,
	0xe5, 0xa0, 0x28, 0x0f, 0x0f, 0x54, 0xd9, 0x6d, 0xbd, 0x5b, 0xeb, 0x37, 0xce, 0x5f, 0x94, 0xdd,
	0xee, 0x5d, 0xde, 0xe0, 0x06, 0xd4, 0x8a, 0xb7, 0xed, 0x4a, 0xa2, 0x5a, 0xc6, 0x87, 0xf9, 0xca,
	0x60, 0xfb, 0x13, 0x39, 0x7a, 0x24, 0x2d, 0xda, 0x23, 0xb5, 0x3b, 0x58, 0xfa, 0xbd, 0x35, 0x3f,
	0xa3, 0xe7, 0xa4, 0xbe, 0x60, 0xe9, 0x1c, 0xfc, 0x15, 0x75, 0xca, 0x07, 0x5a, 0x61, 0x13, 0x3b,
	0xfa, 0x55, 0xf5, 0x65, 0xe5, 0x76, 0xdd, 0x3e, 0xc5, 0x4f, 0x7f, 0x06, 0x00, 0x00, 0xff, 0xff,
	0x9e, 0x00, 0x73, 0x2c, 0xe9, 0x05, 0x00, 0x00,
}
