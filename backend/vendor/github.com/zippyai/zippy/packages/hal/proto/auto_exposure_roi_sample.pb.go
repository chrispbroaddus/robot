// Code generated by protoc-gen-go. DO NOT EDIT.
// source: packages/hal/proto/auto_exposure_roi_sample.proto

/*
Package hal is a generated protocol buffer package.

It is generated from these files:
	packages/hal/proto/auto_exposure_roi_sample.proto
	packages/hal/proto/camera_id.proto
	packages/hal/proto/camera_sample.proto
	packages/hal/proto/coordinate_frame_id.proto
	packages/hal/proto/device.proto
	packages/hal/proto/gps_telemetry.proto
	packages/hal/proto/imu_sample.proto
	packages/hal/proto/joystick_sample.proto
	packages/hal/proto/network_health_telemetry.proto
	packages/hal/proto/point_and_go_sample.proto
	packages/hal/proto/simulator_camera_command.proto
	packages/hal/proto/simulator_camera_output.proto
	packages/hal/proto/simulator_camera_response.proto
	packages/hal/proto/simulator_command_envelope.proto
	packages/hal/proto/simulator_command_response.proto
	packages/hal/proto/simulator_reset_command.proto
	packages/hal/proto/simulator_reset_response.proto
	packages/hal/proto/simulator_stats_command.proto
	packages/hal/proto/simulator_stats_response.proto
	packages/hal/proto/simulator_stats_telemetry.proto
	packages/hal/proto/vcu_command_envelope.proto
	packages/hal/proto/vcu_command_response.proto
	packages/hal/proto/vcu_emergency_stop_command.proto
	packages/hal/proto/vcu_idle_command.proto
	packages/hal/proto/vcu_ik_control_command.proto
	packages/hal/proto/vcu_imu_telemetry.proto
	packages/hal/proto/vcu_servo_telemetry.proto
	packages/hal/proto/vcu_slider_telemetry.proto
	packages/hal/proto/vcu_status_request.proto
	packages/hal/proto/vcu_status_response.proto
	packages/hal/proto/vcu_suspension_encoder_telemetry.proto
	packages/hal/proto/vcu_telemetry_envelope.proto
	packages/hal/proto/vcu_trajectory_command.proto
	packages/hal/proto/vcu_wheel_encoder_telemetry.proto
	packages/hal/proto/vehicle_telemetry_sample.proto

It has these top-level messages:
	AutoExposureRoiCommand
	AutoExposureRoiResponse
	ImageInfoMsg
	Image
	CameraSample
	Device
	GPSTelemetry
	IMUSample
	JoystickSample
	NetworkInterfaceStatistics
	NetworkPingStatistics
	NetworkHealthTelemetry
	PointAndGoSample
	SimulatorCameraCommand
	SimulatorCameraOutput
	SimulatorCameraResponse
	SimulatorCommandEnvelope
	SimulatorCommandResponse
	SimulatorResetCommand
	SimulatorResetResponse
	SimulatorStatsCommand
	SimulatorStatsResponse
	SimulatorStatsTelemetry
	VCUCommandEnvelope
	VCUCommandResponse
	VCUEmergencyStopCommand
	VCUIdleCommand
	VCUIKControlSegment
	VCUIKControlCommand
	VCUIMUFrame
	VCUIMUTelemetry
	VCUServoTelemetry
	VCUSliderTelemetry
	VCUStatusRequest
	VCUStatusUnknown
	VCUStatusVersion
	VCUStatusBoot
	VCUStatusResponse
	VCUSuspensionEncoderTelemetry
	VCUTelemetryEnvelope
	VCUArcDriveSegment
	VCUTurnInPlaceSegment
	VCUTrajectorySegment
	VCUTrajectoryCommand
	VCUWheelEncoderTelemetry
	VehicleTelemetrySample
*/
package hal

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import core "github.com/zippyai/zippy/packages/core/proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// / Disposition of a AE command request.
type AECommandDisposition int32

const (
	// / The command was rejected
	AECommandDisposition_AERoICommandRejected AECommandDisposition = 0
	// / The command has completed
	AECommandDisposition_AERoICommandCompleted AECommandDisposition = 1
)

var AECommandDisposition_name = map[int32]string{
	0: "AERoICommandRejected",
	1: "AERoICommandCompleted",
}
var AECommandDisposition_value = map[string]int32{
	"AERoICommandRejected":  0,
	"AERoICommandCompleted": 1,
}

func (x AECommandDisposition) String() string {
	return proto.EnumName(AECommandDisposition_name, int32(x))
}
func (AECommandDisposition) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type AutoExposureRoiCommand struct {
	// / Where did this stimulus to the system originate? This should refer to a
	// / specific *teleoperator*
	// /
	// / Temporarily, this will always be populated as:
	// / { name: "Teleoperator", serialNumber: 1 }
	// /
	// / until it becomes clear how to "properly" deal with the serial number.
	OriginatorDevice *Device `protobuf:"bytes,1,opt,name=originator_device,json=originatorDevice" json:"originator_device,omitempty"`
	// / Teleoperator client's best guess as to when this stimulus was generated.
	// / This can be used to order messages from a single teleoperator during a
	// / single session but that is about all.
	OriginatorSystemTimestamp *core.SystemTimestamp `protobuf:"bytes,2,opt,name=originator_system_timestamp,json=originatorSystemTimestamp" json:"originator_system_timestamp,omitempty"`
	// / Device which generated the original stimulus to which this P&G sample is
	// / a response.
	SourceDevice *Device `protobuf:"bytes,3,opt,name=source_device,json=sourceDevice" json:"source_device,omitempty"`
	// / System timestamp of the original stimulus to which this P&G sample is a
	// / a response.
	SourceSystemTimestamp *core.SystemTimestamp `protobuf:"bytes,4,opt,name=source_system_timestamp,json=sourceSystemTimestamp" json:"source_system_timestamp,omitempty"`
	// / As measured from the top left, x increasing left to right, y increasing
	// / top to bottom, the relative location of the operator's click in the X
	// / direction. Always in the range [0, 1]
	ClickXFraction float32 `protobuf:"fixed32,5,opt,name=click_x_fraction,json=clickXFraction" json:"click_x_fraction,omitempty"`
	// / As measured from the top left, x increasing left to right, y increasing
	// / top to bottom, the relative location of the operator's click in the Y
	// / direction. Always in the range [0, 1]
	ClickYFraction float32 `protobuf:"fixed32,6,opt,name=click_y_fraction,json=clickYFraction" json:"click_y_fraction,omitempty"`
	// / The radius of the roi as a fraction of the image width.
	// / Always in the range [0, 1]
	RadiusFraction float32 `protobuf:"fixed32,7,opt,name=radius_fraction,json=radiusFraction" json:"radius_fraction,omitempty"`
}

func (m *AutoExposureRoiCommand) Reset()                    { *m = AutoExposureRoiCommand{} }
func (m *AutoExposureRoiCommand) String() string            { return proto.CompactTextString(m) }
func (*AutoExposureRoiCommand) ProtoMessage()               {}
func (*AutoExposureRoiCommand) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AutoExposureRoiCommand) GetOriginatorDevice() *Device {
	if m != nil {
		return m.OriginatorDevice
	}
	return nil
}

func (m *AutoExposureRoiCommand) GetOriginatorSystemTimestamp() *core.SystemTimestamp {
	if m != nil {
		return m.OriginatorSystemTimestamp
	}
	return nil
}

func (m *AutoExposureRoiCommand) GetSourceDevice() *Device {
	if m != nil {
		return m.SourceDevice
	}
	return nil
}

func (m *AutoExposureRoiCommand) GetSourceSystemTimestamp() *core.SystemTimestamp {
	if m != nil {
		return m.SourceSystemTimestamp
	}
	return nil
}

func (m *AutoExposureRoiCommand) GetClickXFraction() float32 {
	if m != nil {
		return m.ClickXFraction
	}
	return 0
}

func (m *AutoExposureRoiCommand) GetClickYFraction() float32 {
	if m != nil {
		return m.ClickYFraction
	}
	return 0
}

func (m *AutoExposureRoiCommand) GetRadiusFraction() float32 {
	if m != nil {
		return m.RadiusFraction
	}
	return 0
}

type AutoExposureRoiResponse struct {
	// / Disposition of AE command
	Disposition AECommandDisposition `protobuf:"varint,1,opt,name=disposition,enum=hal.AECommandDisposition" json:"disposition,omitempty"`
}

func (m *AutoExposureRoiResponse) Reset()                    { *m = AutoExposureRoiResponse{} }
func (m *AutoExposureRoiResponse) String() string            { return proto.CompactTextString(m) }
func (*AutoExposureRoiResponse) ProtoMessage()               {}
func (*AutoExposureRoiResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AutoExposureRoiResponse) GetDisposition() AECommandDisposition {
	if m != nil {
		return m.Disposition
	}
	return AECommandDisposition_AERoICommandRejected
}

func init() {
	proto.RegisterType((*AutoExposureRoiCommand)(nil), "hal.AutoExposureRoiCommand")
	proto.RegisterType((*AutoExposureRoiResponse)(nil), "hal.AutoExposureRoiResponse")
	proto.RegisterEnum("hal.AECommandDisposition", AECommandDisposition_name, AECommandDisposition_value)
}

func init() { proto.RegisterFile("packages/hal/proto/auto_exposure_roi_sample.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 373 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0x4f, 0x4f, 0xea, 0x40,
	0x14, 0xc5, 0x5f, 0xe1, 0x3d, 0x5e, 0x32, 0xbc, 0x87, 0xd8, 0x88, 0x14, 0x5c, 0x48, 0x70, 0x21,
	0x71, 0x51, 0x14, 0x37, 0x26, 0xae, 0x08, 0x60, 0x62, 0x8c, 0x9b, 0xf1, 0x4f, 0x74, 0xd5, 0x8c,
	0xd3, 0x11, 0x46, 0xda, 0xde, 0x66, 0x66, 0x6a, 0xe0, 0x13, 0xf9, 0x35, 0x4d, 0xa7, 0x03, 0x6d,
	0x80, 0xb8, 0x3d, 0xe7, 0x77, 0xe6, 0x9e, 0xcc, 0xbd, 0xe8, 0x22, 0x26, 0x74, 0x4e, 0xa6, 0x4c,
	0xf6, 0x67, 0x24, 0xe8, 0xc7, 0x02, 0x14, 0xf4, 0x49, 0xa2, 0xc0, 0x63, 0x8b, 0x18, 0x64, 0x22,
	0x98, 0x27, 0x80, 0x7b, 0x92, 0x84, 0x71, 0xc0, 0x5c, 0x6d, 0xdb, 0xe5, 0x19, 0x09, 0xda, 0xc7,
	0x3b, 0x72, 0x3e, 0xfb, 0xe4, 0xd4, 0x50, 0xed, 0x93, 0x35, 0x40, 0x41, 0x30, 0x43, 0x28, 0x1e,
	0x32, 0xa9, 0x48, 0x18, 0x67, 0x50, 0xf7, 0xab, 0x8c, 0x0e, 0x87, 0x89, 0x82, 0x89, 0x19, 0x86,
	0x81, 0x8f, 0x20, 0x0c, 0x49, 0xe4, 0xdb, 0x57, 0x68, 0x1f, 0x04, 0x9f, 0xf2, 0x88, 0x28, 0x10,
	0x5e, 0xf6, 0xb4, 0x63, 0x75, 0xac, 0x5e, 0x75, 0x50, 0x75, 0x67, 0x24, 0x70, 0xc7, 0x5a, 0xc2,
	0xf5, 0x9c, 0xca, 0x14, 0xfb, 0x09, 0x1d, 0x15, 0x92, 0x72, 0x29, 0x15, 0x0b, 0xbd, 0xf5, 0x64,
	0xa7, 0xa4, 0xdf, 0x68, 0xb8, 0x69, 0x2d, 0xf7, 0x41, 0xbb, 0x8f, 0x2b, 0x13, 0xb7, 0xf2, 0xe4,
	0x86, 0x65, 0x9f, 0xa3, 0xff, 0x12, 0x12, 0x41, 0xd9, 0xaa, 0x4c, 0x79, 0xbb, 0xcc, 0xbf, 0x8c,
	0x30, 0x45, 0xee, 0x51, 0xd3, 0x24, 0xb6, 0x4a, 0xfc, 0xfe, 0xa9, 0x44, 0x23, 0x4b, 0x6d, 0x16,
	0xe8, 0xa1, 0x3a, 0x0d, 0x38, 0x9d, 0x7b, 0x0b, 0xef, 0x5d, 0x10, 0xaa, 0x38, 0x44, 0xce, 0x9f,
	0x8e, 0xd5, 0x2b, 0xe1, 0x9a, 0xd6, 0x5f, 0x6e, 0x8c, 0x9a, 0x93, 0xcb, 0x9c, 0xac, 0x14, 0xc8,
	0xd7, 0x35, 0x79, 0x8a, 0xf6, 0x04, 0xf1, 0x79, 0x22, 0x73, 0xf0, 0x6f, 0x06, 0x66, 0xf2, 0x0a,
	0xec, 0x3e, 0xa3, 0xe6, 0xc6, 0xa2, 0x30, 0x93, 0x31, 0x44, 0x92, 0xd9, 0xd7, 0xa8, 0xea, 0x73,
	0x19, 0x83, 0xe4, 0x3a, 0x9f, 0xee, 0xa8, 0x36, 0x68, 0xe9, 0x6f, 0x19, 0x4e, 0xcc, 0x3a, 0xc7,
	0x39, 0x80, 0x8b, 0xf4, 0xd9, 0x1d, 0x3a, 0xd8, 0x05, 0xd9, 0x4e, 0xaa, 0x63, 0xb8, 0x35, 0x16,
	0x66, 0x1f, 0x8c, 0x2a, 0xe6, 0xd7, 0x7f, 0xd9, 0x2d, 0xd4, 0x28, 0x3a, 0x23, 0x48, 0x4f, 0x33,
	0xb5, 0xac, 0xb7, 0x8a, 0xbe, 0xaa, 0xcb, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe8, 0x85, 0x81,
	0x0e, 0xd5, 0x02, 0x00, 0x00,
}
