// Code generated by protoc-gen-go. DO NOT EDIT.
// source: packages/calibration/proto/kannala_brandt_distortion_model.proto

package calibration

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// / Kannala, Juho, and Sami S. Brandt. "A generic camera model and calibration method for conventional,
// / wide-angle, and fish-eye lenses." IEEE Transactions on Pattern Analysis and Machine Intelligence
// / 28.8 (2006): 1335-1340.
// /
// / https://www.researchgate.net/profile/Sami_Brandt/publication/6899685_A_generic_camera_model_and_calibration_method_for_conventional_wide-angle_and_fish-eye_lenses/links/02e7e52f39b8fb374d000000.pdf
type KannalaBrandtDistortionModel struct {
	// / k1...km coefficients in Eq. 6
	RadialDistortionCoefficientK []float64 `protobuf:"fixed64,1,rep,packed,name=radialDistortionCoefficientK" json:"radialDistortionCoefficientK,omitempty"`
	// / Eq. 8; set this to zero if you want a pure radial-only model
	RadialDistortionCoefficientL1 float64 `protobuf:"fixed64,2,opt,name=radialDistortionCoefficientL1" json:"radialDistortionCoefficientL1,omitempty"`
	// / Eq. 8; set this to zero if you want a pure radial-only model
	RadialDistortionCoefficientL2 float64 `protobuf:"fixed64,3,opt,name=radialDistortionCoefficientL2" json:"radialDistortionCoefficientL2,omitempty"`
	// / Eq. 8; set this to zero if you want a pure radial-only model
	RadialDistortionCoefficientL3 float64 `protobuf:"fixed64,4,opt,name=radialDistortionCoefficientL3" json:"radialDistortionCoefficientL3,omitempty"`
	// / Eq. 8; set this to zero if you want a pure radial-only model
	RadialDistortionCoefficientI1 float64 `protobuf:"fixed64,5,opt,name=radialDistortionCoefficientI1" json:"radialDistortionCoefficientI1,omitempty"`
	// / Eq. 8; set this to zero if you want a pure radial-only model
	RadialDistortionCoefficientI2 float64 `protobuf:"fixed64,6,opt,name=radialDistortionCoefficientI2" json:"radialDistortionCoefficientI2,omitempty"`
	// / Eq. 8; set this to zero if you want a pure radial-only model
	RadialDistortionCoefficientI3 float64 `protobuf:"fixed64,7,opt,name=radialDistortionCoefficientI3" json:"radialDistortionCoefficientI3,omitempty"`
	// / Eq. 8; set this to zero if you want a pure radial-only model
	RadialDistortionCoefficientI4 float64 `protobuf:"fixed64,8,opt,name=radialDistortionCoefficientI4" json:"radialDistortionCoefficientI4,omitempty"`
	// / Eq. 9; set this to zero if you want a pure radial-only model
	TangentialDistortionCoefficientM1 float64 `protobuf:"fixed64,9,opt,name=tangentialDistortionCoefficientM1" json:"tangentialDistortionCoefficientM1,omitempty"`
	// / Eq. 9; set this to zero if you want a pure radial-only model
	TangentialDistortionCoefficientM2 float64 `protobuf:"fixed64,10,opt,name=tangentialDistortionCoefficientM2" json:"tangentialDistortionCoefficientM2,omitempty"`
	// / Eq. 9; set this to zero if you want a pure radial-only model
	TangentialDistortionCoefficientM3 float64 `protobuf:"fixed64,11,opt,name=tangentialDistortionCoefficientM3" json:"tangentialDistortionCoefficientM3,omitempty"`
	// / Eq. 9; set this to zero if you want a pure radial-only model
	TangentialDistortionCoefficientJ1 float64 `protobuf:"fixed64,12,opt,name=tangentialDistortionCoefficientJ1" json:"tangentialDistortionCoefficientJ1,omitempty"`
	// / Eq. 9; set this to zero if you want a pure radial-only model
	TangentialDistortionCoefficientJ2 float64 `protobuf:"fixed64,13,opt,name=tangentialDistortionCoefficientJ2" json:"tangentialDistortionCoefficientJ2,omitempty"`
	// / Eq. 9; set this to zero if you want a pure radial-only model
	TangentialDistortionCoefficientJ3 float64 `protobuf:"fixed64,14,opt,name=tangentialDistortionCoefficientJ3" json:"tangentialDistortionCoefficientJ3,omitempty"`
	// / Eq. 9; set this to zero if you want a pure radial-only model
	TangentialDistortionCoefficientJ4 float64 `protobuf:"fixed64,15,opt,name=tangentialDistortionCoefficientJ4" json:"tangentialDistortionCoefficientJ4,omitempty"`
}

func (m *KannalaBrandtDistortionModel) Reset()                    { *m = KannalaBrandtDistortionModel{} }
func (m *KannalaBrandtDistortionModel) String() string            { return proto.CompactTextString(m) }
func (*KannalaBrandtDistortionModel) ProtoMessage()               {}
func (*KannalaBrandtDistortionModel) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *KannalaBrandtDistortionModel) GetRadialDistortionCoefficientK() []float64 {
	if m != nil {
		return m.RadialDistortionCoefficientK
	}
	return nil
}

func (m *KannalaBrandtDistortionModel) GetRadialDistortionCoefficientL1() float64 {
	if m != nil {
		return m.RadialDistortionCoefficientL1
	}
	return 0
}

func (m *KannalaBrandtDistortionModel) GetRadialDistortionCoefficientL2() float64 {
	if m != nil {
		return m.RadialDistortionCoefficientL2
	}
	return 0
}

func (m *KannalaBrandtDistortionModel) GetRadialDistortionCoefficientL3() float64 {
	if m != nil {
		return m.RadialDistortionCoefficientL3
	}
	return 0
}

func (m *KannalaBrandtDistortionModel) GetRadialDistortionCoefficientI1() float64 {
	if m != nil {
		return m.RadialDistortionCoefficientI1
	}
	return 0
}

func (m *KannalaBrandtDistortionModel) GetRadialDistortionCoefficientI2() float64 {
	if m != nil {
		return m.RadialDistortionCoefficientI2
	}
	return 0
}

func (m *KannalaBrandtDistortionModel) GetRadialDistortionCoefficientI3() float64 {
	if m != nil {
		return m.RadialDistortionCoefficientI3
	}
	return 0
}

func (m *KannalaBrandtDistortionModel) GetRadialDistortionCoefficientI4() float64 {
	if m != nil {
		return m.RadialDistortionCoefficientI4
	}
	return 0
}

func (m *KannalaBrandtDistortionModel) GetTangentialDistortionCoefficientM1() float64 {
	if m != nil {
		return m.TangentialDistortionCoefficientM1
	}
	return 0
}

func (m *KannalaBrandtDistortionModel) GetTangentialDistortionCoefficientM2() float64 {
	if m != nil {
		return m.TangentialDistortionCoefficientM2
	}
	return 0
}

func (m *KannalaBrandtDistortionModel) GetTangentialDistortionCoefficientM3() float64 {
	if m != nil {
		return m.TangentialDistortionCoefficientM3
	}
	return 0
}

func (m *KannalaBrandtDistortionModel) GetTangentialDistortionCoefficientJ1() float64 {
	if m != nil {
		return m.TangentialDistortionCoefficientJ1
	}
	return 0
}

func (m *KannalaBrandtDistortionModel) GetTangentialDistortionCoefficientJ2() float64 {
	if m != nil {
		return m.TangentialDistortionCoefficientJ2
	}
	return 0
}

func (m *KannalaBrandtDistortionModel) GetTangentialDistortionCoefficientJ3() float64 {
	if m != nil {
		return m.TangentialDistortionCoefficientJ3
	}
	return 0
}

func (m *KannalaBrandtDistortionModel) GetTangentialDistortionCoefficientJ4() float64 {
	if m != nil {
		return m.TangentialDistortionCoefficientJ4
	}
	return 0
}

func init() {
	proto.RegisterType((*KannalaBrandtDistortionModel)(nil), "calibration.KannalaBrandtDistortionModel")
}

func init() {
	proto.RegisterFile("packages/calibration/proto/kannala_brandt_distortion_model.proto", fileDescriptor3)
}

var fileDescriptor3 = []byte{
	// 275 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0xd4, 0xcf, 0x4e, 0xc2, 0x40,
	0x10, 0x06, 0xf0, 0x54, 0x14, 0x71, 0xf1, 0x4f, 0xd2, 0xd3, 0x1c, 0x30, 0x41, 0x4f, 0x9c, 0x6c,
	0xba, 0xdb, 0x07, 0x30, 0xc8, 0xa5, 0x05, 0x2e, 0xbc, 0x40, 0x33, 0x6d, 0x17, 0xb2, 0xa1, 0xee,
	0x92, 0x65, 0x9f, 0xdb, 0x67, 0x30, 0xad, 0x89, 0x7a, 0xa1, 0x33, 0xe7, 0xf9, 0xbe, 0x5f, 0xf2,
	0x5d, 0x46, 0xbc, 0x9f, 0xb0, 0x3e, 0xe2, 0x41, 0x9f, 0x93, 0x1a, 0x5b, 0x53, 0x79, 0x0c, 0xc6,
	0xd9, 0xe4, 0xe4, 0x5d, 0x70, 0xc9, 0x11, 0xad, 0xc5, 0x16, 0xcb, 0xca, 0xa3, 0x6d, 0x42, 0xd9,
	0x98, 0x73, 0x70, 0xbe, 0xbb, 0x97, 0x9f, 0xae, 0xd1, 0xed, 0x5b, 0x9f, 0x8a, 0xa7, 0xff, 0x8a,
	0xaf, 0x5f, 0x13, 0x31, 0x5b, 0xff, 0xd4, 0x96, 0x7d, 0x6b, 0xf5, 0x5b, 0xda, 0x76, 0x9d, 0x78,
	0x29, 0x66, 0x1e, 0x1b, 0x83, 0xed, 0xdf, 0xe1, 0xc3, 0xe9, 0xfd, 0xde, 0xd4, 0x46, 0xdb, 0xb0,
	0x86, 0x68, 0x3e, 0x5a, 0x44, 0xbb, 0xc1, 0x4c, 0xbc, 0x12, 0xcf, 0x03, 0xf7, 0x4d, 0x0a, 0x57,
	0xf3, 0x68, 0x11, 0xed, 0x86, 0x43, 0x94, 0x22, 0x61, 0x44, 0x2b, 0x92, 0x52, 0x14, 0x5c, 0xd3,
	0x8a, 0x22, 0x94, 0x3c, 0x85, 0x1b, 0x52, 0xc9, 0xa9, 0x45, 0xb9, 0x84, 0x31, 0xad, 0x50, 0x8b,
	0x72, 0x05, 0xb7, 0xb4, 0x42, 0x2e, 0xca, 0x60, 0x42, 0x2b, 0x59, 0xbc, 0x11, 0x2f, 0x01, 0xed,
	0x41, 0xdb, 0x70, 0x29, 0xb4, 0x4d, 0xe1, 0xae, 0x97, 0xe8, 0x20, 0x47, 0x93, 0x20, 0x78, 0x9a,
	0xe4, 0x68, 0x0a, 0xa6, 0x3c, 0x4d, 0x31, 0xb4, 0x22, 0x85, 0x7b, 0x96, 0x56, 0x70, 0x96, 0x16,
	0x12, 0x1e, 0x78, 0x1a, 0x67, 0x69, 0xa1, 0xe0, 0x91, 0xa7, 0xb1, 0x96, 0x66, 0xf0, 0xc4, 0xd3,
	0xb2, 0x6a, 0xdc, 0x3f, 0x21, 0xf5, 0x1d, 0x00, 0x00, 0xff, 0xff, 0xc4, 0xe7, 0x00, 0x9a, 0xc8,
	0x04, 0x00, 0x00,
}
