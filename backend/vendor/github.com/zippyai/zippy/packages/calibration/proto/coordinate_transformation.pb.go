// Code generated by protoc-gen-go. DO NOT EDIT.
// source: packages/calibration/proto/coordinate_transformation.proto

package calibration

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// / Defines a coordinate transformation between the natural coordinate frame of the source
// / device and the natural coordinate frame of the target device.
type CoordinateTransformation struct {
	SourceCoordinateFrame *CoordinateFrame `protobuf:"bytes,1,opt,name=sourceCoordinateFrame" json:"sourceCoordinateFrame,omitempty"`
	TargetCoordinateFrame *CoordinateFrame `protobuf:"bytes,2,opt,name=targetCoordinateFrame" json:"targetCoordinateFrame,omitempty"`
	// / Rotation from the source to the target coordinate frame, represented using so(3).
	// /
	// / The unit vector [rx, ry, rz] / norm([rx, ry, rz]) is the axis in the source frame
	// / about which we will rotate, the magnitude of this vector is the amount by which
	// / we will rotate.
	// /
	// / X component of rotation vector
	RodriguesRotationX float64 `protobuf:"fixed64,3,opt,name=rodriguesRotationX" json:"rodriguesRotationX,omitempty"`
	// / Rotation from the source to the target coordinate frame, represented using so(3).
	// /
	// / The unit vector [rx, ry, rz] / norm([rx, ry, rz]) is the axis in the source frame
	// / about which we will rotate, the magnitude of this vector is the amount by which
	// / we will rotate.
	// /
	// / Y component of rotation vector
	RodriguesRotationY float64 `protobuf:"fixed64,4,opt,name=rodriguesRotationY" json:"rodriguesRotationY,omitempty"`
	// / Rotation from the source to the target coordinate frame, represented using so(3).
	// /
	// / The unit vector [rx, ry, rz] / norm([rx, ry, rz]) is the axis in the source frame
	// / about which we will rotate, the magnitude of this vector is the amount by which
	// / we will rotate.
	// /
	// / Z component of rotation vector
	RodriguesRotationZ float64 `protobuf:"fixed64,5,opt,name=rodriguesRotationZ" json:"rodriguesRotationZ,omitempty"`
	// / X component of the position of the source coordinate frame in the target coordinate
	// / frame.
	TranslationX float64 `protobuf:"fixed64,6,opt,name=translationX" json:"translationX,omitempty"`
	// / Y component of the position of the source coordinate frame in the target coordinate
	// / frame.
	TranslationY float64 `protobuf:"fixed64,7,opt,name=translationY" json:"translationY,omitempty"`
	// / Z component of the position of the source coordinate frame in the target coordinate
	// / frame.
	TranslationZ float64 `protobuf:"fixed64,8,opt,name=translationZ" json:"translationZ,omitempty"`
	// / Time offset from the clock in the source system to the clock in the target system. When
	// / this is positive, the source system is lagging behind the target system clock.
	TimeOffsetNanoseconds int64 `protobuf:"zigzag64,9,opt,name=timeOffsetNanoseconds" json:"timeOffsetNanoseconds,omitempty"`
}

func (m *CoordinateTransformation) Reset()                    { *m = CoordinateTransformation{} }
func (m *CoordinateTransformation) String() string            { return proto.CompactTextString(m) }
func (*CoordinateTransformation) ProtoMessage()               {}
func (*CoordinateTransformation) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *CoordinateTransformation) GetSourceCoordinateFrame() *CoordinateFrame {
	if m != nil {
		return m.SourceCoordinateFrame
	}
	return nil
}

func (m *CoordinateTransformation) GetTargetCoordinateFrame() *CoordinateFrame {
	if m != nil {
		return m.TargetCoordinateFrame
	}
	return nil
}

func (m *CoordinateTransformation) GetRodriguesRotationX() float64 {
	if m != nil {
		return m.RodriguesRotationX
	}
	return 0
}

func (m *CoordinateTransformation) GetRodriguesRotationY() float64 {
	if m != nil {
		return m.RodriguesRotationY
	}
	return 0
}

func (m *CoordinateTransformation) GetRodriguesRotationZ() float64 {
	if m != nil {
		return m.RodriguesRotationZ
	}
	return 0
}

func (m *CoordinateTransformation) GetTranslationX() float64 {
	if m != nil {
		return m.TranslationX
	}
	return 0
}

func (m *CoordinateTransformation) GetTranslationY() float64 {
	if m != nil {
		return m.TranslationY
	}
	return 0
}

func (m *CoordinateTransformation) GetTranslationZ() float64 {
	if m != nil {
		return m.TranslationZ
	}
	return 0
}

func (m *CoordinateTransformation) GetTimeOffsetNanoseconds() int64 {
	if m != nil {
		return m.TimeOffsetNanoseconds
	}
	return 0
}

func init() {
	proto.RegisterType((*CoordinateTransformation)(nil), "calibration.CoordinateTransformation")
}

func init() {
	proto.RegisterFile("packages/calibration/proto/coordinate_transformation.proto", fileDescriptor2)
}

var fileDescriptor2 = []byte{
	// 260 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0x4f, 0x4b, 0xc3, 0x30,
	0x18, 0xc6, 0x89, 0xd3, 0xa9, 0x99, 0xa7, 0xc0, 0x20, 0x88, 0x87, 0xb2, 0x53, 0x4f, 0x2d, 0xfe,
	0x39, 0x79, 0x15, 0x3c, 0x2a, 0x04, 0x0f, 0xb6, 0x17, 0xc9, 0xd2, 0xb4, 0x04, 0xd7, 0xbc, 0xe3,
	0xcd, 0xbb, 0x6f, 0xee, 0x07, 0x90, 0x45, 0xd1, 0xad, 0xcb, 0xa0, 0xd7, 0x3c, 0xbf, 0xdf, 0xf3,
	0x06, 0x1e, 0xfe, 0xb8, 0xd6, 0xe6, 0x53, 0x77, 0x36, 0x94, 0x46, 0xaf, 0xdc, 0x12, 0x35, 0x39,
	0xf0, 0xe5, 0x1a, 0x81, 0xa0, 0x34, 0x00, 0xd8, 0x38, 0xaf, 0xc9, 0x7e, 0x10, 0x6a, 0x1f, 0x5a,
	0xc0, 0x3e, 0xe6, 0x45, 0xcc, 0xc5, 0x6c, 0x47, 0xb9, 0xbe, 0x1d, 0x57, 0xd4, 0xa2, 0xee, 0xed,
	0x8f, 0xbf, 0xf8, 0x9a, 0x70, 0xf9, 0xf4, 0x17, 0xbd, 0xed, 0x9d, 0x10, 0x8a, 0xcf, 0x03, 0x6c,
	0xd0, 0xd8, 0x7f, 0xe2, 0x79, 0xeb, 0x4a, 0x96, 0xb1, 0x7c, 0x76, 0x77, 0x53, 0xec, 0x9c, 0x29,
	0x06, 0x8c, 0x4a, 0xab, 0xdb, 0x4e, 0xd2, 0xd8, 0x59, 0x1a, 0x76, 0x9e, 0x8c, 0xe9, 0x4c, 0xaa,
	0xa2, 0xe0, 0x02, 0xa1, 0x41, 0xd7, 0x6d, 0x6c, 0x50, 0x40, 0xd1, 0x7d, 0x97, 0x93, 0x8c, 0xe5,
	0x4c, 0x25, 0x92, 0x24, 0x5f, 0xc9, 0xd3, 0x23, 0x7c, 0x95, 0xe4, 0x6b, 0x79, 0x76, 0x84, 0xaf,
	0xc5, 0x82, 0x5f, 0xc5, 0xb1, 0x56, 0xbf, 0x3f, 0x99, 0x46, 0x72, 0xef, 0x6d, 0xc0, 0x54, 0xf2,
	0xfc, 0x80, 0xa9, 0x06, 0x4c, 0x2d, 0x2f, 0x0e, 0x98, 0x5a, 0x3c, 0xf0, 0x39, 0xb9, 0xde, 0xbe,
	0xb6, 0x6d, 0xb0, 0xf4, 0xa2, 0x3d, 0x04, 0x6b, 0xc0, 0x37, 0x41, 0x5e, 0x66, 0x2c, 0x17, 0x2a,
	0x1d, 0x2e, 0xa7, 0x71, 0xfd, 0xfb, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf0, 0x33, 0x73, 0xd1,
	0x7b, 0x02, 0x00, 0x00,
}
