// Code generated by protoc-gen-go. DO NOT EDIT.
// source: packages/calibration/proto/coordinate_frame.proto

package calibration

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import core "github.com/zippyai/zippy/packages/core/proto"
import hal "github.com/zippyai/zippy/packages/hal/proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// / Identify a (possibly moving) coordinate frame.
// /
// / Use cases you should expect (why have a valid period?):
// /
// / 1) Kinematic chains describing the evolution of the pose of the same device over time. In this
// /    case, we expect to see several coordinate frames which have the same anchor but which have
// /    valid periods which overlap at single instances.
// /
// / 2) Coordinate transforms between things which are part of the same rigid body. In this case, the
// /    valid period should start at 0 and end at 2^64-1
type CoordinateFrame struct {
	ValidPeriodBegin *core.SystemTimestamp `protobuf:"bytes,1,opt,name=validPeriodBegin" json:"validPeriodBegin,omitempty"`
	ValidPeriodEnd   *core.SystemTimestamp `protobuf:"bytes,2,opt,name=validPeriodEnd" json:"validPeriodEnd,omitempty"`
	// Types that are valid to be assigned to Anchor:
	//	*CoordinateFrame_Device
	Anchor isCoordinateFrame_Anchor `protobuf_oneof:"anchor"`
}

func (m *CoordinateFrame) Reset()                    { *m = CoordinateFrame{} }
func (m *CoordinateFrame) String() string            { return proto.CompactTextString(m) }
func (*CoordinateFrame) ProtoMessage()               {}
func (*CoordinateFrame) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type isCoordinateFrame_Anchor interface {
	isCoordinateFrame_Anchor()
}

type CoordinateFrame_Device struct {
	Device *hal.Device `protobuf:"bytes,3,opt,name=device,oneof"`
}

func (*CoordinateFrame_Device) isCoordinateFrame_Anchor() {}

func (m *CoordinateFrame) GetAnchor() isCoordinateFrame_Anchor {
	if m != nil {
		return m.Anchor
	}
	return nil
}

func (m *CoordinateFrame) GetValidPeriodBegin() *core.SystemTimestamp {
	if m != nil {
		return m.ValidPeriodBegin
	}
	return nil
}

func (m *CoordinateFrame) GetValidPeriodEnd() *core.SystemTimestamp {
	if m != nil {
		return m.ValidPeriodEnd
	}
	return nil
}

func (m *CoordinateFrame) GetDevice() *hal.Device {
	if x, ok := m.GetAnchor().(*CoordinateFrame_Device); ok {
		return x.Device
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*CoordinateFrame) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _CoordinateFrame_OneofMarshaler, _CoordinateFrame_OneofUnmarshaler, _CoordinateFrame_OneofSizer, []interface{}{
		(*CoordinateFrame_Device)(nil),
	}
}

func _CoordinateFrame_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*CoordinateFrame)
	// anchor
	switch x := m.Anchor.(type) {
	case *CoordinateFrame_Device:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Device); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CoordinateFrame.Anchor has unexpected type %T", x)
	}
	return nil
}

func _CoordinateFrame_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*CoordinateFrame)
	switch tag {
	case 3: // anchor.device
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(hal.Device)
		err := b.DecodeMessage(msg)
		m.Anchor = &CoordinateFrame_Device{msg}
		return true, err
	default:
		return false, nil
	}
}

func _CoordinateFrame_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*CoordinateFrame)
	// anchor
	switch x := m.Anchor.(type) {
	case *CoordinateFrame_Device:
		s := proto.Size(x.Device)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*CoordinateFrame)(nil), "calibration.CoordinateFrame")
}

func init() { proto.RegisterFile("packages/calibration/proto/coordinate_frame.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 223 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x32, 0x2c, 0x48, 0x4c, 0xce,
	0x4e, 0x4c, 0x4f, 0x2d, 0xd6, 0x4f, 0x4e, 0xcc, 0xc9, 0x4c, 0x2a, 0x4a, 0x2c, 0xc9, 0xcc, 0xcf,
	0xd3, 0x2f, 0x28, 0xca, 0x2f, 0xc9, 0xd7, 0x4f, 0xce, 0xcf, 0x2f, 0x4a, 0xc9, 0xcc, 0x4b, 0x2c,
	0x49, 0x8d, 0x4f, 0x2b, 0x4a, 0xcc, 0x4d, 0xd5, 0x03, 0x0b, 0x0b, 0x71, 0x23, 0xa9, 0x94, 0x52,
	0x46, 0xe8, 0xcf, 0x2f, 0x4a, 0x85, 0x6a, 0x2c, 0xc9, 0xcc, 0x4d, 0x2d, 0x2e, 0x49, 0xcc, 0x2d,
	0x80, 0xe8, 0x90, 0x92, 0x87, 0x2b, 0xca, 0x48, 0xcc, 0x81, 0xaa, 0x49, 0x49, 0x2d, 0xcb, 0x4c,
	0x86, 0x1a, 0xa9, 0x74, 0x84, 0x91, 0x8b, 0xdf, 0x19, 0x6e, 0x9b, 0x1b, 0xc8, 0x32, 0x21, 0x47,
	0x2e, 0x81, 0xb2, 0xc4, 0x9c, 0xcc, 0x94, 0x80, 0xd4, 0xa2, 0xcc, 0xfc, 0x14, 0xa7, 0xd4, 0xf4,
	0xcc, 0x3c, 0x09, 0x46, 0x05, 0x46, 0x0d, 0x6e, 0x23, 0x51, 0x3d, 0x90, 0x5d, 0x7a, 0xc1, 0x95,
	0xc5, 0x25, 0xa9, 0xb9, 0x21, 0x30, 0xbb, 0x82, 0x30, 0x94, 0x0b, 0xd9, 0x72, 0xf1, 0x21, 0x89,
	0xb9, 0xe6, 0xa5, 0x48, 0x30, 0xe1, 0x33, 0x00, 0x4d, 0xb1, 0x90, 0x2a, 0x17, 0x1b, 0xc4, 0x95,
	0x12, 0xcc, 0x60, 0x6d, 0xdc, 0x7a, 0x19, 0x89, 0x39, 0x7a, 0x2e, 0x60, 0x21, 0x0f, 0x86, 0x20,
	0xa8, 0xa4, 0x13, 0x07, 0x17, 0x5b, 0x62, 0x5e, 0x72, 0x46, 0x7e, 0x51, 0x12, 0x1b, 0xd8, 0x37,
	0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa6, 0xd0, 0x15, 0xd5, 0x55, 0x01, 0x00, 0x00,
}
