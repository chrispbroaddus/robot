// Code generated by protoc-gen-go. DO NOT EDIT.
// source: packages/calibration/proto/system_calibration.proto

package calibration

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import core "github.com/zippyai/zippy/packages/core/proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// / Describes system hardware from a calibration perspective.
type HardwareMetadata struct {
	SerialNumber     string `protobuf:"bytes,1,opt,name=serialNumber" json:"serialNumber,omitempty"`
	Model            string `protobuf:"bytes,2,opt,name=model" json:"model,omitempty"`
	Description      string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	HardwareRevision string `protobuf:"bytes,4,opt,name=hardwareRevision" json:"hardwareRevision,omitempty"`
	FirmwareRevision string `protobuf:"bytes,5,opt,name=firmwareRevision" json:"firmwareRevision,omitempty"`
	SoftwareRevision string `protobuf:"bytes,6,opt,name=softwareRevision" json:"softwareRevision,omitempty"`
}

func (m *HardwareMetadata) Reset()                    { *m = HardwareMetadata{} }
func (m *HardwareMetadata) String() string            { return proto.CompactTextString(m) }
func (*HardwareMetadata) ProtoMessage()               {}
func (*HardwareMetadata) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *HardwareMetadata) GetSerialNumber() string {
	if m != nil {
		return m.SerialNumber
	}
	return ""
}

func (m *HardwareMetadata) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func (m *HardwareMetadata) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *HardwareMetadata) GetHardwareRevision() string {
	if m != nil {
		return m.HardwareRevision
	}
	return ""
}

func (m *HardwareMetadata) GetFirmwareRevision() string {
	if m != nil {
		return m.FirmwareRevision
	}
	return ""
}

func (m *HardwareMetadata) GetSoftwareRevision() string {
	if m != nil {
		return m.SoftwareRevision
	}
	return ""
}

// / All the book keeping related to the overall system calibration.
type SystemCalibrationMetadata struct {
	// / Major version for the file format. This follows the rules for semantic versioning: if we introduce
	// / changes which are backwards incompatible (either due to a change in syntax or semantics), then
	// / this number should be incremented.
	// /
	// / As of 5/15/2017, the value for this should be fixed at 0
	FormatMajorVersion uint32 `protobuf:"varint,1,opt,name=formatMajorVersion" json:"formatMajorVersion,omitempty"`
	// / Minor version for the file format. This follows the rules for semantic versioning: if we introduce
	// / changes which are backwards compatible (e.g. new optional fields), then this number should be
	// / incremented.
	// /
	// / As of 5/15/2017, the value for this should be fixed at 1
	FormatMinorVersion uint32 `protobuf:"varint,2,opt,name=formatMinorVersion" json:"formatMinorVersion,omitempty"`
	// / What tool was used to generate the calibration
	CalibrationSoftwarePackage string `protobuf:"bytes,3,opt,name=calibrationSoftwarePackage" json:"calibrationSoftwarePackage,omitempty"`
	// / Who performed the calibration
	CalibrationTechnician string `protobuf:"bytes,4,opt,name=calibrationTechnician" json:"calibrationTechnician,omitempty"`
	// / When was the calibration data captured
	CalibrationDataCaptureStartTime *core.SystemTimestamp `protobuf:"bytes,5,opt,name=calibrationDataCaptureStartTime" json:"calibrationDataCaptureStartTime,omitempty"`
	// / When was the calibration data captured
	CalibrationDataCaptureEndTime *core.SystemTimestamp `protobuf:"bytes,6,opt,name=calibrationDataCaptureEndTime" json:"calibrationDataCaptureEndTime,omitempty"`
	// / When were the calibration calculations performed
	CalibrationCalculationStartTime *core.SystemTimestamp `protobuf:"bytes,7,opt,name=calibrationCalculationStartTime" json:"calibrationCalculationStartTime,omitempty"`
	// / When the calibration calculations concluded
	CalibrationCalculationEndTime *core.SystemTimestamp `protobuf:"bytes,8,opt,name=calibrationCalculationEndTime" json:"calibrationCalculationEndTime,omitempty"`
	// / Which actual hardware device generated this calibration (this should reference a complete, assembled
	// / Zippy in this case)
	DeviceUnderCalibration *HardwareMetadata `protobuf:"bytes,9,opt,name=deviceUnderCalibration" json:"deviceUnderCalibration,omitempty"`
}

func (m *SystemCalibrationMetadata) Reset()                    { *m = SystemCalibrationMetadata{} }
func (m *SystemCalibrationMetadata) String() string            { return proto.CompactTextString(m) }
func (*SystemCalibrationMetadata) ProtoMessage()               {}
func (*SystemCalibrationMetadata) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{1} }

func (m *SystemCalibrationMetadata) GetFormatMajorVersion() uint32 {
	if m != nil {
		return m.FormatMajorVersion
	}
	return 0
}

func (m *SystemCalibrationMetadata) GetFormatMinorVersion() uint32 {
	if m != nil {
		return m.FormatMinorVersion
	}
	return 0
}

func (m *SystemCalibrationMetadata) GetCalibrationSoftwarePackage() string {
	if m != nil {
		return m.CalibrationSoftwarePackage
	}
	return ""
}

func (m *SystemCalibrationMetadata) GetCalibrationTechnician() string {
	if m != nil {
		return m.CalibrationTechnician
	}
	return ""
}

func (m *SystemCalibrationMetadata) GetCalibrationDataCaptureStartTime() *core.SystemTimestamp {
	if m != nil {
		return m.CalibrationDataCaptureStartTime
	}
	return nil
}

func (m *SystemCalibrationMetadata) GetCalibrationDataCaptureEndTime() *core.SystemTimestamp {
	if m != nil {
		return m.CalibrationDataCaptureEndTime
	}
	return nil
}

func (m *SystemCalibrationMetadata) GetCalibrationCalculationStartTime() *core.SystemTimestamp {
	if m != nil {
		return m.CalibrationCalculationStartTime
	}
	return nil
}

func (m *SystemCalibrationMetadata) GetCalibrationCalculationEndTime() *core.SystemTimestamp {
	if m != nil {
		return m.CalibrationCalculationEndTime
	}
	return nil
}

func (m *SystemCalibrationMetadata) GetDeviceUnderCalibration() *HardwareMetadata {
	if m != nil {
		return m.DeviceUnderCalibration
	}
	return nil
}

// / Overall system calibration.
type SystemCalibration struct {
	Metadata                               *SystemCalibrationMetadata    `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	CameraIntrinsicCalibration             []*CameraIntrinsicCalibration `protobuf:"bytes,2,rep,name=cameraIntrinsicCalibration" json:"cameraIntrinsicCalibration,omitempty"`
	DeviceToDeviceCoordinateTransformation []*CoordinateTransformation   `protobuf:"bytes,3,rep,name=deviceToDeviceCoordinateTransformation" json:"deviceToDeviceCoordinateTransformation,omitempty"`
}

func (m *SystemCalibration) Reset()                    { *m = SystemCalibration{} }
func (m *SystemCalibration) String() string            { return proto.CompactTextString(m) }
func (*SystemCalibration) ProtoMessage()               {}
func (*SystemCalibration) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{2} }

func (m *SystemCalibration) GetMetadata() *SystemCalibrationMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *SystemCalibration) GetCameraIntrinsicCalibration() []*CameraIntrinsicCalibration {
	if m != nil {
		return m.CameraIntrinsicCalibration
	}
	return nil
}

func (m *SystemCalibration) GetDeviceToDeviceCoordinateTransformation() []*CoordinateTransformation {
	if m != nil {
		return m.DeviceToDeviceCoordinateTransformation
	}
	return nil
}

func init() {
	proto.RegisterType((*HardwareMetadata)(nil), "calibration.HardwareMetadata")
	proto.RegisterType((*SystemCalibrationMetadata)(nil), "calibration.SystemCalibrationMetadata")
	proto.RegisterType((*SystemCalibration)(nil), "calibration.SystemCalibration")
}

func init() {
	proto.RegisterFile("packages/calibration/proto/system_calibration.proto", fileDescriptor5)
}

var fileDescriptor5 = []byte{
	// 527 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0x4f, 0x6f, 0xd3, 0x30,
	0x14, 0x57, 0x5b, 0x5a, 0x36, 0x07, 0xa4, 0x61, 0x31, 0x14, 0x2a, 0x4d, 0x54, 0x45, 0x8c, 0x89,
	0x43, 0x2a, 0x75, 0x9c, 0x90, 0xe0, 0x40, 0x86, 0x04, 0x87, 0x21, 0x94, 0x66, 0x5c, 0x38, 0x54,
	0xaf, 0xc9, 0xeb, 0x66, 0x88, 0xe3, 0xc8, 0x76, 0x87, 0x38, 0xf0, 0xd9, 0xb8, 0xf0, 0x89, 0xf8,
	0x04, 0x28, 0x4e, 0xda, 0x3a, 0x69, 0x9b, 0xf5, 0x14, 0xe5, 0xfd, 0xfe, 0xbc, 0xe7, 0xe7, 0xe7,
	0x47, 0xce, 0x33, 0x88, 0x7e, 0xc0, 0x35, 0xaa, 0x51, 0x04, 0x09, 0x9b, 0x49, 0xd0, 0x4c, 0xa4,
	0xa3, 0x4c, 0x0a, 0x2d, 0x46, 0xea, 0x97, 0xd2, 0xc8, 0xa7, 0x16, 0xe0, 0x19, 0x80, 0x3a, 0x56,
	0xa8, 0xff, 0x7c, 0xed, 0x20, 0x24, 0x96, 0x52, 0xcd, 0x38, 0x2a, 0x0d, 0x3c, 0x2b, 0x14, 0xfd,
	0xb7, 0x0d, 0x69, 0x22, 0xe0, 0x28, 0x61, 0xca, 0x52, 0x2d, 0x59, 0xaa, 0x58, 0xb4, 0x99, 0xb0,
	0xff, 0xa6, 0x49, 0x2e, 0x84, 0x8c, 0x59, 0x0a, 0x1a, 0xa7, 0x5a, 0x42, 0xaa, 0xe6, 0x42, 0x72,
	0x4b, 0x3b, 0xfc, 0xd7, 0x22, 0x47, 0x1f, 0x41, 0xc6, 0x3f, 0x41, 0xe2, 0x25, 0x6a, 0x88, 0x41,
	0x03, 0x1d, 0x92, 0x07, 0x0a, 0x25, 0x83, 0xe4, 0xf3, 0x82, 0xcf, 0x50, 0xba, 0xad, 0x41, 0xeb,
	0xec, 0x30, 0xa8, 0xc4, 0xe8, 0x63, 0xd2, 0xe5, 0x22, 0xc6, 0xc4, 0x6d, 0x1b, 0xb0, 0xf8, 0xa1,
	0x03, 0xe2, 0xc4, 0xa8, 0x22, 0xc9, 0xb2, 0x3c, 0x87, 0xdb, 0x31, 0x98, 0x1d, 0xa2, 0xaf, 0xc8,
	0xd1, 0x4d, 0x99, 0x2f, 0xc0, 0x5b, 0xa6, 0x72, 0xda, 0x3d, 0x43, 0xdb, 0x88, 0xe7, 0xdc, 0x39,
	0x93, 0xbc, 0xc2, 0xed, 0x16, 0xdc, 0x7a, 0x3c, 0xe7, 0x2a, 0x31, 0xd7, 0x15, 0x6e, 0xaf, 0xe0,
	0xd6, 0xe3, 0xc3, 0xbf, 0x5d, 0xf2, 0x74, 0x62, 0xae, 0xcf, 0x5f, 0x37, 0x6c, 0x75, 0x7a, 0x8f,
	0xd0, 0xa2, 0x4b, 0x97, 0xf0, 0x5d, 0xc8, 0xaf, 0x28, 0x8d, 0x57, 0xde, 0x83, 0x87, 0xc1, 0x16,
	0xc4, 0xe2, 0xb3, 0x74, 0xcd, 0x6f, 0x57, 0xf8, 0x16, 0x42, 0xdf, 0x91, 0xbe, 0x75, 0x4f, 0x93,
	0xb2, 0xb8, 0x2f, 0xc5, 0x1d, 0x96, 0x2d, 0x6b, 0x60, 0xd0, 0xd7, 0xe4, 0xd8, 0x42, 0x43, 0x8c,
	0x6e, 0x52, 0x16, 0x31, 0x58, 0xb6, 0x71, 0x3b, 0x48, 0xa7, 0xe4, 0x99, 0x05, 0x5c, 0x80, 0x06,
	0x1f, 0x32, 0xbd, 0x90, 0x38, 0xd1, 0x20, 0x75, 0xc8, 0x38, 0x9a, 0xd6, 0x3a, 0xe3, 0x63, 0x2f,
	0x9f, 0x54, 0xaf, 0xe8, 0x4f, 0xb8, 0x9c, 0xd4, 0xe0, 0x2e, 0x35, 0xfd, 0x46, 0x4e, 0xb6, 0x53,
	0x3e, 0xa4, 0xb1, 0xb1, 0xef, 0x35, 0xd9, 0x37, 0x6b, 0x6b, 0xd5, 0xfb, 0x90, 0x44, 0x8b, 0xa4,
	0x68, 0xce, 0xaa, 0xfa, 0xfb, 0xfb, 0x56, 0xbf, 0x4d, 0x5d, 0xab, 0xde, 0xa2, 0x2c, 0xab, 0x3f,
	0xd8, 0xb7, 0xfa, 0x4d, 0x2d, 0xbd, 0x22, 0x4f, 0x62, 0xbc, 0x65, 0x11, 0x5e, 0xa5, 0x31, 0x4a,
	0x6b, 0xe6, 0xdc, 0x43, 0xe3, 0x7a, 0xe2, 0xd9, 0x8f, 0xba, 0xfe, 0x1c, 0x83, 0x1d, 0xe2, 0xe1,
	0x9f, 0x36, 0x79, 0xb4, 0x31, 0xc6, 0xf4, 0x3d, 0x39, 0xe0, 0xa5, 0xd2, 0x0c, 0xad, 0x33, 0x3e,
	0xad, 0xd8, 0xef, 0x1c, 0xfc, 0x60, 0xa5, 0xa3, 0xd7, 0xf9, 0x88, 0xe6, 0x7b, 0xe7, 0xd3, 0x72,
	0xed, 0xd8, 0x45, 0xb7, 0x07, 0x9d, 0x33, 0x67, 0xfc, 0xb2, 0xe2, 0xea, 0xef, 0xa4, 0x07, 0x0d,
	0x56, 0xf4, 0x37, 0x39, 0x2d, 0x0e, 0x17, 0x8a, 0x0b, 0xf3, 0xf5, 0x57, 0xfb, 0x2a, 0xac, 0xac,
	0x2b, 0xb7, 0x63, 0x92, 0xbe, 0xa8, 0x26, 0xdd, 0x41, 0x0e, 0xf6, 0x34, 0x9d, 0xf5, 0xcc, 0x12,
	0x3c, 0xff, 0x1f, 0x00, 0x00, 0xff, 0xff, 0x3f, 0x05, 0x1b, 0xda, 0xe8, 0x05, 0x00, 0x00,
}
