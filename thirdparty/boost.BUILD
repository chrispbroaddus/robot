
# This file was automatically generated by generate_boost_build.py
#
# Please do not edit it by hand. 



        

cc_inc_library(
  name="accumulators",
  hdrs = glob(["include/boost/accumulators/**/*.hpp", "include/boost/accumulators/**/*.h"]),
  deps = ["@boost//:aligned_storage",
    "@boost//:array",
    "@boost//:assert",
    "@boost//:circular_buffer",
    "@boost//:concept_check",
    "@boost//:config",
    "@boost//:fusion",
    "@boost//:iterator",
    "@boost//:mpl",
    "@boost//:numeric",
    "@boost//:parameter",
    "@boost//:preprocessor",
    "@boost//:range",
    "@boost//:ref",
    "@boost//:static_assert",
    "@boost//:throw_exception",
    "@boost//:tuple",
    "@boost//:type_traits",
    "@boost//:typeof",
    "@boost//:utility",
    "@boost//:version"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="algorithm",
  hdrs = glob(["include/boost/algorithm/**/*.hpp", "include/boost/algorithm/**/*.h"]),
  deps = ["@boost//:array",
    "@boost//:assert",
    "@boost//:bind",
    "@boost//:concept_check",
    "@boost//:config",
    "@boost//:exception",
    "@boost//:function",
    "@boost//:iterator",
    "@boost//:mpl",
    "@boost//:range",
    "@boost//:ref",
    "@boost//:regex",
    "@boost//:static_assert",
    "@boost//:tuple",
    "@boost//:type_traits",
    "@boost//:unordered_map",
    "@boost//:utility"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="align",
  hdrs = ["include/boost/align.hpp"] + glob(["include/boost/align/**/*.hpp", "include/boost/align/**/*.h"]),
  deps = ["@boost//:assert",
    "@boost//:config",
    "@boost//:core",
    "@boost//:cstdint",
    "@boost//:static_assert",
    "@boost//:throw_exception"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="aligned_storage",
  hdrs = ["include/boost/aligned_storage.hpp"],
  deps = [],
  visibility = ["//visibility:public"],
)

# allocator_utilities

cc_inc_library(
  name="any",
  hdrs = ["include/boost/any.hpp"],
  deps = ["@boost//:config",
    "@boost//:mpl",
    "@boost//:static_assert",
    "@boost//:throw_exception",
    "@boost//:type_index",
    "@boost//:type_traits",
    "@boost//:utility"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="archive",
  hdrs = glob(["include/boost/archive/**/*.hpp", "include/boost/archive/**/*.h"]),
  deps = ["@boost//:assert",
    "@boost//:config",
    "@boost//:core",
    "@boost//:cstdint",
    "@boost//:integer",
    "@boost//:integer_traits",
    "@boost//:io",
    "@boost//:iterator",
    "@boost//:limits",
    "@boost//:mpl",
    "@boost//:noncopyable",
    "@boost//:pointee",
    "@boost//:preprocessor",
    "@boost//:scoped_ptr",
    "@boost//:serialization",
    "@boost//:smart_ptr",
    "@boost//:spirit",
    "@boost//:static_assert",
    "@boost//:type_traits"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="array",
  hdrs = ["include/boost/array.hpp"],
  deps = ["@boost//:assert",
    "@boost//:config",
    "@boost//:functional",
    "@boost//:swap",
    "@boost//:throw_exception"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="asio",
  hdrs = ["include/boost/asio.hpp"] + glob(["include/boost/asio/**/*.hpp", "include/boost/asio/**/*.h"]),
  deps = ["@boost//:bind",
    "@boost//:cerrno",
    "@boost//:config",
    "@boost//:coroutine",
    "@boost//:date_time",
    "@boost//:function",
    "@boost//:noncopyable",
    "@boost//:regex",
    "@boost//:regex_fwd",
    "@boost//:system"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="assert",
  hdrs = ["include/boost/assert.hpp"],
  deps = ["@boost//:config",
    "@boost//:current_function"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="assign",
  hdrs = ["include/boost/assign.hpp"] + glob(["include/boost/assign/**/*.hpp", "include/boost/assign/**/*.h"]),
  deps = ["@boost//:array",
    "@boost//:config",
    "@boost//:mpl",
    "@boost//:preprocessor",
    "@boost//:ptr_container",
    "@boost//:range",
    "@boost//:static_assert",
    "@boost//:tuple",
    "@boost//:type_traits"],
  visibility = ["//visibility:public"],
)


cc_library(
  name="atomic",
  hdrs = ["include/boost/atomic.hpp"] + glob(["include/boost/atomic/**/*.hpp", "include/boost/atomic/**/*.h"]),
  srcs = ["lib/x86_64-linux-gnu/libboost_atomic.so.1.58.0"],
  deps = ["@boost//:assert",
    "@boost//:config",
    "@boost//:cstdint",
    "@boost//:memory_order",
    "@boost//:type_traits"],
  visibility = ["//visibility:public"],
)

# atomic_count
# atomic_redef_macros
# atomic_undef_macros
# basic_pointerbuf

cc_inc_library(
  name="bimap",
  hdrs = ["include/boost/bimap.hpp"] + glob(["include/boost/bimap/**/*.hpp", "include/boost/bimap/**/*.h"]),
  deps = ["@boost//:call_traits",
    "@boost//:concept_check",
    "@boost//:config",
    "@boost//:functional",
    "@boost//:iterator",
    "@boost//:lambda",
    "@boost//:mpl",
    "@boost//:multi_index",
    "@boost//:multi_index_container",
    "@boost//:operators",
    "@boost//:preprocessor",
    "@boost//:property_map",
    "@boost//:serialization",
    "@boost//:static_assert",
    "@boost//:throw_exception",
    "@boost//:type_traits",
    "@boost//:utility"],
  visibility = ["//visibility:public"],
)

# binary_search

cc_inc_library(
  name="bind",
  hdrs = ["include/boost/bind.hpp"] + glob(["include/boost/bind/**/*.hpp", "include/boost/bind/**/*.h"]),
  deps = ["@boost//:config",
    "@boost//:get_pointer",
    "@boost//:is_placeholder",
    "@boost//:ref",
    "@boost//:static_assert",
    "@boost//:type",
    "@boost//:visit_each"],
  visibility = ["//visibility:public"],
)

# bitmask

cc_inc_library(
  name="blank",
  hdrs = ["include/boost/blank.hpp"],
  deps = ["@boost//:blank_fwd",
    "@boost//:mpl",
    "@boost//:type_traits"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="blank_fwd",
  hdrs = ["include/boost/blank_fwd.hpp"],
  deps = [],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="call_traits",
  hdrs = ["include/boost/call_traits.hpp"],
  deps = ["@boost//:config",
    "@boost//:type_traits"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="cast",
  hdrs = ["include/boost/cast.hpp"],
  deps = [],
  visibility = ["//visibility:public"],
)

# catch_exceptions

cc_inc_library(
  name="cerrno",
  hdrs = ["include/boost/cerrno.hpp"],
  deps = [],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="checked_delete",
  hdrs = ["include/boost/checked_delete.hpp"],
  deps = ["@boost//:core"],
  visibility = ["//visibility:public"],
)


cc_library(
  name="chrono",
  hdrs = ["include/boost/chrono.hpp"] + glob(["include/boost/chrono/**/*.hpp", "include/boost/chrono/**/*.h"]),
  srcs = ["lib/x86_64-linux-gnu/libboost_chrono.so.1.58.0"],
  deps = ["@boost//:assert",
    "@boost//:config",
    "@boost//:cstdint",
    "@boost//:integer",
    "@boost//:integer_traits",
    "@boost//:move",
    "@boost//:mpl",
    "@boost//:operators",
    "@boost//:predef",
    "@boost//:ratio",
    "@boost//:static_assert",
    "@boost//:system",
    "@boost//:throw_exception",
    "@boost//:type_traits",
    "@boost//:typeof",
    "@boost//:utility",
    "@boost//:version"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="circular_buffer",
  hdrs = ["include/boost/circular_buffer.hpp"] + glob(["include/boost/circular_buffer/**/*.hpp", "include/boost/circular_buffer/**/*.h"]),
  deps = ["@boost//:assert",
    "@boost//:call_traits",
    "@boost//:circular_buffer_fwd",
    "@boost//:concept_check",
    "@boost//:config",
    "@boost//:container",
    "@boost//:iterator",
    "@boost//:limits",
    "@boost//:move",
    "@boost//:static_assert",
    "@boost//:throw_exception",
    "@boost//:type_traits",
    "@boost//:utility"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="circular_buffer_fwd",
  hdrs = ["include/boost/circular_buffer_fwd.hpp"],
  deps = ["@boost//:config"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="compatibility",
  hdrs = glob(["include/boost/compatibility/**/*.hpp", "include/boost/compatibility/**/*.h"]),
  deps = [],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="compressed_pair",
  hdrs = ["include/boost/compressed_pair.hpp"],
  deps = ["@boost//:call_traits",
    "@boost//:config",
    "@boost//:type_traits"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="concept",
  hdrs = glob(["include/boost/concept/**/*.hpp", "include/boost/concept/**/*.h"]),
  deps = [],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="concept_archetype",
  hdrs = ["include/boost/concept_archetype.hpp"],
  deps = ["@boost//:config",
    "@boost//:mpl"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="concept_check",
  hdrs = ["include/boost/concept_check.hpp"] + glob(["include/boost/concept_check/**/*.hpp", "include/boost/concept_check/**/*.h"]),
  deps = [],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="config",
  hdrs = ["include/boost/config.hpp"] + glob(["include/boost/config/**/*.hpp", "include/boost/config/**/*.h"]),
  deps = [],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="container",
  hdrs = glob(["include/boost/container/**/*.hpp", "include/boost/container/**/*.h"]),
  deps = ["@boost//:assert",
    "@boost//:config",
    "@boost//:core",
    "@boost//:functional",
    "@boost//:intrusive",
    "@boost//:move",
    "@boost//:static_assert"],
  visibility = ["//visibility:public"],
)

# container_fwd

cc_library(
  name="context",
  hdrs = glob(["include/boost/context/**/*.hpp", "include/boost/context/**/*.h"]),
  srcs = ["lib/x86_64-linux-gnu/libboost_context.so.1.58.0"],
  deps = ["@boost//:assert",
    "@boost//:config",
    "@boost//:cstdint",
    "@boost//:system",
    "@boost//:thread"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="core",
  hdrs = glob(["include/boost/core/**/*.hpp", "include/boost/core/**/*.h"]),
  deps = [],
  visibility = ["//visibility:public"],
)


cc_library(
  name="coroutine",
  hdrs = glob(["include/boost/coroutine/**/*.hpp", "include/boost/coroutine/**/*.h"]),
  srcs = ["lib/x86_64-linux-gnu/libboost_coroutine.so.1.58.0"],
  deps = ["@boost//:assert",
    "@boost//:config",
    "@boost//:context",
    "@boost//:cstdint",
    "@boost//:exception_ptr",
    "@boost//:move",
    "@boost//:range",
    "@boost//:system",
    "@boost//:thread",
    "@boost//:throw_exception",
    "@boost//:type_traits",
    "@boost//:utility"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="crc",
  hdrs = ["include/boost/crc.hpp"],
  deps = ["@boost//:config",
    "@boost//:integer",
    "@boost//:limits"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="cregex",
  hdrs = ["include/boost/cregex.hpp"],
  deps = [],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="cstdfloat",
  hdrs = ["include/boost/cstdfloat.hpp"],
  deps = ["@boost//:math"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="cstdint",
  hdrs = ["include/boost/cstdint.hpp"],
  deps = ["@boost//:config"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="cstdlib",
  hdrs = ["include/boost/cstdlib.hpp"],
  deps = [],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="current_function",
  hdrs = ["include/boost/current_function.hpp"],
  deps = [],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="cxx11_char_types",
  hdrs = ["include/boost/cxx11_char_types.hpp"],
  deps = [],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="date_time",
  hdrs = ["include/boost/date_time.hpp"] + glob(["include/boost/date_time/**/*.hpp", "include/boost/date_time/**/*.h"]),
  deps = ["@boost//:algorithm",
    "@boost//:assert",
    "@boost//:config",
    "@boost//:cstdint",
    "@boost//:io",
    "@boost//:lexical_cast",
    "@boost//:limits",
    "@boost//:mpl",
    "@boost//:operators",
    "@boost//:range",
    "@boost//:serialization",
    "@boost//:shared_ptr",
    "@boost//:static_assert",
    "@boost//:throw_exception",
    "@boost//:tokenizer",
    "@boost//:type_traits"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="dynamic_bitset",
  hdrs = ["include/boost/dynamic_bitset.hpp"] + glob(["include/boost/dynamic_bitset/**/*.hpp", "include/boost/dynamic_bitset/**/*.h"]),
  deps = ["@boost//:config",
    "@boost//:dynamic_bitset_fwd",
    "@boost//:limits",
    "@boost//:move",
    "@boost//:pending",
    "@boost//:static_assert",
    "@boost//:throw_exception",
    "@boost//:utility"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="dynamic_bitset_fwd",
  hdrs = ["include/boost/dynamic_bitset_fwd.hpp"],
  deps = [],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="enable_shared_from_this",
  hdrs = ["include/boost/enable_shared_from_this.hpp"],
  deps = ["@boost//:smart_ptr"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="endian",
  hdrs = glob(["include/boost/endian/**/*.hpp", "include/boost/endian/**/*.h"]),
  deps = ["@boost//:assert",
    "@boost//:config",
    "@boost//:core",
    "@boost//:cstdint",
    "@boost//:current_function",
    "@boost//:predef",
    "@boost//:static_assert",
    "@boost//:system",
    "@boost//:type_traits"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="exception",
  hdrs = glob(["include/boost/exception/**/*.hpp", "include/boost/exception/**/*.h"]),
  deps = ["@boost//:assert",
    "@boost//:config",
    "@boost//:core",
    "@boost//:current_function",
    "@boost//:shared_ptr",
    "@boost//:tuple",
    "@boost//:utility"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="exception_ptr",
  hdrs = ["include/boost/exception_ptr.hpp"],
  deps = ["@boost//:exception"],
  visibility = ["//visibility:public"],
)

# fenv

cc_library(
  name="filesystem",
  hdrs = ["include/boost/filesystem.hpp"] + glob(["include/boost/filesystem/**/*.hpp", "include/boost/filesystem/**/*.h"]),
  srcs = ["lib/x86_64-linux-gnu/libboost_filesystem.so.1.58.0"],
  deps = ["@boost//:assert",
    "@boost//:config",
    "@boost//:cstdint",
    "@boost//:functional",
    "@boost//:io",
    "@boost//:iterator",
    "@boost//:range",
    "@boost//:shared_ptr",
    "@boost//:static_assert",
    "@boost//:system",
    "@boost//:type_traits",
    "@boost//:utility"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="flyweight",
  hdrs = ["include/boost/flyweight.hpp"] + glob(["include/boost/flyweight/**/*.hpp", "include/boost/flyweight/**/*.h"]),
  deps = ["@boost//:assert",
    "@boost//:config",
    "@boost//:functional",
    "@boost//:interprocess",
    "@boost//:mpl",
    "@boost//:multi_index",
    "@boost//:multi_index_container",
    "@boost//:noncopyable",
    "@boost//:parameter",
    "@boost//:preprocessor",
    "@boost//:serialization",
    "@boost//:throw_exception",
    "@boost//:type_traits",
    "@boost//:utility"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="foreach",
  hdrs = ["include/boost/foreach.hpp"],
  deps = ["@boost//:config",
    "@boost//:foreach_fwd",
    "@boost//:iterator",
    "@boost//:mpl",
    "@boost//:noncopyable",
    "@boost//:range",
    "@boost//:type_traits",
    "@boost//:utility"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="foreach_fwd",
  hdrs = ["include/boost/foreach_fwd.hpp"],
  deps = [],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="format",
  hdrs = ["include/boost/format.hpp"] + glob(["include/boost/format/**/*.hpp", "include/boost/format/**/*.h"]),
  deps = ["@boost//:assert",
    "@boost//:config",
    "@boost//:limits",
    "@boost//:optional",
    "@boost//:shared_ptr",
    "@boost//:throw_exception",
    "@boost//:utility"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="function",
  hdrs = ["include/boost/function.hpp"] + glob(["include/boost/function/**/*.hpp", "include/boost/function/**/*.h"]),
  deps = ["@boost//:assert",
    "@boost//:config",
    "@boost//:function_equal",
    "@boost//:integer",
    "@boost//:mpl",
    "@boost//:preprocessor",
    "@boost//:ref",
    "@boost//:type_traits",
    "@boost//:typeof"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="function_equal",
  hdrs = ["include/boost/function_equal.hpp"],
  deps = [],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="function_output_iterator",
  hdrs = ["include/boost/function_output_iterator.hpp"],
  deps = [],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="function_types",
  hdrs = glob(["include/boost/function_types/**/*.hpp", "include/boost/function_types/**/*.h"]),
  deps = ["@boost//:blank",
    "@boost//:config",
    "@boost//:mpl",
    "@boost//:preprocessor",
    "@boost//:type",
    "@boost//:type_traits"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="functional",
  hdrs = ["include/boost/functional.hpp"] + glob(["include/boost/functional/**/*.hpp", "include/boost/functional/**/*.h"]),
  deps = ["@boost//:assert",
    "@boost//:call_traits",
    "@boost//:config",
    "@boost//:cstdint",
    "@boost//:function",
    "@boost//:function_types",
    "@boost//:integer",
    "@boost//:limits",
    "@boost//:mpl",
    "@boost//:preprocessor",
    "@boost//:static_assert",
    "@boost//:type_traits",
    "@boost//:typeof",
    "@boost//:utility"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="fusion",
  hdrs = glob(["include/boost/fusion/**/*.hpp", "include/boost/fusion/**/*.h"]),
  deps = ["@boost//:call_traits",
    "@boost//:config",
    "@boost//:core",
    "@boost//:function_types",
    "@boost//:functional",
    "@boost//:get_pointer",
    "@boost//:mpl",
    "@boost//:preprocessor",
    "@boost//:ref",
    "@boost//:static_assert",
    "@boost//:tuple",
    "@boost//:type_traits",
    "@boost//:typeof",
    "@boost//:utility"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="generator_iterator",
  hdrs = ["include/boost/generator_iterator.hpp"],
  deps = ["@boost//:iterator",
    "@boost//:ref"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="geometry",
  hdrs = ["include/boost/geometry.hpp"] + glob(["include/boost/geometry/**/*.hpp", "include/boost/geometry/**/*.h"]),
  deps = ["@boost//:algorithm",
    "@boost//:array",
    "@boost//:assert",
    "@boost//:call_traits",
    "@boost//:concept",
    "@boost//:concept_check",
    "@boost//:config",
    "@boost//:container",
    "@boost//:core",
    "@boost//:function_types",
    "@boost//:fusion",
    "@boost//:integer",
    "@boost//:iterator",
    "@boost//:lexical_cast",
    "@boost//:math",
    "@boost//:move",
    "@boost//:mpl",
    "@boost//:multiprecision",
    "@boost//:noncopyable",
    "@boost//:numeric",
    "@boost//:polygon",
    "@boost//:range",
    "@boost//:rational",
    "@boost//:scoped_ptr",
    "@boost//:serialization",
    "@boost//:static_assert",
    "@boost//:swap",
    "@boost//:throw_exception",
    "@boost//:tokenizer",
    "@boost//:tuple",
    "@boost//:type_traits",
    "@boost//:variant",
    "@boost//:version"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="get_pointer",
  hdrs = ["include/boost/get_pointer.hpp"],
  deps = ["@boost//:config"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="gil",
  hdrs = glob(["include/boost/gil/**/*.hpp", "include/boost/gil/**/*.h"]),
  deps = ["@boost//:bind",
    "@boost//:concept_check",
    "@boost//:config",
    "@boost//:cstdint",
    "@boost//:iterator",
    "@boost//:mpl",
    "@boost//:preprocessor",
    "@boost//:shared_ptr",
    "@boost//:static_assert",
    "@boost//:type_traits",
    "@boost//:utility"],
  visibility = ["//visibility:public"],
)


cc_library(
  name="graph",
  hdrs = glob(["include/boost/graph/**/*.hpp", "include/boost/graph/**/*.h"]),
  srcs = ["lib/x86_64-linux-gnu/libboost_graph.so.1.58.0"],
  deps = ["@boost//:algorithm",
    "@boost//:any",
    "@boost//:array",
    "@boost//:assert",
    "@boost//:bimap",
    "@boost//:bind",
    "@boost//:concept",
    "@boost//:concept_archetype",
    "@boost//:concept_check",
    "@boost//:config",
    "@boost//:dynamic_bitset",
    "@boost//:foreach",
    "@boost//:function",
    "@boost//:functional",
    "@boost//:implicit_cast",
    "@boost//:integer",
    "@boost//:iterator",
    "@boost//:iterator_adaptors",
    "@boost//:lexical_cast",
    "@boost//:limits",
    "@boost//:make_shared",
    "@boost//:math",
    "@boost//:move",
    "@boost//:mpi",
    "@boost//:mpl",
    "@boost//:multi_index",
    "@boost//:multi_index_container",
    "@boost//:next_prior",
    "@boost//:none_t",
    "@boost//:operators",
    "@boost//:optional",
    "@boost//:parameter",
    "@boost//:pending",
    "@boost//:preprocessor",
    "@boost//:property_map",
    "@boost//:property_tree",
    "@boost//:random",
    "@boost//:range",
    "@boost//:ref",
    "@boost//:regex",
    "@boost//:scoped_ptr",
    "@boost//:serialization",
    "@boost//:shared_array",
    "@boost//:shared_ptr",
    "@boost//:smart_ptr",
    "@boost//:spirit",
    "@boost//:static_assert",
    "@boost//:test",
    "@boost//:throw_exception",
    "@boost//:tti",
    "@boost//:tuple",
    "@boost//:type_traits",
    "@boost//:typeof",
    "@boost//:unordered_map",
    "@boost//:unordered_set",
    "@boost//:utility",
    "@boost//:variant",
    "@boost//:version",
    "@boost//:weak_ptr",
    "@boost//:xpressive"],
  visibility = ["//visibility:public"],
)

# has_default_constructor

cc_inc_library(
  name="heap",
  hdrs = glob(["include/boost/heap/**/*.hpp", "include/boost/heap/**/*.h"]),
  deps = ["@boost//:array",
    "@boost//:assert",
    "@boost//:concept",
    "@boost//:concept_check",
    "@boost//:cstdint",
    "@boost//:intrusive",
    "@boost//:iterator",
    "@boost//:mem_fn",
    "@boost//:mpl",
    "@boost//:parameter",
    "@boost//:static_assert",
    "@boost//:throw_exception",
    "@boost//:type_traits"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="icl",
  hdrs = glob(["include/boost/icl/**/*.hpp", "include/boost/icl/**/*.h"]),
  deps = ["@boost//:assert",
    "@boost//:call_traits",
    "@boost//:concept",
    "@boost//:concept_check",
    "@boost//:config",
    "@boost//:date_time",
    "@boost//:iterator",
    "@boost//:move",
    "@boost//:mpl",
    "@boost//:next_prior",
    "@boost//:rational",
    "@boost//:static_assert",
    "@boost//:type_traits",
    "@boost//:utility"],
  visibility = ["//visibility:public"],
)

# identifier

cc_inc_library(
  name="implicit_cast",
  hdrs = ["include/boost/implicit_cast.hpp"],
  deps = [],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="indirect_reference",
  hdrs = ["include/boost/indirect_reference.hpp"],
  deps = [],
  visibility = ["//visibility:public"],
)

# indirect_traits

cc_inc_library(
  name="integer",
  hdrs = ["include/boost/integer.hpp"] + glob(["include/boost/integer/**/*.hpp", "include/boost/integer/**/*.h"]),
  deps = ["@boost//:config",
    "@boost//:cstdint",
    "@boost//:integer_fwd",
    "@boost//:integer_traits",
    "@boost//:limits",
    "@boost//:static_assert"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="integer_fwd",
  hdrs = ["include/boost/integer_fwd.hpp"],
  deps = ["@boost//:config",
    "@boost//:cstdint",
    "@boost//:limits"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="integer_traits",
  hdrs = ["include/boost/integer_traits.hpp"],
  deps = ["@boost//:config",
    "@boost//:limits"],
  visibility = ["//visibility:public"],
)

# interlocked

cc_inc_library(
  name="interprocess",
  hdrs = glob(["include/boost/interprocess/**/*.hpp", "include/boost/interprocess/**/*.h"]),
  deps = ["@boost//:assert",
    "@boost//:checked_delete",
    "@boost//:config",
    "@boost//:container",
    "@boost//:core",
    "@boost//:cstdint",
    "@boost//:date_time",
    "@boost//:integer",
    "@boost//:intrusive",
    "@boost//:limits",
    "@boost//:move",
    "@boost//:static_assert",
    "@boost//:unordered",
    "@boost//:unordered_map",
    "@boost//:utility"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="intrusive",
  hdrs = glob(["include/boost/intrusive/**/*.hpp", "include/boost/intrusive/**/*.h"]),
  deps = ["@boost//:assert",
    "@boost//:config",
    "@boost//:core",
    "@boost//:functional",
    "@boost//:move",
    "@boost//:static_assert"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="intrusive_ptr",
  hdrs = ["include/boost/intrusive_ptr.hpp"],
  deps = ["@boost//:smart_ptr"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="io",
  hdrs = glob(["include/boost/io/**/*.hpp", "include/boost/io/**/*.h"]),
  deps = ["@boost//:io_fwd"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="io_fwd",
  hdrs = ["include/boost/io_fwd.hpp"],
  deps = [],
  visibility = ["//visibility:public"],
)


cc_library(
  name="iostreams",
  hdrs = glob(["include/boost/iostreams/**/*.hpp", "include/boost/iostreams/**/*.h"]),
  srcs = ["lib/x86_64-linux-gnu/libboost_iostreams.so.1.58.0"],
  deps = ["@boost//:assert",
    "@boost//:bind",
    "@boost//:checked_delete",
    "@boost//:config",
    "@boost//:cstdint",
    "@boost//:function",
    "@boost//:integer_traits",
    "@boost//:mpl",
    "@boost//:next_prior",
    "@boost//:noncopyable",
    "@boost//:preprocessor",
    "@boost//:ref",
    "@boost//:regex",
    "@boost//:shared_ptr",
    "@boost//:static_assert",
    "@boost//:throw_exception",
    "@boost//:type",
    "@boost//:type_traits",
    "@boost//:utility"],
  visibility = ["//visibility:public"],
)

# is_incrementable

cc_inc_library(
  name="is_placeholder",
  hdrs = ["include/boost/is_placeholder.hpp"],
  deps = [],
  visibility = ["//visibility:public"],
)

# is_sorted
# is_xxx

cc_inc_library(
  name="iterator",
  hdrs = ["include/boost/iterator.hpp"] + glob(["include/boost/iterator/**/*.hpp", "include/boost/iterator/**/*.h"]),
  deps = ["@boost//:assert",
    "@boost//:concept",
    "@boost//:concept_archetype",
    "@boost//:concept_check",
    "@boost//:config",
    "@boost//:function_types",
    "@boost//:indirect_reference",
    "@boost//:limits",
    "@boost//:mpl",
    "@boost//:next_prior",
    "@boost//:none",
    "@boost//:optional",
    "@boost//:pointee",
    "@boost//:static_assert",
    "@boost//:tuple",
    "@boost//:type_traits",
    "@boost//:utility"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="iterator_adaptors",
  hdrs = ["include/boost/iterator_adaptors.hpp"],
  deps = ["@boost//:iterator"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="lambda",
  hdrs = glob(["include/boost/lambda/**/*.hpp", "include/boost/lambda/**/*.h"]),
  deps = ["@boost//:config",
    "@boost//:indirect_reference",
    "@boost//:is_placeholder",
    "@boost//:mpl",
    "@boost//:preprocessor",
    "@boost//:tuple",
    "@boost//:type_traits",
    "@boost//:utility"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="last_value",
  hdrs = ["include/boost/last_value.hpp"],
  deps = ["@boost//:config"],
  visibility = ["//visibility:public"],
)

# lcast_precision

cc_inc_library(
  name="lexical_cast",
  hdrs = ["include/boost/lexical_cast.hpp"] + glob(["include/boost/lexical_cast/**/*.hpp", "include/boost/lexical_cast/**/*.h"]),
  deps = [],
  visibility = ["//visibility:public"],
)

# lightweight_main
# lightweight_mutex
# lightweight_test
# lightweight_test_report
# lightweight_thread

cc_inc_library(
  name="limits",
  hdrs = ["include/boost/limits.hpp"],
  deps = ["@boost//:config"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="local_function",
  hdrs = ["include/boost/local_function.hpp"] + glob(["include/boost/local_function/**/*.hpp", "include/boost/local_function/**/*.h"]),
  deps = ["@boost//:config",
    "@boost//:mpl",
    "@boost//:preprocessor",
    "@boost//:scope_exit",
    "@boost//:type_traits",
    "@boost//:typeof",
    "@boost//:utility"],
  visibility = ["//visibility:public"],
)


cc_library(
  name="locale",
  hdrs = ["include/boost/locale.hpp"] + glob(["include/boost/locale/**/*.hpp", "include/boost/locale/**/*.h"]),
  srcs = ["lib/x86_64-linux-gnu/libboost_locale.so.1.58.0"],
  deps = ["@boost//:assert",
    "@boost//:config",
    "@boost//:cstdint",
    "@boost//:function",
    "@boost//:iterator",
    "@boost//:shared_ptr",
    "@boost//:system",
    "@boost//:thread",
    "@boost//:type_traits"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="lockfree",
  hdrs = glob(["include/boost/lockfree/**/*.hpp", "include/boost/lockfree/**/*.h"]),
  deps = ["@boost//:aligned_storage",
    "@boost//:array",
    "@boost//:assert",
    "@boost//:atomic",
    "@boost//:checked_delete",
    "@boost//:config",
    "@boost//:cstdint",
    "@boost//:integer_traits",
    "@boost//:mpl",
    "@boost//:noncopyable",
    "@boost//:parameter",
    "@boost//:static_assert",
    "@boost//:tuple",
    "@boost//:type_traits",
    "@boost//:utility"],
  visibility = ["//visibility:public"],
)


cc_library(
  name="log",
  hdrs = glob(["include/boost/log/**/*.hpp", "include/boost/log/**/*.h"]),
  srcs = ["lib/x86_64-linux-gnu/libboost_log.so.1.58.0"],
  deps = ["@boost//:aligned_storage",
    "@boost//:array",
    "@boost//:assert",
    "@boost//:bind",
    "@boost//:config",
    "@boost//:core",
    "@boost//:cstdint",
    "@boost//:current_function",
    "@boost//:date_time",
    "@boost//:exception",
    "@boost//:filesystem",
    "@boost//:function_types",
    "@boost//:fusion",
    "@boost//:intrusive",
    "@boost//:iterator",
    "@boost//:lexical_cast",
    "@boost//:limits",
    "@boost//:move",
    "@boost//:mpl",
    "@boost//:operators",
    "@boost//:optional",
    "@boost//:parameter",
    "@boost//:phoenix",
    "@boost//:preprocessor",
    "@boost//:property_tree",
    "@boost//:proto",
    "@boost//:range",
    "@boost//:ref",
    "@boost//:regex",
    "@boost//:smart_ptr",
    "@boost//:spirit",
    "@boost//:static_assert",
    "@boost//:system",
    "@boost//:thread",
    "@boost//:throw_exception",
    "@boost//:type_traits",
    "@boost//:utility",
    "@boost//:xpressive"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="logic",
  hdrs = glob(["include/boost/logic/**/*.hpp", "include/boost/logic/**/*.h"]),
  deps = ["@boost//:config",
    "@boost//:noncopyable"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="make_shared",
  hdrs = ["include/boost/make_shared.hpp"],
  deps = ["@boost//:smart_ptr"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="make_unique",
  hdrs = ["include/boost/make_unique.hpp"],
  deps = ["@boost//:smart_ptr"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="math",
  hdrs = glob(["include/boost/math/**/*.hpp", "include/boost/math/**/*.h"]),
  deps = ["@boost//:array",
    "@boost//:assert",
    "@boost//:atomic",
    "@boost//:concept_check",
    "@boost//:config",
    "@boost//:cstdint",
    "@boost//:format",
    "@boost//:fusion",
    "@boost//:lexical_cast",
    "@boost//:limits",
    "@boost//:math_fwd",
    "@boost//:mpl",
    "@boost//:range",
    "@boost//:static_assert",
    "@boost//:throw_exception",
    "@boost//:tuple",
    "@boost//:type_traits",
    "@boost//:utility",
    "@boost//:version"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="math_fwd",
  hdrs = ["include/boost/math_fwd.hpp"],
  deps = ["@boost//:cstdint"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="mem_fn",
  hdrs = ["include/boost/mem_fn.hpp"],
  deps = ["@boost//:bind"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="memory_order",
  hdrs = ["include/boost/memory_order.hpp"],
  deps = [],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="move",
  hdrs = glob(["include/boost/move/**/*.hpp", "include/boost/move/**/*.h"]),
  deps = ["@boost//:assert",
    "@boost//:config",
    "@boost//:static_assert"],
  visibility = ["//visibility:public"],
)


cc_library(
  name="mpi",
  hdrs = ["include/boost/mpi.hpp"] + glob(["include/boost/mpi/**/*.hpp", "include/boost/mpi/**/*.h"]),
  srcs = ["lib/x86_64-linux-gnu/libboost_mpi.so.1.58.0"],
  deps = ["@boost//:archive",
    "@boost//:assert",
    "@boost//:config",
    "@boost//:function",
    "@boost//:graph",
    "@boost//:integer",
    "@boost//:iterator",
    "@boost//:limits",
    "@boost//:mpl",
    "@boost//:noncopyable",
    "@boost//:optional",
    "@boost//:property_map",
    "@boost//:python",
    "@boost//:scoped_array",
    "@boost//:serialization",
    "@boost//:shared_array",
    "@boost//:shared_ptr",
    "@boost//:static_assert",
    "@boost//:throw_exception",
    "@boost//:type_traits",
    "@boost//:utility"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="mpl",
  hdrs = glob(["include/boost/mpl/**/*.hpp", "include/boost/mpl/**/*.h"]),
  deps = ["@boost//:config",
    "@boost//:noncopyable",
    "@boost//:predef",
    "@boost//:preprocessor",
    "@boost//:ref",
    "@boost//:type_traits",
    "@boost//:utility"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="msm",
  hdrs = glob(["include/boost/msm/**/*.hpp", "include/boost/msm/**/*.h"]),
  deps = ["@boost//:any",
    "@boost//:assert",
    "@boost//:bind",
    "@boost//:circular_buffer",
    "@boost//:config",
    "@boost//:function",
    "@boost//:fusion",
    "@boost//:mpl",
    "@boost//:noncopyable",
    "@boost//:parameter",
    "@boost//:phoenix",
    "@boost//:preprocessor",
    "@boost//:proto",
    "@boost//:ref",
    "@boost//:serialization",
    "@boost//:tuple",
    "@boost//:type_traits",
    "@boost//:typeof",
    "@boost//:utility"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="multi_array",
  hdrs = ["include/boost/multi_array.hpp"] + glob(["include/boost/multi_array/**/*.hpp", "include/boost/multi_array/**/*.h"]),
  deps = ["@boost//:array",
    "@boost//:assert",
    "@boost//:concept_check",
    "@boost//:config",
    "@boost//:functional",
    "@boost//:iterator",
    "@boost//:limits",
    "@boost//:mpl",
    "@boost//:static_assert",
    "@boost//:type",
    "@boost//:type_traits",
    "@boost//:utility"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="multi_index",
  hdrs = glob(["include/boost/multi_index/**/*.hpp", "include/boost/multi_index/**/*.h"]),
  deps = ["@boost//:archive",
    "@boost//:assert",
    "@boost//:bind",
    "@boost//:call_traits",
    "@boost//:config",
    "@boost//:foreach_fwd",
    "@boost//:functional",
    "@boost//:integer",
    "@boost//:iterator",
    "@boost//:limits",
    "@boost//:move",
    "@boost//:mpl",
    "@boost//:multi_index_container_fwd",
    "@boost//:noncopyable",
    "@boost//:operators",
    "@boost//:preprocessor",
    "@boost//:ref",
    "@boost//:serialization",
    "@boost//:static_assert",
    "@boost//:throw_exception",
    "@boost//:tuple",
    "@boost//:type_traits",
    "@boost//:utility"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="multi_index_container",
  hdrs = ["include/boost/multi_index_container.hpp"],
  deps = ["@boost//:config",
    "@boost//:move",
    "@boost//:mpl",
    "@boost//:multi_index",
    "@boost//:multi_index_container_fwd",
    "@boost//:serialization",
    "@boost//:static_assert",
    "@boost//:throw_exception",
    "@boost//:type_traits",
    "@boost//:utility"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="multi_index_container_fwd",
  hdrs = ["include/boost/multi_index_container_fwd.hpp"],
  deps = ["@boost//:config",
    "@boost//:multi_index"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="multiprecision",
  hdrs = glob(["include/boost/multiprecision/**/*.hpp", "include/boost/multiprecision/**/*.h"]),
  deps = ["@boost//:array",
    "@boost//:assert",
    "@boost//:config",
    "@boost//:cstdint",
    "@boost//:integer",
    "@boost//:integer_traits",
    "@boost//:lexical_cast",
    "@boost//:math",
    "@boost//:mpl",
    "@boost//:random",
    "@boost//:rational",
    "@boost//:scoped_array",
    "@boost//:static_assert",
    "@boost//:throw_exception",
    "@boost//:type_traits",
    "@boost//:utility"],
  visibility = ["//visibility:public"],
)

# named_template_params

cc_inc_library(
  name="next_prior",
  hdrs = ["include/boost/next_prior.hpp"],
  deps = [],
  visibility = ["//visibility:public"],
)

# no_exceptions_support

cc_inc_library(
  name="non_type",
  hdrs = ["include/boost/non_type.hpp"],
  deps = [],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="noncopyable",
  hdrs = ["include/boost/noncopyable.hpp"],
  deps = [],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="nondet_random",
  hdrs = ["include/boost/nondet_random.hpp"],
  deps = ["@boost//:random"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="none",
  hdrs = ["include/boost/none.hpp"],
  deps = ["@boost//:none_t"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="none_t",
  hdrs = ["include/boost/none_t.hpp"],
  deps = [],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="numeric",
  hdrs = glob(["include/boost/numeric/**/*.hpp", "include/boost/numeric/**/*.h"]),
  deps = ["@boost//:array",
    "@boost//:assert",
    "@boost//:bind",
    "@boost//:compute",
    "@boost//:concept_check",
    "@boost//:config",
    "@boost//:core",
    "@boost//:cstdint",
    "@boost//:function",
    "@boost//:fusion",
    "@boost//:iterator",
    "@boost//:limits",
    "@boost//:logic",
    "@boost//:math",
    "@boost//:mpi",
    "@boost//:mpl",
    "@boost//:multi_array",
    "@boost//:next_prior",
    "@boost//:noncopyable",
    "@boost//:preprocessor",
    "@boost//:range",
    "@boost//:ref",
    "@boost//:serialization",
    "@boost//:shared_array",
    "@boost//:static_assert",
    "@boost//:throw_exception",
    "@boost//:type",
    "@boost//:type_traits",
    "@boost//:typeof",
    "@boost//:units",
    "@boost//:utility"],
  visibility = ["//visibility:public"],
)

# numeric_traits
# ob_compressed_pair

cc_inc_library(
  name="operators",
  hdrs = ["include/boost/operators.hpp"],
  deps = ["@boost//:config",
    "@boost//:iterator"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="optional",
  hdrs = ["include/boost/optional.hpp"] + glob(["include/boost/optional/**/*.hpp", "include/boost/optional/**/*.h"]),
  deps = ["@boost//:assert",
    "@boost//:config",
    "@boost//:core",
    "@boost//:move",
    "@boost//:mpl",
    "@boost//:none",
    "@boost//:static_assert",
    "@boost//:throw_exception",
    "@boost//:type",
    "@boost//:type_traits",
    "@boost//:utility"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="parameter",
  hdrs = ["include/boost/parameter.hpp"] + glob(["include/boost/parameter/**/*.hpp", "include/boost/parameter/**/*.h"]),
  deps = ["@boost//:mpl",
    "@boost//:preprocessor",
    "@boost//:type_traits"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="pending",
  hdrs = glob(["include/boost/pending/**/*.hpp", "include/boost/pending/**/*.h"]),
  deps = ["@boost//:config",
    "@boost//:graph",
    "@boost//:integer",
    "@boost//:iterator",
    "@boost//:iterator_adaptors",
    "@boost//:limits",
    "@boost//:mpi",
    "@boost//:mpl",
    "@boost//:next_prior",
    "@boost//:none",
    "@boost//:operators",
    "@boost//:optional",
    "@boost//:property_map",
    "@boost//:serialization",
    "@boost//:static_assert",
    "@boost//:type_traits",
    "@boost//:unordered_map",
    "@boost//:unordered_set",
    "@boost//:utility"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="phoenix",
  hdrs = ["include/boost/phoenix.hpp"] + glob(["include/boost/phoenix/**/*.hpp", "include/boost/phoenix/**/*.h"]),
  deps = ["@boost//:assert",
    "@boost//:call_traits",
    "@boost//:config",
    "@boost//:function",
    "@boost//:fusion",
    "@boost//:get_pointer",
    "@boost//:intrusive_ptr",
    "@boost//:is_placeholder",
    "@boost//:mpl",
    "@boost//:noncopyable",
    "@boost//:predef",
    "@boost//:preprocessor",
    "@boost//:proto",
    "@boost//:range",
    "@boost//:ref",
    "@boost//:type_traits",
    "@boost//:utility",
    "@boost//:version",
    "@boost//:visit_each"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="pointee",
  hdrs = ["include/boost/pointee.hpp"],
  deps = [],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="pointer_cast",
  hdrs = ["include/boost/pointer_cast.hpp"],
  deps = [],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="pointer_to_other",
  hdrs = ["include/boost/pointer_to_other.hpp"],
  deps = [],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="polygon",
  hdrs = glob(["include/boost/polygon/**/*.hpp", "include/boost/polygon/**/*.h"]),
  deps = ["@boost//:config",
    "@boost//:cstdint",
    "@boost//:mpl",
    "@boost//:utility"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="polymorphic_cast",
  hdrs = ["include/boost/polymorphic_cast.hpp"],
  deps = [],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="polymorphic_pointer_cast",
  hdrs = ["include/boost/polymorphic_pointer_cast.hpp"],
  deps = [],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="pool",
  hdrs = glob(["include/boost/pool/**/*.hpp", "include/boost/pool/**/*.h"]),
  deps = ["@boost//:assert",
    "@boost//:config",
    "@boost//:integer",
    "@boost//:limits",
    "@boost//:thread",
    "@boost//:throw_exception",
    "@boost//:type_traits"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="predef",
  hdrs = glob(["include/boost/predef/**/*.hpp", "include/boost/predef/**/*.h"]),
  deps = [],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="preprocessor",
  hdrs = ["include/boost/preprocessor.hpp"] + glob(["include/boost/preprocessor/**/*.hpp", "include/boost/preprocessor/**/*.h"]),
  deps = [],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="program_options",
  hdrs = ["include/boost/program_options.hpp"] + glob(["include/boost/program_options/**/*.hpp", "include/boost/program_options/**/*.h"]),
  deps = ["@boost//:any",
    "@boost//:config",
    "@boost//:function",
    "@boost//:iterator",
    "@boost//:lexical_cast",
    "@boost//:noncopyable",
    "@boost//:shared_ptr",
    "@boost//:static_assert",
    "@boost//:throw_exception",
    "@boost//:type_traits",
    "@boost//:version"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="progress",
  hdrs = ["include/boost/progress.hpp"],
  deps = ["@boost//:cstdint",
    "@boost//:noncopyable",
    "@boost//:timer"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="property_map",
  hdrs = glob(["include/boost/property_map/**/*.hpp", "include/boost/property_map/**/*.h"]),
  deps = ["@boost//:any",
    "@boost//:assert",
    "@boost//:bind",
    "@boost//:concept_archetype",
    "@boost//:concept_check",
    "@boost//:config",
    "@boost//:cstdint",
    "@boost//:function",
    "@boost//:iterator",
    "@boost//:lexical_cast",
    "@boost//:mpi",
    "@boost//:mpl",
    "@boost//:multi_index",
    "@boost//:multi_index_container",
    "@boost//:optional",
    "@boost//:serialization",
    "@boost//:shared_ptr",
    "@boost//:smart_ptr",
    "@boost//:static_assert",
    "@boost//:throw_exception",
    "@boost//:type",
    "@boost//:type_traits",
    "@boost//:utility",
    "@boost//:version",
    "@boost//:weak_ptr"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="property_tree",
  hdrs = glob(["include/boost/property_tree/**/*.hpp", "include/boost/property_tree/**/*.h"]),
  deps = ["@boost//:any",
    "@boost//:assert",
    "@boost//:config",
    "@boost//:iterator",
    "@boost//:limits",
    "@boost//:mpl",
    "@boost//:multi_index",
    "@boost//:multi_index_container",
    "@boost//:next_prior",
    "@boost//:optional",
    "@boost//:serialization",
    "@boost//:spirit",
    "@boost//:static_assert",
    "@boost//:throw_exception",
    "@boost//:type_traits",
    "@boost//:utility"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="proto",
  hdrs = glob(["include/boost/proto/**/*.hpp", "include/boost/proto/**/*.h"]),
  deps = ["@boost//:config",
    "@boost//:fusion",
    "@boost//:get_pointer",
    "@boost//:mpl",
    "@boost//:noncopyable",
    "@boost//:preprocessor",
    "@boost//:range",
    "@boost//:ref",
    "@boost//:static_assert",
    "@boost//:type_traits",
    "@boost//:typeof",
    "@boost//:utility",
    "@boost//:version"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="ptr_container",
  hdrs = glob(["include/boost/ptr_container/**/*.hpp", "include/boost/ptr_container/**/*.h"]),
  deps = ["@boost//:array",
    "@boost//:assert",
    "@boost//:checked_delete",
    "@boost//:circular_buffer",
    "@boost//:compressed_pair",
    "@boost//:config",
    "@boost//:iterator",
    "@boost//:mpl",
    "@boost//:pointee",
    "@boost//:range",
    "@boost//:scoped_array",
    "@boost//:serialization",
    "@boost//:static_assert",
    "@boost//:type_traits",
    "@boost//:unordered_map",
    "@boost//:unordered_set",
    "@boost//:utility"],
  visibility = ["//visibility:public"],
)


cc_library(
  name="python",
  hdrs = ["include/boost/python.hpp"] + glob(["include/boost/python/**/*.hpp", "include/boost/python/**/*.h"]),
  srcs = ["lib/x86_64-linux-gnu/libboost_python-py27.so.1.58.0"],
  deps = ["@boost//:config",
    "@boost//:iterator",
    "@boost//:mpl",
    "@boost//:preprocessor",
    "@boost//:static_assert",
    "@boost//:type",
    "@boost//:type_traits"],
  visibility = ["//visibility:public"],
)

# quick_allocator

cc_library(
  name="random",
  hdrs = ["include/boost/random.hpp"] + glob(["include/boost/random/**/*.hpp", "include/boost/random/**/*.h"]),
  srcs = ["lib/x86_64-linux-gnu/libboost_random.so.1.58.0"],
  deps = ["@boost//:assert",
    "@boost//:config",
    "@boost//:cstdint",
    "@boost//:integer",
    "@boost//:integer_traits",
    "@boost//:limits",
    "@boost//:mpl",
    "@boost//:noncopyable",
    "@boost//:operators",
    "@boost//:pending",
    "@boost//:range",
    "@boost//:static_assert",
    "@boost//:system",
    "@boost//:throw_exception",
    "@boost//:type_traits",
    "@boost//:utility"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="range",
  hdrs = ["include/boost/range.hpp"] + glob(["include/boost/range/**/*.hpp", "include/boost/range/**/*.h"]),
  deps = ["@boost//:array",
    "@boost//:assert",
    "@boost//:cast",
    "@boost//:concept_check",
    "@boost//:config",
    "@boost//:cstdint",
    "@boost//:functional",
    "@boost//:iterator",
    "@boost//:mpl",
    "@boost//:next_prior",
    "@boost//:noncopyable",
    "@boost//:optional",
    "@boost//:pointee",
    "@boost//:preprocessor",
    "@boost//:ref",
    "@boost//:regex",
    "@boost//:static_assert",
    "@boost//:tuple",
    "@boost//:type_traits",
    "@boost//:utility"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="ratio",
  hdrs = ["include/boost/ratio.hpp"] + glob(["include/boost/ratio/**/*.hpp", "include/boost/ratio/**/*.h"]),
  deps = ["@boost//:config",
    "@boost//:core",
    "@boost//:cstdint",
    "@boost//:integer_traits",
    "@boost//:mpl",
    "@boost//:rational",
    "@boost//:static_assert",
    "@boost//:type_traits"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="rational",
  hdrs = ["include/boost/rational.hpp"],
  deps = ["@boost//:assert",
    "@boost//:call_traits",
    "@boost//:config",
    "@boost//:integer",
    "@boost//:operators",
    "@boost//:static_assert"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="ref",
  hdrs = ["include/boost/ref.hpp"],
  deps = ["@boost//:core"],
  visibility = ["//visibility:public"],
)

# reference_content

cc_library(
  name="regex",
  hdrs = ["include/boost/regex.hpp"] + glob(["include/boost/regex/**/*.hpp", "include/boost/regex/**/*.h"]),
  srcs = ["lib/x86_64-linux-gnu/libboost_regex.so.1.58.0"],
  deps = ["@boost//:assert",
    "@boost//:concept_archetype",
    "@boost//:concept_check",
    "@boost//:config",
    "@boost//:cregex",
    "@boost//:cstdint",
    "@boost//:functional",
    "@boost//:integer",
    "@boost//:iterator",
    "@boost//:limits",
    "@boost//:mpl",
    "@boost//:ref",
    "@boost//:regex_fwd",
    "@boost//:scoped_array",
    "@boost//:scoped_ptr",
    "@boost//:shared_ptr",
    "@boost//:static_assert",
    "@boost//:throw_exception",
    "@boost//:type_traits"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="regex_fwd",
  hdrs = ["include/boost/regex_fwd.hpp"],
  deps = [],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="scope_exit",
  hdrs = ["include/boost/scope_exit.hpp"],
  deps = ["@boost//:config",
    "@boost//:function",
    "@boost//:mpl",
    "@boost//:preprocessor",
    "@boost//:type_traits",
    "@boost//:typeof",
    "@boost//:utility"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="scoped_array",
  hdrs = ["include/boost/scoped_array.hpp"],
  deps = ["@boost//:smart_ptr"],
  visibility = ["//visibility:public"],
)

# scoped_enum_emulation

cc_inc_library(
  name="scoped_ptr",
  hdrs = ["include/boost/scoped_ptr.hpp"],
  deps = ["@boost//:smart_ptr"],
  visibility = ["//visibility:public"],
)

# select_type

cc_library(
  name="serialization",
  hdrs = glob(["include/boost/serialization/**/*.hpp", "include/boost/serialization/**/*.h"]),
  srcs = ["lib/x86_64-linux-gnu/libboost_serialization.so.1.58.0"],
  deps = [],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="shared_array",
  hdrs = ["include/boost/shared_array.hpp"],
  deps = ["@boost//:smart_ptr"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="shared_container_iterator",
  hdrs = ["include/boost/shared_container_iterator.hpp"],
  deps = ["@boost//:iterator_adaptors",
    "@boost//:shared_ptr"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="shared_ptr",
  hdrs = ["include/boost/shared_ptr.hpp"],
  deps = ["@boost//:smart_ptr"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="signal",
  hdrs = ["include/boost/signal.hpp"],
  deps = ["@boost//:config",
    "@boost//:function",
    "@boost//:signals",
    "@boost//:type_traits"],
  visibility = ["//visibility:public"],
)


cc_library(
  name="signals",
  hdrs = ["include/boost/signals.hpp"] + glob(["include/boost/signals/**/*.hpp", "include/boost/signals/**/*.h"]),
  srcs = ["lib/x86_64-linux-gnu/libboost_signals.so.1.58.0"],
  deps = ["@boost//:any",
    "@boost//:config",
    "@boost//:function",
    "@boost//:iterator",
    "@boost//:noncopyable",
    "@boost//:operators",
    "@boost//:optional",
    "@boost//:ref",
    "@boost//:shared_ptr",
    "@boost//:signal",
    "@boost//:smart_ptr",
    "@boost//:type_traits",
    "@boost//:utility",
    "@boost//:visit_each"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="signals2",
  hdrs = ["include/boost/signals2.hpp"] + glob(["include/boost/signals2/**/*.hpp", "include/boost/signals2/**/*.h"]),
  deps = ["@boost//:aligned_storage",
    "@boost//:assert",
    "@boost//:bind",
    "@boost//:checked_delete",
    "@boost//:config",
    "@boost//:function",
    "@boost//:function_output_iterator",
    "@boost//:iterator",
    "@boost//:mpl",
    "@boost//:multi_index",
    "@boost//:noncopyable",
    "@boost//:optional",
    "@boost//:parameter",
    "@boost//:predef",
    "@boost//:preprocessor",
    "@boost//:ref",
    "@boost//:scoped_ptr",
    "@boost//:shared_ptr",
    "@boost//:smart_ptr",
    "@boost//:swap",
    "@boost//:throw_exception",
    "@boost//:tuple",
    "@boost//:type_traits",
    "@boost//:utility",
    "@boost//:variant",
    "@boost//:visit_each",
    "@boost//:weak_ptr"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="smart_ptr",
  hdrs = ["include/boost/smart_ptr.hpp"] + glob(["include/boost/smart_ptr/**/*.hpp", "include/boost/smart_ptr/**/*.h"]),
  deps = ["@boost//:align",
    "@boost//:assert",
    "@boost//:checked_delete",
    "@boost//:config",
    "@boost//:cstdint",
    "@boost//:predef",
    "@boost//:throw_exception",
    "@boost//:type_traits"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="sort",
  hdrs = glob(["include/boost/sort/**/*.hpp", "include/boost/sort/**/*.h"]),
  deps = ["@boost//:cstdint",
    "@boost//:serialization",
    "@boost//:static_assert",
    "@boost//:type_traits",
    "@boost//:utility"],
  visibility = ["//visibility:public"],
)

# sp_typeinfo

cc_inc_library(
  name="spirit",
  hdrs = ["include/boost/spirit.hpp"] + glob(["include/boost/spirit/**/*.hpp", "include/boost/spirit/**/*.h"]),
  deps = ["@boost//:algorithm",
    "@boost//:aligned_storage",
    "@boost//:array",
    "@boost//:assert",
    "@boost//:call_traits",
    "@boost//:compressed_pair",
    "@boost//:concept_check",
    "@boost//:config",
    "@boost//:cstdint",
    "@boost//:filesystem",
    "@boost//:foreach",
    "@boost//:function",
    "@boost//:function_types",
    "@boost//:fusion",
    "@boost//:integer",
    "@boost//:integer_traits",
    "@boost//:io",
    "@boost//:iostreams",
    "@boost//:iterator",
    "@boost//:iterator_adaptors",
    "@boost//:lexical_cast",
    "@boost//:limits",
    "@boost//:math",
    "@boost//:mpl",
    "@boost//:noncopyable",
    "@boost//:optional",
    "@boost//:phoenix",
    "@boost//:pool",
    "@boost//:preprocessor",
    "@boost//:proto",
    "@boost//:range",
    "@boost//:ref",
    "@boost//:regex",
    "@boost//:scoped_array",
    "@boost//:scoped_ptr",
    "@boost//:serialization",
    "@boost//:shared_ptr",
    "@boost//:static_assert",
    "@boost//:swap",
    "@boost//:thread",
    "@boost//:throw_exception",
    "@boost//:type_traits",
    "@boost//:typeof",
    "@boost//:unordered_map",
    "@boost//:utility",
    "@boost//:variant",
    "@boost//:version",
    "@boost//:weak_ptr"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="statechart",
  hdrs = glob(["include/boost/statechart/**/*.hpp", "include/boost/statechart/**/*.h"]),
  deps = ["@boost//:assert",
    "@boost//:bind",
    "@boost//:config",
    "@boost//:function",
    "@boost//:get_pointer",
    "@boost//:intrusive_ptr",
    "@boost//:mpl",
    "@boost//:noncopyable",
    "@boost//:polymorphic_cast",
    "@boost//:ref",
    "@boost//:shared_ptr",
    "@boost//:static_assert",
    "@boost//:type_traits",
    "@boost//:weak_ptr"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="static_assert",
  hdrs = ["include/boost/static_assert.hpp"],
  deps = ["@boost//:config"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="swap",
  hdrs = ["include/boost/swap.hpp"],
  deps = ["@boost//:core"],
  visibility = ["//visibility:public"],
)


cc_library(
  name="system",
  hdrs = glob(["include/boost/system/**/*.hpp", "include/boost/system/**/*.h"]),
  srcs = ["lib/x86_64-linux-gnu/libboost_system.so.1.58.0"],
  deps = ["@boost//:assert",
    "@boost//:cerrno",
    "@boost//:config",
    "@boost//:cstdint",
    "@boost//:noncopyable",
    "@boost//:predef",
    "@boost//:utility"],
  visibility = ["//visibility:public"],
)

# templated_streams

cc_inc_library(
  name="test",
  hdrs = glob(["include/boost/test/**/*.hpp", "include/boost/test/**/*.h"]),
  deps = ["@boost//:bind",
    "@boost//:call_traits",
    "@boost//:config",
    "@boost//:cstdlib",
    "@boost//:current_function",
    "@boost//:exception",
    "@boost//:io",
    "@boost//:iterator",
    "@boost//:lexical_cast",
    "@boost//:limits",
    "@boost//:mpl",
    "@boost//:noncopyable",
    "@boost//:numeric",
    "@boost//:optional",
    "@boost//:preprocessor",
    "@boost//:progress",
    "@boost//:scoped_array",
    "@boost//:scoped_ptr",
    "@boost//:shared_array",
    "@boost//:shared_ptr",
    "@boost//:static_assert",
    "@boost//:timer",
    "@boost//:type",
    "@boost//:type_traits",
    "@boost//:utility",
    "@boost//:version"],
  visibility = ["//visibility:public"],
)


cc_library(
  name="thread",
  hdrs = ["include/boost/thread.hpp"] + glob(["include/boost/thread/**/*.hpp", "include/boost/thread/**/*.h"]),
  srcs = ["lib/x86_64-linux-gnu/libboost_thread.so.1.58.0"],
  deps = ["@boost//:assert",
    "@boost//:atomic",
    "@boost//:bind",
    "@boost//:chrono",
    "@boost//:concept_check",
    "@boost//:config",
    "@boost//:container",
    "@boost//:core",
    "@boost//:cstdint",
    "@boost//:current_function",
    "@boost//:date_time",
    "@boost//:enable_shared_from_this",
    "@boost//:exception_ptr",
    "@boost//:function",
    "@boost//:functional",
    "@boost//:intrusive",
    "@boost//:intrusive_ptr",
    "@boost//:io",
    "@boost//:move",
    "@boost//:mpl",
    "@boost//:next_prior",
    "@boost//:optional",
    "@boost//:predef",
    "@boost//:preprocessor",
    "@boost//:scoped_array",
    "@boost//:shared_ptr",
    "@boost//:smart_ptr",
    "@boost//:static_assert",
    "@boost//:system",
    "@boost//:throw_exception",
    "@boost//:tuple",
    "@boost//:type_traits",
    "@boost//:utility"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="throw_exception",
  hdrs = ["include/boost/throw_exception.hpp"],
  deps = ["@boost//:config"],
  visibility = ["//visibility:public"],
)


cc_library(
  name="timer",
  hdrs = ["include/boost/timer.hpp"] + glob(["include/boost/timer/**/*.hpp", "include/boost/timer/**/*.h"]),
  srcs = ["lib/x86_64-linux-gnu/libboost_timer.so.1.58.0"],
  deps = ["@boost//:chrono",
    "@boost//:config",
    "@boost//:cstdint",
    "@boost//:limits",
    "@boost//:system"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="token_functions",
  hdrs = ["include/boost/token_functions.hpp"],
  deps = ["@boost//:assert",
    "@boost//:config",
    "@boost//:mpl",
    "@boost//:throw_exception"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="token_iterator",
  hdrs = ["include/boost/token_iterator.hpp"],
  deps = ["@boost//:assert",
    "@boost//:iterator",
    "@boost//:token_functions"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="tokenizer",
  hdrs = ["include/boost/tokenizer.hpp"],
  deps = ["@boost//:token_iterator"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="tr1",
  hdrs = glob(["include/boost/tr1/**/*.hpp", "include/boost/tr1/**/*.h"]),
  deps = ["@boost//:array",
    "@boost//:assert",
    "@boost//:bind",
    "@boost//:config",
    "@boost//:enable_shared_from_this",
    "@boost//:function",
    "@boost//:functional",
    "@boost//:fusion",
    "@boost//:math",
    "@boost//:mem_fn",
    "@boost//:mpl",
    "@boost//:random",
    "@boost//:ref",
    "@boost//:regex",
    "@boost//:shared_ptr",
    "@boost//:static_assert",
    "@boost//:tuple",
    "@boost//:type_traits",
    "@boost//:unordered_map",
    "@boost//:unordered_set",
    "@boost//:utility",
    "@boost//:weak_ptr"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="tti",
  hdrs = glob(["include/boost/tti/**/*.hpp", "include/boost/tti/**/*.h"]),
  deps = ["@boost//:config",
    "@boost//:function_types",
    "@boost//:mpl",
    "@boost//:preprocessor",
    "@boost//:type_traits"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="tuple",
  hdrs = glob(["include/boost/tuple/**/*.hpp", "include/boost/tuple/**/*.h"]),
  deps = ["@boost//:config",
    "@boost//:ref",
    "@boost//:static_assert",
    "@boost//:type_traits",
    "@boost//:utility"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="type",
  hdrs = ["include/boost/type.hpp"],
  deps = [],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="type_erasure",
  hdrs = glob(["include/boost/type_erasure/**/*.hpp", "include/boost/type_erasure/**/*.h"]),
  deps = ["@boost//:assert",
    "@boost//:config",
    "@boost//:fusion",
    "@boost//:iterator",
    "@boost//:make_shared",
    "@boost//:mpl",
    "@boost//:preprocessor",
    "@boost//:shared_ptr",
    "@boost//:throw_exception",
    "@boost//:type_traits",
    "@boost//:typeof",
    "@boost//:utility"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="type_index",
  hdrs = ["include/boost/type_index.hpp"] + glob(["include/boost/type_index/**/*.hpp", "include/boost/type_index/**/*.h"]),
  deps = ["@boost//:config",
    "@boost//:core",
    "@boost//:functional",
    "@boost//:mpl",
    "@boost//:static_assert",
    "@boost//:throw_exception",
    "@boost//:type_traits"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="type_traits",
  hdrs = ["include/boost/type_traits.hpp"] + glob(["include/boost/type_traits/**/*.hpp", "include/boost/type_traits/**/*.h"]),
  deps = ["@boost//:config",
    "@boost//:preprocessor"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="typeof",
  hdrs = glob(["include/boost/typeof/**/*.hpp", "include/boost/typeof/**/*.h"]),
  deps = ["@boost//:config",
    "@boost//:mpl",
    "@boost//:preprocessor",
    "@boost//:type_traits",
    "@boost//:utility"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="units",
  hdrs = glob(["include/boost/units/**/*.hpp", "include/boost/units/**/*.h"]),
  deps = ["@boost//:config",
    "@boost//:core",
    "@boost//:integer",
    "@boost//:io",
    "@boost//:lambda",
    "@boost//:math",
    "@boost//:math_fwd",
    "@boost//:mpl",
    "@boost//:preprocessor",
    "@boost//:serialization",
    "@boost//:static_assert",
    "@boost//:type_traits",
    "@boost//:typeof",
    "@boost//:utility",
    "@boost//:version"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="unordered",
  hdrs = glob(["include/boost/unordered/**/*.hpp", "include/boost/unordered/**/*.h"]),
  deps = ["@boost//:assert",
    "@boost//:config",
    "@boost//:functional",
    "@boost//:iterator",
    "@boost//:limits",
    "@boost//:move",
    "@boost//:preprocessor",
    "@boost//:swap",
    "@boost//:throw_exception",
    "@boost//:tuple",
    "@boost//:type_traits",
    "@boost//:utility"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="unordered_map",
  hdrs = ["include/boost/unordered_map.hpp"],
  deps = ["@boost//:config",
    "@boost//:unordered"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="unordered_set",
  hdrs = ["include/boost/unordered_set.hpp"],
  deps = ["@boost//:config",
    "@boost//:unordered"],
  visibility = ["//visibility:public"],
)

# utf8_codecvt_facet

cc_inc_library(
  name="utility",
  hdrs = ["include/boost/utility.hpp"] + glob(["include/boost/utility/**/*.hpp", "include/boost/utility/**/*.h"]),
  deps = ["@boost//:aligned_storage",
    "@boost//:checked_delete",
    "@boost//:config",
    "@boost//:core",
    "@boost//:next_prior",
    "@boost//:noncopyable",
    "@boost//:preprocessor",
    "@boost//:static_assert",
    "@boost//:swap",
    "@boost//:throw_exception"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="uuid",
  hdrs = glob(["include/boost/uuid/**/*.hpp", "include/boost/uuid/**/*.h"]),
  deps = ["@boost//:assert",
    "@boost//:config",
    "@boost//:cstdint",
    "@boost//:io",
    "@boost//:random",
    "@boost//:serialization",
    "@boost//:shared_ptr",
    "@boost//:static_assert",
    "@boost//:throw_exception",
    "@boost//:type_traits"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="variant",
  hdrs = ["include/boost/variant.hpp"] + glob(["include/boost/variant/**/*.hpp", "include/boost/variant/**/*.h"]),
  deps = ["@boost//:aligned_storage",
    "@boost//:assert",
    "@boost//:bind",
    "@boost//:blank",
    "@boost//:blank_fwd",
    "@boost//:call_traits",
    "@boost//:checked_delete",
    "@boost//:config",
    "@boost//:core",
    "@boost//:functional",
    "@boost//:math",
    "@boost//:move",
    "@boost//:mpl",
    "@boost//:preprocessor",
    "@boost//:static_assert",
    "@boost//:throw_exception",
    "@boost//:type_index",
    "@boost//:type_traits",
    "@boost//:utility"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="version",
  hdrs = ["include/boost/version.hpp"],
  deps = [],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="visit_each",
  hdrs = ["include/boost/visit_each.hpp"],
  deps = [],
  visibility = ["//visibility:public"],
)


cc_library(
  name="wave",
  hdrs = ["include/boost/wave.hpp"] + glob(["include/boost/wave/**/*.hpp", "include/boost/wave/**/*.h"]),
  srcs = ["lib/x86_64-linux-gnu/libboost_wave.so.1.58.0"],
  deps = ["@boost//:assert",
    "@boost//:concept_check",
    "@boost//:config",
    "@boost//:cstdint",
    "@boost//:filesystem",
    "@boost//:intrusive_ptr",
    "@boost//:iterator",
    "@boost//:iterator_adaptors",
    "@boost//:mpl",
    "@boost//:multi_index",
    "@boost//:multi_index_container",
    "@boost//:noncopyable",
    "@boost//:pool",
    "@boost//:preprocessor",
    "@boost//:serialization",
    "@boost//:shared_ptr",
    "@boost//:spirit",
    "@boost//:static_assert",
    "@boost//:system",
    "@boost//:thread",
    "@boost//:throw_exception",
    "@boost//:type_traits",
    "@boost//:version"],
  visibility = ["//visibility:public"],
)


cc_inc_library(
  name="weak_ptr",
  hdrs = ["include/boost/weak_ptr.hpp"],
  deps = ["@boost//:smart_ptr"],
  visibility = ["//visibility:public"],
)

# winapi
# workaround

cc_inc_library(
  name="xpressive",
  hdrs = glob(["include/boost/xpressive/**/*.hpp", "include/boost/xpressive/**/*.h"]),
  deps = ["@boost//:assert",
    "@boost//:call_traits",
    "@boost//:checked_delete",
    "@boost//:config",
    "@boost//:cstdint",
    "@boost//:current_function",
    "@boost//:exception",
    "@boost//:implicit_cast",
    "@boost//:integer",
    "@boost//:intrusive_ptr",
    "@boost//:iterator",
    "@boost//:iterator_adaptors",
    "@boost//:lexical_cast",
    "@boost//:limits",
    "@boost//:mpl",
    "@boost//:next_prior",
    "@boost//:noncopyable",
    "@boost//:numeric",
    "@boost//:optional",
    "@boost//:preprocessor",
    "@boost//:proto",
    "@boost//:range",
    "@boost//:ref",
    "@boost//:shared_ptr",
    "@boost//:static_assert",
    "@boost//:throw_exception",
    "@boost//:type_traits",
    "@boost//:typeof",
    "@boost//:utility",
    "@boost//:version",
    "@boost//:weak_ptr"],
  visibility = ["//visibility:public"],
)

