#pragma once

#include "packages/core/include/wait_queue.h"
#include "packages/hal/include/drivers/vcu/vcu_device_interface.h"

#include <arpa/inet.h>
#include <netinet/in.h>
#include <sys/socket.h>

namespace hal {

namespace vcu {

    /// VCU driver that communicates with the VCU over ethernet using UDP sockets
    class UdpSocketVcuDriver : public VCUDeviceInterface {
    public:
        UdpSocketVcuDriver(const std::string& vcuAddress, const unsigned short& commandPort, const unsigned short& telemetryPort);
        ~UdpSocketVcuDriver();
        UdpSocketVcuDriver(const UdpSocketVcuDriver&) = delete;
        UdpSocketVcuDriver(const UdpSocketVcuDriver&&) = delete;
        UdpSocketVcuDriver& operator=(const UdpSocketVcuDriver&) = delete;
        UdpSocketVcuDriver& operator=(const UdpSocketVcuDriver&&) = delete;

        std::string deviceName() const { return "UdpSocketVcuDevice"; }
        uint64_t serialNumber() const { return 0; }

        /// Poll function to check whether telemetry data is  available
        bool poll(uint32_t timeoutInMicroseconds);

        /// Receives telemetry data from the VCU and passes it to the calling function
        bool capture(VCUTelemetryEnvelope& telemetryEnvelope);

        /// Sends the VCU a command and returns the response generated by the VCU
        bool send(const VCUCommandEnvelope& commandEnvelope, VCUCommandResponse& commandResponse);

    private:
        int m_commandSocket;
        int m_telemetrySocket;
        struct sockaddr_in m_commandAddress;
        struct sockaddr_in m_telemetryAddress;
    };
} // vcu
} // hal
